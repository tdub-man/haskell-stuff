
==================== FINAL INTERFACE ====================
2016-09-20 22:42:35.113108 UTC

interface crossfrac-0.1.0.0-LqWiCV7pRitGpJbq1TgxgV:CrossFrac 8001
  interface hash: 13011f0bdbe77dd63c818961ed251d74
  ABI hash: 9b45581e33cd98da8fd385529112fe0b
  export-list hash: 7044969ec58573ddbfeef2bf51d106fe
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f94329a9d37baa07a81ea9a718591aa2
  sig of: Nothing
  used TH splices: False
  where
exports:
  CrossFrac.dispFrac
module dependencies:
package dependencies: GLURaw-2.0.0.2@GLURaw-2.0.0.2-FbcPHzTa7vLEnCQ0kkJ8B4
                      GLUT-2.7.0.10@GLUT-2.7.0.10-A3NqGto8XAVI0ysflkZZW9
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-HHHIolNI8Pm5H3OGkgSUrO
                      OpenGL-3.0.1.0@OpenGL-3.0.1.0-2SQfSEFR02AIolFfoam9tJ
                      OpenGLRaw-3.2.2.0@OpenGLRaw-3.2.2.0-KWU3ruQNCGR7AsVafRovL
                      StateVar-1.1.0.4@StateVar-1.1.0.4-CJpWsiXJdd89SnV9dZtTwc
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bmp-1.2.6.3@bmp-1.2.6.3-KF4xHl5RTVIp6NQI8dI2I
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fixed-0.2.1.1@fixed-0.2.1.1-21JkkJmr6h52cZo1o8cauA ghc-prim-0.5.0.0
                      gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB
                      gloss-rendering-1.10.3.3@gloss-rendering-1.10.3.3-5PiCamqHfbt8xiRs4ymvLr
                      half-0.2.2.3@half-0.2.2.3-BFHx0LiJemg6baNXrjGThF
                      integer-gmp-1.0.0.1 stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         gloss-rendering-1.10.3.3@gloss-rendering-1.10.3.3-5PiCamqHfbt8xiRs4ymvLr:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB:Graphics.Gloss d5b982018b0c758f00994fce74453c04
import  -/  gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB:Graphics.Gloss.Data.Color b525c333674d23cc8320332d7db6f0cc
import  -/  gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB:Graphics.Gloss.Data.Display 23041d1e33431329e29c0f20d2656204
import  -/  gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB:Graphics.Gloss.Interface.Pure.Display 4a533cefe8cfd70824e77b2888fc8dc2
import  -/  gloss-rendering-1.10.3.3@gloss-rendering-1.10.3.3-5PiCamqHfbt8xiRs4ymvLr:Graphics.Gloss.Internals.Data.Picture 1b8e2c645c53408a68ac59ac66e45f2b
ff2a30553dfa5f4640efbf9e343cf83d
  $fEqCFCoord :: GHC.Classes.Eq CrossFrac.CFCoord
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ CrossFrac.CFCoord
                  CrossFrac.$fEqCFCoord_$c==
                  CrossFrac.$fEqCFCoord_$c/= -}
ff2a30553dfa5f4640efbf9e343cf83d
  $fEqCFCoord_$c/= ::
    CrossFrac.CFCoord -> CrossFrac.CFCoord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: CrossFrac.CFCoord) (w1 :: CrossFrac.CFCoord) ->
                 case w of ww { CrossFrac.CFCoord ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.F# ww4 ->
                 case w1 of ww5 { CrossFrac.CFCoord ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.F# ww9 ->
                 CrossFrac.$w$c/= ww4 ww2 ww9 ww7 } } } }) -}
ff2a30553dfa5f4640efbf9e343cf83d
  $fEqCFCoord_$c== ::
    CrossFrac.CFCoord -> CrossFrac.CFCoord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: CrossFrac.CFCoord) (w1 :: CrossFrac.CFCoord) ->
                 case w of ww { CrossFrac.CFCoord ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.F# ww4 ->
                 case w1 of ww5 { CrossFrac.CFCoord ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.F# ww9 ->
                 CrossFrac.$w$c== ww4 ww2 ww9 ww7 } } } }) -}
7217c76fbddca16d7726fea75f6dcd8a
  $fEqCFLine :: GHC.Classes.Eq CrossFrac.CFLine
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ CrossFrac.CFLine
                  CrossFrac.$fEqCFLine_$c==
                  CrossFrac.$fEqCFLine_$c/= -}
7217c76fbddca16d7726fea75f6dcd8a
  $fEqCFLine_$c/= ::
    CrossFrac.CFLine -> CrossFrac.CFLine -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: CrossFrac.CFLine) (b :: CrossFrac.CFLine) ->
                 case CrossFrac.$fEqCFLine_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
7217c76fbddca16d7726fea75f6dcd8a
  $fEqCFLine_$c== ::
    CrossFrac.CFLine -> CrossFrac.CFLine -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: CrossFrac.CFLine) (w1 :: CrossFrac.CFLine) ->
                 case w of ww { CrossFrac.CFLine ww1 ww2 ww3 ->
                 case ww1 of ww4 { CrossFrac.CFCoord ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.F# ww8 ->
                 case w1 of ww9 { CrossFrac.CFLine ww10 ww11 ww12 ->
                 case ww10 of ww13 { CrossFrac.CFCoord ww14 ww15 ->
                 case ww14 of ww16 { GHC.Types.F# ww17 ->
                 CrossFrac.$w$c==1
                   ww8
                   ww6
                   ww2
                   ww3
                   ww17
                   ww15
                   ww11
                   ww12 } } } } } }) -}
ff2a30553dfa5f4640efbf9e343cf83d
  $fShowCFCoord :: GHC.Show.Show CrossFrac.CFCoord
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ CrossFrac.CFCoord
                  CrossFrac.$fShowCFCoord_$cshowsPrec
                  CrossFrac.$fShowCFCoord_$cshow
                  CrossFrac.$fShowCFCoord_$cshowList -}
ff2a30553dfa5f4640efbf9e343cf83d
  $fShowCFCoord1 :: CrossFrac.CFCoord -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: CrossFrac.CFCoord) ->
                 case w of ww { CrossFrac.CFCoord ww1 ww2 ->
                 CrossFrac.$w$cshowsPrec 0# ww1 ww2 }) -}
75e85d216540b049c58fff2195403312
  $fShowCFCoord2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
6eead2f6abc0baa636db1d3ccbb998fe
  $fShowCFCoord3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_y = "#) -}
e416c68dfa570711520b848eada72d91
  $fShowCFCoord4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
843b17086a83294c68e0faefddf72abc
  $fShowCFCoord5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_x = "#) -}
89b3b21423a68daf8b320c0799f6cf99
  $fShowCFCoord6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CFCoord {"#) -}
7f71dbea30c206098a9b41c9777f5ee6
  $fShowCFCoord7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
ff2a30553dfa5f4640efbf9e343cf83d
  $fShowCFCoord_$cshow :: CrossFrac.CFCoord -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: CrossFrac.CFCoord) ->
                 CrossFrac.$fShowCFCoord_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ff2a30553dfa5f4640efbf9e343cf83d
  $fShowCFCoord_$cshowList :: [CrossFrac.CFCoord] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ CrossFrac.CFCoord
                   CrossFrac.$fShowCFCoord1) -}
ff2a30553dfa5f4640efbf9e343cf83d
  $fShowCFCoord_$cshowsPrec ::
    GHC.Types.Int -> CrossFrac.CFCoord -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: CrossFrac.CFCoord) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { CrossFrac.CFCoord ww3 ww4 ->
                 CrossFrac.$w$cshowsPrec ww1 ww3 ww4 } }) -}
7217c76fbddca16d7726fea75f6dcd8a
  $fShowCFLine :: GHC.Show.Show CrossFrac.CFLine
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ CrossFrac.CFLine
                  CrossFrac.$fShowCFLine_$cshowsPrec
                  CrossFrac.$fShowCFLine_$cshow
                  CrossFrac.$fShowCFLine_$cshowList -}
7217c76fbddca16d7726fea75f6dcd8a
  $fShowCFLine1 :: CrossFrac.CFLine -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: CrossFrac.CFLine) ->
                 case w of ww { CrossFrac.CFLine ww1 ww2 ww3 ->
                 CrossFrac.$w$cshowsPrec1 0# ww1 ww2 ww3 }) -}
2fcf1bbecbf817635838c6cf86d531ca
  $fShowCFLine2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_b = "#) -}
f0ed733964c45007624ee5eef829eb7a
  $fShowCFLine3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_mid = "#) -}
bedcfff25b3b83e61999fd22a68bb5ce
  $fShowCFLine4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_a = "#) -}
38275cf4dc90ee553a10c20881fc3647
  $fShowCFLine5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CFLine {"#) -}
7217c76fbddca16d7726fea75f6dcd8a
  $fShowCFLine_$cshow :: CrossFrac.CFLine -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: CrossFrac.CFLine) ->
                 CrossFrac.$fShowCFLine_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7217c76fbddca16d7726fea75f6dcd8a
  $fShowCFLine_$cshowList :: [CrossFrac.CFLine] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ CrossFrac.CFLine
                   CrossFrac.$fShowCFLine1) -}
7217c76fbddca16d7726fea75f6dcd8a
  $fShowCFLine_$cshowsPrec ::
    GHC.Types.Int -> CrossFrac.CFLine -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: CrossFrac.CFLine) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { CrossFrac.CFLine ww3 ww4 ww5 ->
                 CrossFrac.$w$cshowsPrec1 ww1 ww3 ww4 ww5 } }) -}
a137298e2017ba96dfbd8699a836d531
  $tc'CFCoord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10362848583830126486##
                   1750024171367579832##
                   CrossFrac.$trModule
                   CrossFrac.$tc'CFCoord1) -}
cb4289c763dcc2f74dea4c715f09db61
  $tc'CFCoord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CFCoord"#) -}
411601ead42bff170761900efaa01268
  $tc'CFLine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3578291341154560108##
                   13710598360563660017##
                   CrossFrac.$trModule
                   CrossFrac.$tc'CFLine1) -}
fb1b78f595fa7ea21934e61df60b2ff9
  $tc'CFLine1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CFLine"#) -}
9d7ec9a94cd7d917be219124e940f66f
  $tcCFCoord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17160778936082253524##
                   18233540076671178792##
                   CrossFrac.$trModule
                   CrossFrac.$tcCFCoord1) -}
3198fc3920860068c566553f5c282337
  $tcCFCoord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CFCoord"#) -}
6c21f43f0a198f4b761b01acab12386f
  $tcCFLine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8319409440070138733##
                   2853572340803546325##
                   CrossFrac.$trModule
                   CrossFrac.$tcCFLine1) -}
c0d1d3b8c7dc4207f2984a48947b8d06
  $tcCFLine1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CFLine"#) -}
c74f32c4d1e07fc5479e5da1a6231685
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CrossFrac.$trModule2
                   CrossFrac.$trModule1) -}
55c6eeff3f5c08cb9709bcc62770a926
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CrossFrac"#) -}
faaacd9d496c94b0c553e99dad7117b5
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "crossfrac-0.1.0.0-LqWiCV7pRitGpJbq1TgxgV"#) -}
726e60fe24e645050a34e573aa074f6e
  $w$c/= ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: GHC.Prim.Float#)
                   (ww3 :: GHC.Types.Float) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.F# x ->
                      case ww3 of wild2 { GHC.Types.F# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
b8e9a45bd52a038ba5a18e6c7cc370d7
  $w$c== ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: GHC.Prim.Float#)
                   (ww3 :: GHC.Types.Float) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.eqFloat ww1 ww3 }) -}
3a793d8289c4654a55c213cbe642091d
  $w$c==1 ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> CrossFrac.CFCoord
    -> CrossFrac.CFCoord
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> CrossFrac.CFCoord
    -> CrossFrac.CFCoord
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: CrossFrac.CFCoord)
                   (ww3 :: CrossFrac.CFCoord)
                   (ww4 :: GHC.Prim.Float#)
                   (ww5 :: GHC.Types.Float)
                   (ww6 :: CrossFrac.CFCoord)
                   (ww7 :: CrossFrac.CFCoord) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww4) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.F# x ->
                      case ww5 of wild2 { GHC.Types.F# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of wild4 { CrossFrac.CFCoord a1 a2 ->
                           case ww6 of wild5 { CrossFrac.CFCoord b1 b2 ->
                           case a1 of wild6 { GHC.Types.F# x1 ->
                           case b1 of wild7 { GHC.Types.F# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# x1 y1) of wild8 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case a2 of wild9 { GHC.Types.F# x2 ->
                                case b2 of wild10 { GHC.Types.F# y2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x2 y2) of wild11 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> CrossFrac.$fEqCFCoord_$c== ww3 ww7 } } } } } } } } } } } }) -}
7a4d7b450323aa993969c7cb1cbbd0f6
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Float -> GHC.Types.Float -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: GHC.Types.Float) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { GHC.Types.F# ww4 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat_$sshowFloat
                       CrossFrac.$fShowCFCoord7
                       ww4 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.F# ww4 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat_$sshowFloat
                       CrossFrac.$fShowCFCoord7
                       ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       CrossFrac.$fShowCFCoord6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          CrossFrac.$fShowCFCoord5
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                CrossFrac.$fShowCFCoord4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   CrossFrac.$fShowCFCoord3
                                   (f1
                                      (GHC.Base.++ @ GHC.Types.Char CrossFrac.$fShowCFCoord2 x))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x)) }) -}
b303fcde774051c048a5ec6556a3ca2f
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> CrossFrac.CFCoord
    -> CrossFrac.CFCoord
    -> CrossFrac.CFCoord
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <S,U><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: CrossFrac.CFCoord)
                   (ww2 :: CrossFrac.CFCoord)
                   (ww3 :: CrossFrac.CFCoord) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww4 { CrossFrac.CFCoord ww5 ww6 ->
                     CrossFrac.$w$cshowsPrec 0# ww5 ww6 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww4 { CrossFrac.CFCoord ww5 ww6 ->
                     CrossFrac.$w$cshowsPrec 0# ww5 ww6 }
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = case ww3 of ww4 { CrossFrac.CFCoord ww5 ww6 ->
                     CrossFrac.$w$cshowsPrec 0# ww5 ww6 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       CrossFrac.$fShowCFLine5
                       (GHC.Base.++
                          @ GHC.Types.Char
                          CrossFrac.$fShowCFLine4
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                CrossFrac.$fShowCFCoord4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   CrossFrac.$fShowCFLine3
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         CrossFrac.$fShowCFCoord4
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            CrossFrac.$fShowCFLine2
                                            (f2
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  CrossFrac.$fShowCFCoord2
                                                  x)))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x)) }) -}
3cffda9902b94f015abf82afeaa73514
  $wrecCrossFractal ::
    [CrossFrac.CFLine] -> GHC.Prim.Int# -> [CrossFrac.CFLine]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: [0] -}
ff2a30553dfa5f4640efbf9e343cf83d
  data CFCoord
    = CFCoord {_x :: GHC.Types.Float, _y :: GHC.Types.Float}
7217c76fbddca16d7726fea75f6dcd8a
  data CFLine
    = CFLine {_a :: CrossFrac.CFCoord,
              _mid :: CrossFrac.CFCoord,
              _b :: CrossFrac.CFCoord}
4cf92e71b60d3427c536d1f5da2b7713
  _a :: CrossFrac.CFLine -> CrossFrac.CFCoord
  RecSel Left CrossFrac.CFLine
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: CrossFrac.CFLine) ->
                 case ds of wild { CrossFrac.CFLine ds1 ds2 ds3 -> ds1 }) -}
e7b3a522a178afb21fb13c8afa9b40a3
  _b :: CrossFrac.CFLine -> CrossFrac.CFCoord
  RecSel Left CrossFrac.CFLine
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: CrossFrac.CFLine) ->
                 case ds of wild { CrossFrac.CFLine ds1 ds2 ds3 -> ds3 }) -}
19b79a646bbb4a5590a242ad7fe90b15
  _mid :: CrossFrac.CFLine -> CrossFrac.CFCoord
  RecSel Left CrossFrac.CFLine
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: CrossFrac.CFLine) ->
                 case ds of wild { CrossFrac.CFLine ds1 ds2 ds3 -> ds2 }) -}
064eec45fac128877568719b6e8bfb13
  _x :: CrossFrac.CFCoord -> GHC.Types.Float
  RecSel Left CrossFrac.CFCoord
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: CrossFrac.CFCoord) ->
                 case ds of wild { CrossFrac.CFCoord ds1 ds2 -> ds1 }) -}
c49ac9bed413fb6ef4f34db078868a64
  _y :: CrossFrac.CFCoord -> GHC.Types.Float
  RecSel Left CrossFrac.CFCoord
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: CrossFrac.CFCoord) ->
                 case ds of wild { CrossFrac.CFCoord ds1 ds2 -> ds2 }) -}
eb4c8b68586ae7ed950c21ac965cc71b
  dispFrac :: GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                CrossFrac.dispFrac1
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
93ce12092e76fd920f5ee26bf7ae35ce
  dispFrac1 ::
    GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: (\ (n :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Graphics.Gloss.Internals.Interface.Display.displayWithBackend1
                   @ Graphics.Gloss.Internals.Interface.Backend.GLUT.GLUTState
                   Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState
                   Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState_$cinitBackendState
                   CrossFrac.dispFrac15
                   Graphics.Gloss.Data.Color.black
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (# s,
                       Graphics.Gloss.Internals.Data.Picture.Rotate
                         CrossFrac.dispFrac14
                         (Graphics.Gloss.Internals.Data.Picture.Color
                            Graphics.Gloss.Data.Color.white
                            (Graphics.Gloss.Internals.Data.Picture.Pictures
                               (case n of ww { GHC.Types.I# ww1 ->
                                GHC.Base.map
                                  @ CrossFrac.CFLine
                                  @ Graphics.Gloss.Internals.Data.Picture.Picture
                                  CrossFrac.lineToPicture
                                  (CrossFrac.$wrecCrossFractal CrossFrac.dispFrac2 ww1) }))) #))
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <Graphics.Gloss.Internals.Data.Picture.Picture>_R))
                   Graphics.Gloss.Interface.Pure.Display.display2
                     `cast`
                   (<Graphics.Gloss.Data.Controller.Controller>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   eta) -}
f2aa54a633abc24a668e5a969dd2f379
  dispFrac10 :: CrossFrac.CFCoord
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (CrossFrac.CFCoord
                   CrossFrac.dispFrac6
                   CrossFrac.dispFrac7) -}
8672ed1a04afa56846a684b806cfe81b
  dispFrac11 :: CrossFrac.CFLine
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (CrossFrac.CFLine
                   CrossFrac.dispFrac13
                   CrossFrac.dispFrac8
                   CrossFrac.dispFrac12) -}
ddba306e2eec2eff3592d9e094a87924
  dispFrac12 :: CrossFrac.CFCoord
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (CrossFrac.CFCoord
                   CrossFrac.dispFrac7
                   CrossFrac.dispFrac7) -}
810a0a787c249dbd2a5ee311d1391f19
  dispFrac13 :: CrossFrac.CFCoord
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (CrossFrac.CFCoord
                   CrossFrac.dispFrac6
                   CrossFrac.dispFrac6) -}
03c29aed91831c8bc87e15144225e4e5
  dispFrac14 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 45.0#) -}
24986e16ada5fd11cd6294f687a78d90
  dispFrac15 :: Graphics.Gloss.Data.Display.Display
  {- Strictness: m1,
     Unfolding: (Graphics.Gloss.Data.Display.InWindow
                   CrossFrac.dispFrac20
                   CrossFrac.dispFrac18
                   CrossFrac.dispFrac16) -}
fdfe5d125881bc10c383ea58e4fb44b3
  dispFrac16 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((CrossFrac.dispFrac17, CrossFrac.dispFrac17)) -}
a7e0f7248210777d68500e4d5307e262
  dispFrac17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 20#) -}
2c8f99891ef3bf71d4bae446329ae2ac
  dispFrac18 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((CrossFrac.dispFrac19, CrossFrac.dispFrac19)) -}
a7dbf0889387c8924b4de7016d754160
  dispFrac19 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 600#) -}
eff46a9bcec528f9507897c919e62cf4
  dispFrac2 :: [CrossFrac.CFLine]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ CrossFrac.CFLine
                   CrossFrac.dispFrac11
                   CrossFrac.dispFrac3) -}
5d85a2444b3db303c7718198d711c0be
  dispFrac20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CrossFrac"#) -}
760e29bf64434abb613a3c7a140dc9e5
  dispFrac3 :: [CrossFrac.CFLine]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ CrossFrac.CFLine
                   CrossFrac.dispFrac4
                   (GHC.Types.[] @ CrossFrac.CFLine)) -}
e63dfc30e749715725be8be334f2a127
  dispFrac4 :: CrossFrac.CFLine
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (CrossFrac.CFLine
                   CrossFrac.dispFrac10
                   CrossFrac.dispFrac8
                   CrossFrac.dispFrac5) -}
326fd1d1625a33f52739044cd85d4afc
  dispFrac5 :: CrossFrac.CFCoord
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (CrossFrac.CFCoord
                   CrossFrac.dispFrac7
                   CrossFrac.dispFrac6) -}
902222e4c527e113b4267afacfd6e5bb
  dispFrac6 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
6a43dc4dd336de219b53c943cf7b32ef
  dispFrac7 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 256.0#) -}
f1785bf1981eaf134e36106de6e13a69
  dispFrac8 :: CrossFrac.CFCoord
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (CrossFrac.CFCoord
                   CrossFrac.dispFrac9
                   CrossFrac.dispFrac9) -}
02bd7ea2e44ae71b0a716a09c0fcf25e
  dispFrac9 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 128.0#) -}
ee8cd64ab8cd185da726bdc38ec04095
  lineToPicture ::
    CrossFrac.CFLine -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLS),1*U(1*U(U,U),A,1*U(U,U))>m3,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: CrossFrac.CFLine) ->
                 case ds of wild { CrossFrac.CFLine ds1 ds2 ds3 ->
                 case ds1 of wild1 { CrossFrac.CFCoord a b ->
                 case ds3 of wild2 { CrossFrac.CFCoord c d ->
                 Graphics.Gloss.Internals.Data.Picture.Line
                   (GHC.Types.:
                      @ Graphics.Gloss.Internals.Data.Picture.Point
                      (a, b)
                      (GHC.Types.:
                         @ Graphics.Gloss.Internals.Data.Picture.Point
                         (c, d)
                         (GHC.Types.[]
                            @ Graphics.Gloss.Internals.Data.Picture.Point))) } } }) -}
instance GHC.Classes.Eq [CrossFrac.CFCoord] = CrossFrac.$fEqCFCoord
instance GHC.Classes.Eq [CrossFrac.CFLine] = CrossFrac.$fEqCFLine
instance GHC.Show.Show [CrossFrac.CFCoord]
  = CrossFrac.$fShowCFCoord
instance GHC.Show.Show [CrossFrac.CFLine] = CrossFrac.$fShowCFLine
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

