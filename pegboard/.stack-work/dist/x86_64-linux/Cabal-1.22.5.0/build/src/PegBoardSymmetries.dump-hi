
==================== FINAL INTERFACE ====================
2016-09-12 05:47:14.519451 UTC

interface pegbo_FGCQSHOeNg054bfGSPqnnE:PegBoardSymmetries 7103
  interface hash: f043181fd5e7da1935ec645e91f4dd2a
  ABI hash: 3cb83643fc94b4bf785c102de72103ce
  export-list hash: 00bc63941b69b48039ad35c0d2ee977e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  PegBoardSymmetries.zedSym
module dependencies: Helpers.Lists Helpers.Math PegBoard
                     PegBoardCriticalPoints
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  Helpers.Lists ef2fe3f1018c91989066bb63b1bab840
  exports: a436165992904039544f32b58c9d6666
import  -/  PegBoard 16a00028148d987bcb0445bcccc4bd0d
  exports: 8ceb9b62cfb26faa219244e1542864dc
  Board b1f9eca28e9b5e676e1b60fc7cfd14a6
  Board fe37fd83b8e4a585ef03d58d782ca831
  Coord 26d14fa8bfea90f28c094a055bef8f1a
import  -/  PegBoardCriticalPoints 69806a00f96144d88dc73908925922f6
  exports: 53d1809c07d7df7b87e9c397c7f98958
  rows 92c823aebf5fc72177b0a9aa95b7e226
59bb67789c54d93a107dca03df469ba8
  $wzedSym ::
    [PegBoard.Coord]
    -> [PegBoard.Coord] -> (# [PegBoard.Coord], [PegBoard.Coord] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [PegBoard.Coord] ww1 :: [PegBoard.Coord] ->
                 let {
                   pshs :: [(PegBoard.Coord, GHC.Types.Bool)]
                   = let {
                       pRows :: [[PegBoard.Coord]]
                       = Data.OldList.groupBy
                           @ PegBoard.Coord
                           PegBoardCriticalPoints.rows1
                           (Data.OldList.sortBy
                              @ PegBoard.Coord
                              PegBoard.$fOrdCoord_$ccompare
                              (GHC.Base.++ @ PegBoard.Coord ww ww1))
                     } in
                     let {
                       a :: PegBoard.Coord -> (PegBoard.Coord, GHC.Types.Bool)
                         {- Arity: 1, Strictness: <L,U>m,
                            Unfolding: InlineRule (1, True, False)
                                       (\ x :: PegBoard.Coord ->
                                        (x,
                                         GHC.List.elem @ PegBoard.Coord PegBoard.$fEqCoord x ww)) -}
                       = \ x :: PegBoard.Coord ->
                         (x, GHC.List.elem @ PegBoard.Coord PegBoard.$fEqCoord x ww)
                     } in
                     letrec {
                       go :: [[PegBoard.Coord]]
                             -> [[PegBoard.Coord]] -> [(PegBoard.Coord, GHC.Types.Bool)]
                         {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                       = \ ds :: [[PegBoard.Coord]] eta :: [[PegBoard.Coord]] ->
                         case ds of wild {
                           [] -> GHC.Types.[] @ (PegBoard.Coord, GHC.Types.Bool)
                           : y ys
                           -> case eta of wild1 {
                                [] -> GHC.Types.[] @ (PegBoard.Coord, GHC.Types.Bool)
                                : y1 ys1
                                -> GHC.Base.++
                                     @ (PegBoard.Coord, GHC.Types.Bool)
                                     (GHC.List.zipWith
                                        @ (PegBoard.Coord, GHC.Types.Bool)
                                        @ PegBoard.Coord
                                        @ (PegBoard.Coord, GHC.Types.Bool)
                                        PegBoardSymmetries.zedSym1
                                        (GHC.List.reverse1
                                           @ (PegBoard.Coord, GHC.Types.Bool)
                                           (GHC.Base.map
                                              @ PegBoard.Coord
                                              @ (PegBoard.Coord, GHC.Types.Bool)
                                              a
                                              y)
                                           (GHC.Types.[] @ (PegBoard.Coord, GHC.Types.Bool)))
                                        y1)
                                     (go ys ys1) } }
                     } in
                     go pRows pRows
                 } in
                 (# PegBoardSymmetries.zedSym_go1 pshs,
                    PegBoardSymmetries.zedSym_go pshs #)) -}
ef0dce85f5879486d359c55abffe9cf7
  zedSym :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: PegBoard.Board ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 case PegBoardSymmetries.$wzedSym ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 PegBoard.Board ww4 ww5 } }) -}
3b7f6913dcf0f0093995c26c73f20db0
  zedSym1 ::
    (PegBoard.Coord, GHC.Types.Bool)
    -> PegBoard.Coord -> (PegBoard.Coord, GHC.Types.Bool)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(A,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: (PegBoard.Coord, GHC.Types.Bool) c :: PegBoard.Coord ->
                 case ds of wild { (,) ds1 p -> (c, p) }) -}
82eab89da67c5bab6765003866abcc80
  zedSym_go :: [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
76a244c996d1cafeb4b887282167845d
  zedSym_go1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

