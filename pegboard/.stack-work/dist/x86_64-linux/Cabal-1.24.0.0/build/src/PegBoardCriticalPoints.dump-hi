
==================== FINAL INTERFACE ====================
2016-09-23 20:38:35.466133 UTC

interface pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:PegBoardCriticalPoints 8001
  interface hash: fc1758e269f9761fa4cdea2481d93fef
  ABI hash: c2ec82b82f5d6019955109f7e071e60f
  export-list hash: 7a43dc8b5c56a03c48b8798a9fabcd09
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  PegBoardCriticalPoints.bottomRow
  PegBoardCriticalPoints.concentricTriangles
  PegBoardCriticalPoints.concentricTrianglesExclusive
  PegBoardCriticalPoints.critPoints
  PegBoardCriticalPoints.rows
  PegBoardCriticalPoints.rows'
  PegBoardCriticalPoints.topLeftRow
  PegBoardCriticalPoints.topRightRow
module dependencies: Helpers.Lists Helpers.Math PegBoard
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  Helpers.Lists 9c52ca015466111e8d572aeb56cfef86
  exports: 975c27250cc63b29bcdfa4d36e613251
  middle 06ecb8accc6c84e43324f104091abf9c
import  -/  Helpers.Math 90663dbd1f1fc19916d7ba5eca912c3f
  exports: 855ca1e90ac297801c0ea414b55a5b9e
  ceilDiv 63bcb7aea1e77dc7cd736f351a44ff96
import  -/  PegBoard 2feff203ebfeacb2de886c6d7cd8d789
  exports: 1bff303d413b992e037c4116e726befe
  Board 516e910104420de674001680720ce4e7
  Board a9cbb8b5c5bd98a5c5fb42e9af0a1445
  Coord 7afa7b4f5e960a0bbb2106405fa42de1
  Coord 9fca726ddf5453893085cf49ee9593de
6c6a0d2cf4b0f153ee7486f0d1ad722a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   PegBoardCriticalPoints.$trModule2
                   PegBoardCriticalPoints.$trModule1) -}
9e656595151abf69cada9cd3e8a2c919
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PegBoardCriticalPoints"#) -}
3dc37773c1dd5ec67cb17a2afe8c4bf5
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2"#) -}
59cff5b6c0a9d48400ee463540ed9b94
  $wbottomRow ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   fail :: GHC.Prim.Void# -> [PegBoard.Coord]
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                     GHC.Base.map
                       @ (PegBoard.Coord, GHC.Types.Bool)
                       @ PegBoard.Coord
                       (Data.Tuple.fst @ PegBoard.Coord @ GHC.Types.Bool)
                       (PegBoardCriticalPoints.bottomRow_go
                          (PegBoardCriticalPoints.$wrows' ww ww1)
                          (GHC.List.lastError @ [(PegBoard.Coord, GHC.Types.Bool)]))
                 } in
                 case ww of wild {
                   []
                   -> case ww1 of wild1 {
                        [] -> GHC.Types.[] @ PegBoard.Coord
                        : ipv ipv1 -> fail GHC.Prim.void# }
                   : ipv ipv1 -> fail GHC.Prim.void# }) -}
40fecb5309d3218921609258eea3e9eb
  $wconcentricTriangles' ::
    [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [PegBoard.Board]
    -> (# PegBoard.Board, [PegBoard.Board] #)
  {- Arity: 3, Strictness: <S,U><L,U><L,U>, Inline: [0] -}
84c349be77747e7d9e39575ce7687819
  $wconcentricTrianglesExclusive ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Board]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 case PegBoardCriticalPoints.$wconcentricTriangles'
                        ww
                        ww1
                        (GHC.Types.[] @ PegBoard.Board) of ww2 { (#,#) ww3 ww4 ->
                 case GHC.List.$wlenAcc @ PegBoard.Board ww4 0# of ww5 { DEFAULT ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww5 1#
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># 0# y) of wild {
                   GHC.Types.False
                   -> let {
                        lvl1 :: PegBoard.Board
                        = case ww4 of wild1 {
                            [] -> GHC.List.badHead @ PegBoard.Board : x ds1 -> x }
                      } in
                      letrec {
                        go3 :: GHC.Prim.Int# -> [PegBoard.Board]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ PegBoard.Board
                            (case x of ds {
                               DEFAULT
                               -> case GHC.List.$w!!
                                         @ PegBoard.Board
                                         ww4
                                         (GHC.Prim.-# ds 1#) of wild1 { PegBoard.Board p1 h1 ->
                                  case GHC.List.$w!!
                                         @ PegBoard.Board
                                         ww4
                                         ds of wild2 { PegBoard.Board p2 h2 ->
                                  PegBoard.Board
                                    (GHC.List.filter
                                       @ PegBoard.Coord
                                       (\ (ds1 :: PegBoard.Coord) ->
                                        case GHC.List.elem
                                               @ PegBoard.Coord
                                               PegBoard.$fEqCoord
                                               ds1
                                               p1 of wild3 {
                                          GHC.Types.False -> GHC.Types.True
                                          GHC.Types.True -> GHC.Types.False })
                                       p2)
                                    (GHC.List.filter
                                       @ PegBoard.Coord
                                       (\ (ds1 :: PegBoard.Coord) ->
                                        case GHC.List.elem
                                               @ PegBoard.Coord
                                               PegBoard.$fEqCoord
                                               ds1
                                               h1 of wild3 {
                                          GHC.Types.False -> GHC.Types.True
                                          GHC.Types.True -> GHC.Types.False })
                                       h2) } }
                               0# -> lvl1 })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x y) of wild1 {
                               GHC.Types.False -> go3 (GHC.Prim.+# x 1#)
                               GHC.Types.True -> GHC.Types.[] @ PegBoard.Board })
                      } in
                      go3 0#
                   GHC.Types.True -> GHC.Types.[] @ PegBoard.Board } } }) -}
f7d49156837669a03bd01be833c5b16f
  $wcritPoints ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 case PegBoardCriticalPoints.$wconcentricTriangles'
                        ww
                        ww1
                        (GHC.Types.[] @ PegBoard.Board) of ww2 { (#,#) ww3 ww4 ->
                 let {
                   tlRows :: [[PegBoard.Coord]]
                   = GHC.Base.map
                       @ PegBoard.Board
                       @ [PegBoard.Coord]
                       PegBoardCriticalPoints.topLeftRow
                       (GHC.List.reverse1
                          @ PegBoard.Board
                          ww4
                          (GHC.Types.[] @ PegBoard.Board))
                 } in
                 PegBoardCriticalPoints.critPoints_go
                   tlRows
                   (GHC.Base.map
                      @ [PegBoard.Coord]
                      @ GHC.Types.Int
                      PegBoardCriticalPoints.critPoints1
                      tlRows) }) -}
5b5c169d39761aa82c56402ad7ace2e7
  $wrows' ::
    [PegBoard.Coord]
    -> [PegBoard.Coord] -> [[(PegBoard.Coord, GHC.Types.Bool)]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 GHC.Base.map
                   @ [PegBoard.Coord]
                   @ [(PegBoard.Coord, GHC.Types.Bool)]
                   (GHC.Base.map
                      @ PegBoard.Coord
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      (\ (x :: PegBoard.Coord) ->
                       (x, GHC.List.elem @ PegBoard.Coord PegBoard.$fEqCoord x ww)))
                   (Data.OldList.groupBy
                      @ PegBoard.Coord
                      PegBoardCriticalPoints.bottomRow1
                      (Data.OldList.sortBy
                         @ PegBoard.Coord
                         PegBoard.$fOrdCoord_$ccompare
                         (GHC.Base.++ @ PegBoard.Coord ww ww1)))) -}
b28e29828ee816bf3ca5a80b25affbf1
  $wtopLeftRow ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 case ww of wild {
                   []
                   -> case ww1 of wild1 {
                        [] -> GHC.Types.[] @ PegBoard.Coord
                        : ipv ipv1
                        -> GHC.Base.map
                             @ [(PegBoard.Coord, GHC.Types.Bool)]
                             @ PegBoard.Coord
                             PegBoardCriticalPoints.topLeftRow1
                             (PegBoardCriticalPoints.$wrows'
                                (GHC.Types.[] @ PegBoard.Coord)
                                wild1) }
                   : ipv ipv1
                   -> GHC.Base.map
                        @ [(PegBoard.Coord, GHC.Types.Bool)]
                        @ PegBoard.Coord
                        PegBoardCriticalPoints.topLeftRow1
                        (PegBoardCriticalPoints.$wrows' wild ww1) }) -}
80c5f5adb65dae14ebdf03cd048126ce
  $wtopRightRow ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 case ww of wild {
                   []
                   -> case ww1 of wild1 {
                        [] -> GHC.Types.[] @ PegBoard.Coord
                        : ipv ipv1
                        -> GHC.List.reverse1
                             @ PegBoard.Coord
                             (GHC.Base.map
                                @ [(PegBoard.Coord, GHC.Types.Bool)]
                                @ PegBoard.Coord
                                PegBoardCriticalPoints.topRightRow1
                                (PegBoardCriticalPoints.$wrows'
                                   (GHC.Types.[] @ PegBoard.Coord)
                                   wild1))
                             (GHC.Types.[] @ PegBoard.Coord) }
                   : ipv ipv1
                   -> GHC.List.reverse1
                        @ PegBoard.Coord
                        (GHC.Base.map
                           @ [(PegBoard.Coord, GHC.Types.Bool)]
                           @ PegBoard.Coord
                           PegBoardCriticalPoints.topRightRow1
                           (PegBoardCriticalPoints.$wrows' wild ww1))
                        (GHC.Types.[] @ PegBoard.Coord) }) -}
4b80a475369b9ad20e3f9e21fae847bf
  bottomRow :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 PegBoardCriticalPoints.$wbottomRow ww1 ww2 }) -}
ce9707e1a1c4f7171490f95270222169
  bottomRow1 :: PegBoard.Coord -> PegBoard.Coord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),A)><S(S(S)L),1*U(1*U(U),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: PegBoard.Coord) (ds1 :: PegBoard.Coord) ->
                 case ds of wild { PegBoard.Coord a ds2 ->
                 case ds1 of wild1 { PegBoard.Coord b ds3 ->
                 GHC.Classes.eqInt a b } }) -}
a23d874917a56257128db8893706877d
  bottomRow_go ::
    [[(PegBoard.Coord, GHC.Types.Bool)]]
    -> [(PegBoard.Coord, GHC.Types.Bool)]
    -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
3b8c7e0fd0d2a88c7abdbf2b97fa03ec
  concentricTriangles :: PegBoard.Board -> [PegBoard.Board]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (b :: PegBoard.Board) ->
                 case PegBoardCriticalPoints.concentricTriangles'
                        (b, GHC.Types.[] @ PegBoard.Board) of wild { (,) ds1 y ->
                 y }) -}
c28390a750b0f2df9155ade2ef4380e9
  concentricTriangles' ::
    (PegBoard.Board, [PegBoard.Board])
    -> (PegBoard.Board, [PegBoard.Board])
  {- Arity: 1, Strictness: <S(S(SL)L),1*U(1*U(U,U),U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (PegBoard.Board, [PegBoard.Board])) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { PegBoard.Board ww4 ww5 ->
                 case PegBoardCriticalPoints.$wconcentricTriangles'
                        ww4
                        ww5
                        ww2 of ww6 { (#,#) ww7 ww8 ->
                 (ww7, ww8) } } }) -}
8c0c436ef6fac5fc6fcb867761b1cd81
  concentricTrianglesExclusive :: PegBoard.Board -> [PegBoard.Board]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 PegBoardCriticalPoints.$wconcentricTrianglesExclusive ww1 ww2 }) -}
bc2569568ec640df20cf5cdf748bfcad
  critPoints :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 PegBoardCriticalPoints.$wcritPoints ww1 ww2 }) -}
94d5ca787919d70d3514a9459c52866c
  critPoints1 :: [PegBoard.Coord] -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [PegBoard.Coord]) ->
                 Helpers.Math.ceilDiv
                   @ GHC.Types.Int
                   GHC.Real.$fIntegralInt
                   (case GHC.List.$wlenAcc @ PegBoard.Coord x 0# of ww2 { DEFAULT ->
                    GHC.Types.I# ww2 })
                   PegBoardCriticalPoints.critPoints2) -}
da52ea780eafcc04d927ca18f14664a5
  critPoints2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
714c16c65339d64a532b6e161fab7b11
  critPoints_go ::
    [[PegBoard.Coord]] -> [GHC.Types.Int] -> [PegBoard.Coord]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
dbb3b14ce81301ff640fe0c856cf8b01
  rows :: [PegBoard.Coord] -> [[PegBoard.Coord]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (cs :: [PegBoard.Coord]) ->
                 Data.OldList.groupBy
                   @ PegBoard.Coord
                   PegBoardCriticalPoints.bottomRow1
                   (Data.OldList.sortBy
                      @ PegBoard.Coord
                      PegBoard.$fOrdCoord_$ccompare
                      cs)) -}
f1f75ad2ae5df3af97fd3e737488e5a5
  rows' :: PegBoard.Board -> [[(PegBoard.Coord, GHC.Types.Bool)]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 PegBoardCriticalPoints.$wrows' ww1 ww2 }) -}
9e54b4d7d9e449e26f807631012bc19f
  topLeftRow :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 PegBoardCriticalPoints.$wtopLeftRow ww1 ww2 }) -}
c30b79f369ca18a23308ad0f470d44be
  topLeftRow1 :: [(PegBoard.Coord, GHC.Types.Bool)] -> PegBoard.Coord
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 case x of wild {
                   [] -> case GHC.List.badHead ret_ty PegBoard.Coord of {}
                   : x1 ds1 -> case x1 of wild1 { (,) x2 ds2 -> x2 } }) -}
3d9d55258ff24b06f8aca13ad828b6a1
  topRightRow :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 PegBoardCriticalPoints.$wtopRightRow ww1 ww2 }) -}
0082bd965ebdfe47666a1495f5adef5f
  topRightRow1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> PegBoard.Coord
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 case PegBoardCriticalPoints.topRightRow_go
                        x
                        (GHC.List.lastError
                           @ (PegBoard.Coord, GHC.Types.Bool)) of wild { (,) x1 ds1 ->
                 x1 }) -}
fb24ce8424f397e714af2c80528af13f
  topRightRow_go ::
    [(PegBoard.Coord, GHC.Types.Bool)]
    -> (PegBoard.Coord, GHC.Types.Bool)
    -> (PegBoard.Coord, GHC.Types.Bool)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U)> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

