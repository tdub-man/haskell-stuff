
==================== FINAL INTERFACE ====================
2016-11-25 20:26:00.551811 UTC

interface pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Solve 8001
  interface hash: 4a49469d2cb837debcd69396ee866b86
  ABI hash: 80602599002a6624b6b918d337185840
  export-list hash: 37f488ad4b3919da239b5a72a04fc9d7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Solve.promptSolve
module dependencies: Analytics CriticalPoints Graphics
                     Helpers.Lists Helpers.Math PegBoard PegBoardMove PlayGame
                     Symmetries
package dependencies: GLURaw-2.0.0.2@GLURaw-2.0.0.2-FbcPHzTa7vLEnCQ0kkJ8B4
                      GLUT-2.7.0.10@GLUT-2.7.0.10-A3NqGto8XAVI0ysflkZZW9
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-HHHIolNI8Pm5H3OGkgSUrO
                      OpenGL-3.0.1.0@OpenGL-3.0.1.0-2SQfSEFR02AIolFfoam9tJ
                      OpenGLRaw-3.2.2.0@OpenGLRaw-3.2.2.0-KWU3ruQNCGR7AsVafRovL
                      StateVar-1.1.0.4@StateVar-1.1.0.4-CJpWsiXJdd89SnV9dZtTwc
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bmp-1.2.6.3@bmp-1.2.6.3-KF4xHl5RTVIp6NQI8dI2I
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fixed-0.2.1.1@fixed-0.2.1.1-21JkkJmr6h52cZo1o8cauA ghc-prim-0.5.0.0
                      gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB
                      gloss-rendering-1.10.3.3@gloss-rendering-1.10.3.3-5PiCamqHfbt8xiRs4ymvLr
                      half-0.2.2.3@half-0.2.2.3-BFHx0LiJemg6baNXrjGThF
                      integer-gmp-1.0.0.1 stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         gloss-rendering-1.10.3.3@gloss-rendering-1.10.3.3-5PiCamqHfbt8xiRs4ymvLr:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:GHC.Unicode 2343b0871604cc5116abba8f24d75b42
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB:Graphics.Gloss d5b982018b0c758f00994fce74453c04
import  -/  gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB:Graphics.Gloss.Data.Color b525c333674d23cc8320332d7db6f0cc
import  -/  gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB:Graphics.Gloss.Data.Display 23041d1e33431329e29c0f20d2656204
import  -/  gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB:Graphics.Gloss.Data.Picture e95e53d5f841f673cdd330becc7218b6
import  -/  gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB:Graphics.Gloss.Interface.Pure.Game 2dd340a64cf43818f7fb9d5ecccf65d2
import  -/  gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB:Graphics.Gloss.Internals.Interface.Backend.Types 6dedaa7d5ac2b54ee5c9eafd16b95468
import  -/  gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB:Graphics.Gloss.Internals.Interface.Event 72f0eabd47b5e04e08135dc87ef0ee7a
import  -/  gloss-rendering-1.10.3.3@gloss-rendering-1.10.3.3-5PiCamqHfbt8xiRs4ymvLr:Graphics.Gloss.Internals.Data.Picture 1b8e2c645c53408a68ac59ac66e45f2b
import  -/  Analytics f838ffe95c81d62560a8c6b5498ee6f3
  exports: f7e9d11b8ff150a18249c1b08395b5a8
  endWith 4bd0c3b8f21ef251c9d11570450595ee
import  -/  Graphics 0bde4143f519ae9bcb6cc3f2ae806160
  exports: 3c1308225ea2e14f0de2a6b7d3a6490d
  offset fb1733ba8a7693fe6d9f7d70ecaeca8c
  renderBoard 8ed355beea3e14b7e862959664c6aa97
import  -/  PegBoard 700fa327013234a57c766ef736b97bb2
  exports: d9e5ef2267766e7ae3b457c51282f54d
  Board dd84e3e13f591df253c023fdeb6d0fac
  Board 88c3b97cf1f38c14492f474b5ab8ce85
  Coord da8073910dff9584368414866999997b
  Coord e848d92561720a4b1c6dee3cfa88409d
  makeBoard bc525de14674e773a0394f15339e38fe
  removePeg ea1cb54766fa6f4c220bfea2979e5c89
import  -/  PlayGame 33dcc890daf23cb58c28e0429f285f74
  exports: db98f7a3543cf5dfbe75863e31383cd6
  collectLog d50cb14233bc66d28cd8bfc3ee05c610
  playGameLog 57bb2db0471df9649c8412185aa8700d
7f179bd489e524796be7df22d8a71a6e
  $fEqInputs :: GHC.Classes.Eq Solve.Inputs
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Solve.Inputs Solve.$fEqInputs_$c== Solve.$fEqInputs_$c/= -}
7f179bd489e524796be7df22d8a71a6e
  $fEqInputs_$c/= :: Solve.Inputs -> Solve.Inputs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Solve.Inputs) (b :: Solve.Inputs) ->
                 case Solve.$fEqInputs_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
7f179bd489e524796be7df22d8a71a6e
  $fEqInputs_$c== :: Solve.Inputs -> Solve.Inputs -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Solve.Inputs) (ds1 :: Solve.Inputs) ->
                 case ds of wild {
                   Solve.InputCount a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Solve.InputCount b1 b2
                        -> case a1 of wild2 { GHC.Types.I# x5 ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x5 y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.$fEq[]_$s$c== a2 b2 } } } }
                   Solve.InputCoord a1 a2 a3
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Solve.InputCoord b1 b2 b3
                        -> case a1 of ww { PegBoard.Coord ww1 ww2 ->
                           case ww1 of ww3 { GHC.Types.I# ww4 ->
                           case b1 of ww5 { PegBoard.Coord ww6 ww7 ->
                           case ww6 of ww8 { GHC.Types.I# ww9 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww4 ww9) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww2 of wild3 { GHC.Types.I# x5 ->
                                case ww7 of wild4 { GHC.Types.I# y ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x5 y) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case a2 of wild6 {
                                       GHC.Base.Nothing
                                       -> case b2 of wild7 {
                                            GHC.Base.Nothing -> GHC.Classes.$fEq[]_$s$c== a3 b3
                                            GHC.Base.Just ipv -> GHC.Types.False }
                                       GHC.Base.Just a4
                                       -> case b2 of wild7 {
                                            GHC.Base.Nothing -> GHC.Types.False
                                            GHC.Base.Just b4
                                            -> case a4 of wild8 { GHC.Types.I# x6 ->
                                               case b4 of wild9 { GHC.Types.I# y1 ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.==# x6 y1) of wild10 {
                                                 GHC.Types.False -> GHC.Types.False
                                                 GHC.Types.True
                                                 -> GHC.Classes.$fEq[]_$s$c==
                                                      a3
                                                      b3 } } } } } } } } } } } } } }
                   Solve.InputSolve
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Solve.InputSolve -> GHC.Types.True }
                   Solve.InputSteps
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Solve.InputSteps -> GHC.Types.True }
                   Solve.None
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Solve.None -> GHC.Types.True } }) -}
ac02ef4a3ac55a14c11ce35db172d3c9
  $fEqPSequence :: GHC.Classes.Eq Solve.PSequence
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Solve.PSequence
                  Solve.$fEqPSequence_$c==
                  Solve.$fEqPSequence_$c/= -}
ac02ef4a3ac55a14c11ce35db172d3c9
  $fEqPSequence_$c/= ::
    Solve.PSequence -> Solve.PSequence -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Solve.PSequence) (b :: Solve.PSequence) ->
                 case Solve.$fEqPSequence_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ac02ef4a3ac55a14c11ce35db172d3c9
  $fEqPSequence_$c== ::
    Solve.PSequence -> Solve.PSequence -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Solve.PSequence) (ds1 :: Solve.PSequence) ->
                 case ds of wild {
                   Solve.PSeq a1
                   -> case ds1 of wild1 {
                        Solve.PSeq b1
                        -> Graphics.Gloss.Internals.Data.Picture.$fEqPicture_$c== a1 b1
                        Solve.PSeqs ipv ipv1 -> GHC.Types.False }
                   Solve.PSeqs a1 a2
                   -> case ds1 of wild1 {
                        Solve.PSeq ipv -> GHC.Types.False
                        Solve.PSeqs b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ Graphics.Gloss.Internals.Data.Picture.Picture
                                  Graphics.Gloss.Internals.Data.Picture.$fEqPicture
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.$fEq[]_$c==
                                  @ Graphics.Gloss.Internals.Data.Picture.Picture
                                  Graphics.Gloss.Internals.Data.Picture.$fEqPicture
                                  a2
                                  b2 } } }) -}
463c4116cbdcf5034dc16b556c5a6a39
  $tc'InputCoord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13608699889093881616##
                   14022107699697828055##
                   Solve.$trModule
                   Solve.$tc'InputCoord1) -}
e769e41b50a82cf11ea8b07338e595e0
  $tc'InputCoord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'InputCoord"#) -}
9047130b2309778fec297f347fc71af1
  $tc'InputCount :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6482927090694631896##
                   13219908823712453794##
                   Solve.$trModule
                   Solve.$tc'InputCount1) -}
7d491b23e2af108e0542a101bb55d40f
  $tc'InputCount1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'InputCount"#) -}
e0e7c51d45d43ffb3943f3f6c73f0b15
  $tc'InputSolve :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2208985448489538222##
                   4284280786237368022##
                   Solve.$trModule
                   Solve.$tc'InputSolve1) -}
39aecd2bea4bce3d024967524b20a6ec
  $tc'InputSolve1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'InputSolve"#) -}
1720dc3039cd369c5ca29cc9f564dbb7
  $tc'InputSteps :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18446280421618189680##
                   2031836096807702558##
                   Solve.$trModule
                   Solve.$tc'InputSteps1) -}
d65bf89907790d245f1dd30b49893013
  $tc'InputSteps1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'InputSteps"#) -}
8d54d81e4f4e81cd9ff7541a0b100ce6
  $tc'None :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1402911399403184884##
                   9635525819902261578##
                   Solve.$trModule
                   Solve.$tc'None1) -}
7e699f3e9d734cbe422362ebb843ee34
  $tc'None1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'None"#) -}
96c01c02b9bc8f997ba383a210301bcf
  $tc'PSeq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9088586458434414275##
                   5997256383751861024##
                   Solve.$trModule
                   Solve.$tc'PSeq1) -}
875d604fb8d920330250ce73874c9d65
  $tc'PSeq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PSeq"#) -}
bcef26b79d2c6b3cc91a428e842c6170
  $tc'PSeqs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14898890735432103176##
                   6610427963993859011##
                   Solve.$trModule
                   Solve.$tc'PSeqs1) -}
05150401453293d532eff7810f9e82f6
  $tc'PSeqs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PSeqs"#) -}
292644c2b0cfe896e6b3ab5d71587828
  $tc'Prompt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13337985966064934970##
                   5623474525244824726##
                   Solve.$trModule
                   Solve.$tc'Prompt1) -}
7e43aa44bdc9eb9e334a3b545bfdb87c
  $tc'Prompt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Prompt"#) -}
c85865a98ff728b84f93de4ba3cd16d3
  $tc'PromptZip :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1497368022743324108##
                   4402937896732163910##
                   Solve.$trModule
                   Solve.$tc'PromptZip1) -}
0ae5407719fad2a2297069ce702135df
  $tc'PromptZip1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PromptZip"#) -}
44f4139aeadc99ec7178b5636c90b8c5
  $tcInputs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17497793890577893503##
                   14271802020907830288##
                   Solve.$trModule
                   Solve.$tcInputs1) -}
e60995dbb4943e65d697b702992c80c4
  $tcInputs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Inputs"#) -}
78fdcd1f980e5c0ce832d61f0eff5cba
  $tcPSequence :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3897156069352054819##
                   11861045284077971628##
                   Solve.$trModule
                   Solve.$tcPSequence1) -}
8cd5b5a819065460b30574ab9efd4546
  $tcPSequence1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PSequence"#) -}
3fbdeb51298c619d26b542be39b3b314
  $tcPrompt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14455450666321732123##
                   15500356662196496712##
                   Solve.$trModule
                   Solve.$tcPrompt1) -}
a92475c5d6d8a8c6de4ccc5bfc7db1e4
  $tcPrompt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Prompt"#) -}
04109219b1cb8abffddcbfda8513f169
  $tcPromptZip :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7077703030991376033##
                   7451382955659025963##
                   Solve.$trModule
                   Solve.$tcPromptZip1) -}
67bbae3125cca3f04b7aa87c3f7103a5
  $tcPromptZip1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PromptZip"#) -}
ccdc0654fa27a18daaf9604a3871d916
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Solve.$trModule2 Solve.$trModule1) -}
a8fb7c5b426d4d381899bce7bc3b9e69
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Solve"#) -}
2d97266ee88020a909bdd4a041ad7883
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2"#) -}
42de31b8c25025bea6ce6073cba5b1a7
  $wgo ::
    [GHC.Types.Int]
    -> [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,U>,
     Inline: [0] -}
1f47c81efe610ca8197d5784ffb0f60f
  $wxs ::
    GHC.Prim.Int# -> [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
589255b4ffc277a96c09158a4e45531f
  type Digits = [GHC.Types.Int]
7f179bd489e524796be7df22d8a71a6e
  data Inputs
    = InputCount {count :: GHC.Types.Int, digits :: Solve.Digits}
    | InputCoord {coord :: PegBoard.Coord,
                  xCoord :: GHC.Base.Maybe GHC.Types.Int,
                  digits :: Solve.Digits}
    | InputSolve
    | InputSteps
    | None
fcf146e5f3506c1dae1db0a963fa118b
  type MouseMove = (GHC.Types.Bool, GHC.Types.Float, GHC.Types.Float)
ac02ef4a3ac55a14c11ce35db172d3c9
  data PSequence
    = PSeq Graphics.Gloss.Internals.Data.Picture.Picture
    | PSeqs [Graphics.Gloss.Internals.Data.Picture.Picture]
            [Graphics.Gloss.Internals.Data.Picture.Picture]
0cca73eb1379a7a47e54026f4ac6a99c
  data Prompt
    = Prompt {input :: Solve.Inputs,
              handle :: Solve.Prompt
                        -> Graphics.Gloss.Internals.Interface.Event.Event -> Solve.Prompt,
              process :: Solve.Inputs -> Solve.Inputs,
              seqDisp :: Solve.PSequence,
              check :: Solve.Inputs -> GHC.Types.Bool,
              completed :: GHC.Types.Bool}
    RecFlag: Recursive
55c8585f3d16eb2785395e7f60be0368
  data PromptZip
    = PromptZip {current :: Solve.Prompt,
                 next :: [Solve.Prompt],
                 prev :: [Solve.Prompt],
                 worldT :: Solve.WorldTrans}
36b9180868c858b56dbb6a8c11f7f4b7
  type Scale = GHC.Types.Float
8bfc9dc2b808a9a8c7b024227f728e8a
  type Translate = (GHC.Types.Float, GHC.Types.Float)
75fcf3f4c67df13dfd10b749bf0e20bc
  type WorldTrans = (Solve.Scale, Solve.Translate, Solve.MouseMove)
85a9afdc2e108e9e8b22696a6496ba70
  check :: Solve.Prompt -> Solve.Inputs -> GHC.Types.Bool
  RecSel Left Solve.Prompt
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.Prompt) ->
                 case ds of wild { Solve.Prompt ds1 ds2 ds3 ds4 ds5 ds6 -> ds5 }) -}
55f76fe43852ffc2e0859f02017bc983
  completed :: Solve.Prompt -> GHC.Types.Bool
  RecSel Left Solve.Prompt
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.Prompt) ->
                 case ds of wild { Solve.Prompt ds1 ds2 ds3 ds4 ds5 ds6 -> ds6 }) -}
a120337c65ea840a10895292e483dcdd
  coord :: Solve.Inputs -> PegBoard.Coord
  RecSel Left Solve.Inputs
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.Inputs) ->
                 case ds of wild {
                   DEFAULT -> Solve.coord1 Solve.InputCoord ds1 ds2 ds3 -> ds1 }) -}
7916133085869ed39ca39c4643ab194f
  coord1 :: PegBoard.Coord
  {- Strictness: x -}
abf8b48f5a5f922eec00bd4fd431ed3b
  count :: Solve.Inputs -> GHC.Types.Int
  RecSel Left Solve.Inputs
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.Inputs) ->
                 case ds of wild {
                   DEFAULT -> Solve.count1 Solve.InputCount ds1 ds2 -> ds1 }) -}
c2b63ee9222ecefab9ae2bcec97d91a3
  count1 :: GHC.Types.Int
  {- Strictness: x -}
e84e7cd3366c33a33c40bed85d536686
  countPrompt :: Solve.Prompt
  {- Strictness: m,
     Unfolding: (Solve.Prompt
                   Solve.defaultInputCount
                   Solve.promptSolve_handler
                   Solve.promptSolve_proc
                   Solve.promptSolve_disp
                   Solve.promptSolve_chck
                   GHC.Types.False) -}
c23608664543b6dd5817c10447bf29bc
  current :: Solve.PromptZip -> Solve.Prompt
  RecSel Left Solve.PromptZip
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U,U,U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.PromptZip) ->
                 case ds of wild { Solve.PromptZip ds1 ds2 ds3 ds4 -> ds1 }) -}
1bf81cb77bd6eb3f78975f1c2561138b
  defaultInputCoord :: Solve.Inputs
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Solve.InputCoord
                   Solve.promptSolve92
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Types.[] @ GHC.Types.Int)) -}
6a9a8c1980656b202fbc5741232aad4d
  defaultInputCount :: Solve.Inputs
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Solve.InputCount
                   Solve.promptSolve93
                   (GHC.Types.[] @ GHC.Types.Int)) -}
907cabd82751d34af663e634d6b22e52
  digits :: Solve.Inputs -> Solve.Digits
  RecSel Left Solve.Inputs
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.Inputs) ->
                 case ds of wild {
                   DEFAULT -> Solve.digits1
                   Solve.InputCount ds1 ds2 -> ds2
                   Solve.InputCoord ds1 ds2 ds3 -> ds3 }) -}
7264ff34edc986fc1c5bbcac55cdac36
  digits1 :: Solve.Digits
  {- Strictness: x -}
681101275c83197062293bf03476de22
  handle ::
    Solve.Prompt
    -> Solve.Prompt
    -> Graphics.Gloss.Internals.Interface.Event.Event
    -> Solve.Prompt
  RecSel Left Solve.Prompt
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.Prompt) ->
                 case ds of wild { Solve.Prompt ds1 ds2 ds3 ds4 ds5 ds6 -> ds2 }) -}
463c32c9944c67ad30dbec7973e51fb4
  input :: Solve.Prompt -> Solve.Inputs
  RecSel Left Solve.Prompt
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.Prompt) ->
                 case ds of wild { Solve.Prompt ds1 ds2 ds3 ds4 ds5 ds6 -> ds1 }) -}
1c1f0db77f77c8f1afcf08d238515603
  makeInt :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Types.Int]) ->
                 case w of wild {
                   [] -> GHC.Types.I# 0#
                   : ipv ipv1
                   -> case Solve.$wgo Solve.promptSolve87 wild 0# of ww { DEFAULT ->
                      GHC.Types.I# ww } }) -}
1b4444aca2f40096c3d7acf4b8568679
  next :: Solve.PromptZip -> [Solve.Prompt]
  RecSel Left Solve.PromptZip
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.PromptZip) ->
                 case ds of wild { Solve.PromptZip ds1 ds2 ds3 ds4 -> ds2 }) -}
cf4e2ebaac7d4d58d6bc8f59fb6de235
  prev :: Solve.PromptZip -> [Solve.Prompt]
  RecSel Left Solve.PromptZip
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.PromptZip) ->
                 case ds of wild { Solve.PromptZip ds1 ds2 ds3 ds4 -> ds3 }) -}
6fa4ec2bd54494ce0f5be67c15db85ad
  process :: Solve.Prompt -> Solve.Inputs -> Solve.Inputs
  RecSel Left Solve.Prompt
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.Prompt) ->
                 case ds of wild { Solve.Prompt ds1 ds2 ds3 ds4 ds5 ds6 -> ds3 }) -}
f6d462946fd2794af6c9f896ef9a8a4e
  promptSolve :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Solve.promptSolve1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
0888d1d170921d561eb3b21ca0ceee0a
  promptSolve1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case Graphics.Gloss.Internals.Interface.Game.playWithBackendIO1
                        @ Solve.PromptZip
                        @ Graphics.Gloss.Internals.Interface.Backend.GLUT.GLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState_$cinitBackendState
                        Solve.promptSolve101
                        Graphics.Gloss.Data.Color.black
                        Solve.promptSolve93
                        Solve.promptSolve5
                        Solve.promptSolve4
                          `cast`
                        (<Solve.PromptZip>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Graphics.Gloss.Internals.Data.Picture.Picture>_R))
                        Solve.promptSolve3
                          `cast`
                        (<Graphics.Gloss.Internals.Interface.Event.Event>_R
                         ->_R <Solve.PromptZip>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Solve.PromptZip>_R))
                        Solve.promptSolve2
                          `cast`
                        (<GHC.Types.Float>_R
                         ->_R <Solve.PromptZip>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Solve.PromptZip>_R))
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
ecf00f1a574e3d7eb1eb9cf2c83561d5
  promptSolve10 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# 1.0#) -}
7845af7819d92cb853d3146451b673e0
  promptSolve100 :: Solve.Inputs
  {- Strictness: x -}
400ace746bb0ed11dccf7576a21c2a34
  promptSolve101 :: Graphics.Gloss.Data.Display.Display
  {- Unfolding: (Graphics.Gloss.Data.Display.InWindow
                   Solve.promptSolve105
                   Solve.promptSolve103
                   Solve.promptSolve102) -}
5fdc3402faa8c3a53e56abf532757a76
  promptSolve102 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((Solve.promptSolve93, Solve.promptSolve93)) -}
2d70806f3790bca0d555961f913bcb32
  promptSolve103 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((Solve.promptSolve104, Solve.promptSolve104)) -}
3370590618a159ee601b7f201a7d829c
  promptSolve104 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 600#) -}
8cadf8a6a4ca8c32672f5f5432e7da5c
  promptSolve105 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SolvePrompted"#) -}
3d81b2c577a7fed748eaf4bb44e3057c
  promptSolve11 :: [Solve.Prompt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Solve.Prompt
                   Solve.promptSolve35
                   Solve.promptSolve12) -}
698ca73fbb75d94495e039947a1da249
  promptSolve12 :: [Solve.Prompt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Solve.Prompt
                   Solve.promptSolve27
                   Solve.promptSolve13) -}
86bdbe5dfdf727b0ba0b9bd5f2d03222
  promptSolve13 :: [Solve.Prompt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Solve.Prompt
                   Solve.promptSolve24
                   Solve.promptSolve14) -}
0b7c15e55f1a02b8ee10cacc3715920f
  promptSolve14 :: [Solve.Prompt]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Solve.Prompt
                   Solve.promptSolve15
                   (GHC.Types.[] @ Solve.Prompt)) -}
280dd10132a4554c9d1fe8fb615f2c92
  promptSolve15 :: Solve.Prompt
  {- Strictness: m,
     Unfolding: (Solve.Prompt
                   Solve.None
                   Solve.promptSolve23
                   (GHC.Base.id @ Solve.Inputs)
                   Solve.promptSolve17
                   Solve.promptSolve16
                   GHC.Types.False) -}
061428c3aee646ab9fdc9f76fde569a8
  promptSolve16 :: Solve.Inputs -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Solve.Inputs) -> GHC.Types.False) -}
db6e4d3d1b26b2765b3851fb44d5735d
  promptSolve17 :: Solve.PSequence
  {- Strictness: m1, Unfolding: (Solve.PSeq Solve.promptSolve18) -}
3e8966bdd858e33b1feb81dd88e55c91
  promptSolve18 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m10,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.white
                   Solve.promptSolve19) -}
58413bd461f52ace43a714046ff75191
  promptSolve19 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m13,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Scale
                   Solve.promptSolve22
                   Solve.promptSolve22
                   Solve.promptSolve20) -}
956a92013bc2f59cdc015318ac72571b
  promptSolve2 ::
    GHC.Types.Float
    -> Solve.PromptZip
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Solve.PromptZip #)
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (time :: GHC.Types.Float)
                   (world1 :: Solve.PromptZip)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, world1 #)) -}
a5f0baa7da498c1969110c090b4cb265
  promptSolve20 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m8,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Text
                   Solve.promptSolve21) -}
0f23d7321e1947d5c72028c341acd478
  promptSolve21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Failed to find solution"#) -}
7f2b10deb6a293541c66b2a5a33aef73
  promptSolve22 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.1#) -}
73e0ea613e424961e4c9809c0ac6dec6
  promptSolve23 ::
    Solve.Prompt
    -> Graphics.Gloss.Internals.Interface.Event.Event -> Solve.Prompt
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U,U)><L,A>m,
     Unfolding: InlineRule (2, True, True)
                (\ (pt :: Solve.Prompt)
                   (ds :: Graphics.Gloss.Internals.Interface.Event.Event) ->
                 pt) -}
33854a3d5d4bd7ed4c2e6dd5afb0abb7
  promptSolve24 :: Solve.Prompt
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Solve.Prompt
                   Solve.InputSteps
                   Solve.promptSolve26
                   (GHC.Base.id @ Solve.Inputs)
                   Solve.promptSolve25
                   Solve.promptSolve16
                   GHC.Types.False) -}
7943c8538133a94bf31ae9c92909f60a
  promptSolve25 :: Solve.PSequence
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Solve.PSeqs
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)) -}
4eaef08ce853d7c29ae6a834b2ffb132
  promptSolve26 ::
    Solve.Prompt
    -> Graphics.Gloss.Internals.Interface.Event.Event -> Solve.Prompt
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U,U,U,U)><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Solve.Prompt)
                   (w1 :: Graphics.Gloss.Internals.Interface.Event.Event) ->
                 case w of ww { Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of wild {
                   DEFAULT -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6
                   Graphics.Gloss.Internals.Interface.Event.EventKey ds ds1 ds2 ds3
                   -> case ds of wild1 {
                        DEFAULT -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6
                        Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey ds4
                        -> case ds4 of wild2 {
                             DEFAULT -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6
                             Graphics.Gloss.Internals.Interface.Backend.Types.KeyLeft
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> Solve.Prompt
                                       ww1
                                       ww2
                                       ww3
                                       (case ww4 of wild4 {
                                          Solve.PSeq p -> Solve.PSeq p
                                          Solve.PSeqs as ds5
                                          -> case ds5 of wild5 {
                                               []
                                               -> Solve.PSeqs
                                                    as
                                                    (GHC.Types.[]
                                                       @ Graphics.Gloss.Internals.Data.Picture.Picture)
                                               : b bs
                                               -> Solve.PSeqs
                                                    (GHC.Types.:
                                                       @ Graphics.Gloss.Internals.Data.Picture.Picture
                                                       b
                                                       as)
                                                    bs } })
                                       ww5
                                       ww6
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6 }
                             Graphics.Gloss.Internals.Interface.Backend.Types.KeyRight
                             -> case ds1 of wild3 {
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                  -> Solve.Prompt
                                       ww1
                                       ww2
                                       ww3
                                       (case ww4 of wild4 {
                                          Solve.PSeq p -> Solve.PSeq p
                                          Solve.PSeqs ds5 bs
                                          -> case ds5 of wild5 {
                                               []
                                               -> Solve.PSeqs
                                                    (GHC.Types.[]
                                                       @ Graphics.Gloss.Internals.Data.Picture.Picture)
                                                    bs
                                               : a ds6
                                               -> case ds6 of wild6 {
                                                    []
                                                    -> Solve.PSeqs
                                                         (GHC.Types.:
                                                            @ Graphics.Gloss.Internals.Data.Picture.Picture
                                                            a
                                                            (GHC.Types.[]
                                                               @ Graphics.Gloss.Internals.Data.Picture.Picture))
                                                         bs
                                                    : ipv ipv1
                                                    -> Solve.PSeqs
                                                         wild6
                                                         (GHC.Types.:
                                                            @ Graphics.Gloss.Internals.Data.Picture.Picture
                                                            a
                                                            bs) } } })
                                       ww5
                                       ww6
                                  Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                  -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6 } } } } }) -}
db405b283a9741e0da2666e41dd55955
  promptSolve27 :: Solve.Prompt
  {- Strictness: m,
     Unfolding: (Solve.Prompt
                   Solve.InputSolve
                   Solve.promptSolve34
                   (GHC.Base.id @ Solve.Inputs)
                   Solve.promptSolve29
                   Solve.promptSolve28
                   GHC.Types.False) -}
3fc50f1da6ee44b7d1c6afa7793029ed
  promptSolve28 :: Solve.Inputs -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Solve.Inputs) -> GHC.Types.True) -}
d92c0f83ecdf50fe9b1382d669903697
  promptSolve29 :: Solve.PSequence
  {- Strictness: m1, Unfolding: (Solve.PSeq Solve.promptSolve30) -}
6b52919a4ea010e05c048dbe0e9fd607
  promptSolve3 ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Solve.PromptZip
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Solve.PromptZip #)
  {- Arity: 3 -}
02070c0066b321baef21762696b043c9
  promptSolve30 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m10,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.white
                   Solve.promptSolve31) -}
9a26efac5c3637d6e51a176d07b72d3c
  promptSolve31 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m13,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Scale
                   Solve.promptSolve22
                   Solve.promptSolve22
                   Solve.promptSolve32) -}
c6881e799490f8eb475d24b607836475
  promptSolve32 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m8,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Text
                   Solve.promptSolve33) -}
8859c8eacd8c101b6ecbbb377af32f90
  promptSolve33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Press ENTER to solve"#) -}
15b5ef2453426853498a56899ca6b98b
  promptSolve34 ::
    Solve.Prompt
    -> Graphics.Gloss.Internals.Interface.Event.Event -> Solve.Prompt
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U,U,U,U)><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Solve.Prompt)
                   (w1 :: Graphics.Gloss.Internals.Interface.Event.Event) ->
                 case w of ww { Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of wild {
                   DEFAULT -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6
                   Graphics.Gloss.Internals.Interface.Event.EventKey ds ds1 ds2 ds3
                   -> case ds of wild1 {
                        DEFAULT -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6
                        Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey enter
                        -> case ds1 of wild2 {
                             Graphics.Gloss.Internals.Interface.Backend.Types.Down
                             -> case GHC.Prim.dataToTag#
                                       @ Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey
                                       enter of wild3 {
                                  DEFAULT
                                  -> case GHC.Prim.dataToTag#
                                            @ Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey
                                            enter of wild4 {
                                       DEFAULT -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6
                                       65# -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 GHC.Types.True }
                                  33# -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 GHC.Types.True }
                             Graphics.Gloss.Internals.Interface.Backend.Types.Up
                             -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6 } } } }) -}
9a47be16e8f40427a2b2fe1ef5a4a871
  promptSolve35 :: Solve.Prompt
  {- Strictness: m,
     Unfolding: (Solve.Prompt
                   Solve.defaultInputCoord
                   Solve.promptSolve91
                   Solve.promptSolve86
                   Solve.promptSolve40
                   Solve.promptSolve36
                   GHC.Types.False) -}
440f56c200fdb163275bfb37ef132939
  promptSolve36 :: Solve.Inputs -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Solve.Inputs) ->
                 case ds of wild {
                   DEFAULT -> Solve.promptSolve39
                   Solve.InputCoord ds1 ds2 ds3
                   -> case ds1 of wild1 { PegBoard.Coord ds4 ds5 ->
                      case ds4 of wild2 { GHC.Types.I# ds6 ->
                      case ds6 of ds7 {
                        DEFAULT
                        -> GHC.List.elem
                             @ PegBoard.Coord
                             PegBoard.$fEqCoord
                             wild1
                             Solve.promptSolve37
                        0#
                        -> case ds5 of wild3 { GHC.Types.I# ds8 ->
                           case ds8 of ds9 {
                             DEFAULT
                             -> GHC.List.elem
                                  @ PegBoard.Coord
                                  PegBoard.$fEqCoord
                                  wild1
                                  Solve.promptSolve37
                             0# -> GHC.Types.False } } } } } }) -}
a5ebda827058f17c5c49ea3ace3b598c
  promptSolve37 :: [PegBoard.Coord]
  {- Unfolding: (case PegBoard.$wmakeBoard
                        Solve.promptSolve38 of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++ @ PegBoard.Coord ww1 ww2 }) -}
f9d8e7b38d2699aff0126a10d287e2c6
  promptSolve38 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5#) -}
657d3df0c25cbec0a9f40973e2d0610e
  promptSolve39 :: GHC.Types.Bool
  {- Strictness: x -}
cb35af14250de77e2d39f8eb54d3242e
  promptSolve4 ::
    Solve.PromptZip
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.Gloss.Internals.Data.Picture.Picture #)
  {- Arity: 2,
     Unfolding: (\ (x5 :: Solve.PromptZip)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s,
                    case x5 of wild { Solve.PromptZip ds ds1 ds2 ds3 ->
                    case ds3 of wild1 { (,,) s1 ds4 ds5 ->
                    case ds4 of wild2 { (,) tx ty ->
                    Graphics.Gloss.Internals.Data.Picture.Scale
                      s1
                      s1
                      (Graphics.Gloss.Internals.Data.Picture.Translate
                         (GHC.Float.divideFloat tx s1)
                         (GHC.Float.divideFloat ty s1)
                         (case ds of wild3 { Solve.Prompt ds6 ds7 ds8 ds9 ds10 ds11 ->
                          case ds9 of wild4 {
                            Solve.PSeq b -> b
                            Solve.PSeqs as bs
                            -> GHC.List.head
                                 @ Graphics.Gloss.Internals.Data.Picture.Picture
                                 as } })) } } } #)) -}
8db9293a7400a56c53a37cac57512f47
  promptSolve40 :: Solve.PSequence
  {- Strictness: m1, Unfolding: (Solve.PSeq Solve.promptSolve41) -}
d3d5e2c4b5fd93ef84c78900f47ccbf1
  promptSolve41 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m11,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Translate
                   Solve.promptSolve85
                   Solve.promptSolve8
                   Solve.promptSolve42) -}
8dcb8597b87c2e06081996275b920b29
  promptSolve42 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m14,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Pictures
                   Solve.promptSolve43) -}
05b5078642d37c59e123ddef5762b02f
  promptSolve43 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (Graphics.renderBoard_$soffsetF
                   Solve.promptSolve64
                   Solve.promptSolve83
                   Solve.promptSolve44) -}
fc05a502eab8f703d028d1454184fd53
  promptSolve44 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Solve.promptSolve77
                   Solve.promptSolve45) -}
a93baea46b676f01e60afa3d2b0dbe77
  promptSolve45 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Solve.promptSolve70
                   Solve.promptSolve46) -}
217e37c1c041916151e774ce49a0aa4d
  promptSolve46 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Solve.promptSolve47
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)) -}
8766f7f02e37c3fd0aa1b4cf0f6f26ce
  promptSolve47 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Unfolding: (Graphics.Gloss.Internals.Data.Picture.Pictures
                   Solve.promptSolve48) -}
d643f0004331c2a3cd67d208446a789d
  promptSolve48 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Solve.promptSolve68
                   Solve.promptSolve49) -}
290adada24260a846028de79403467c3
  promptSolve49 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   Solve.promptSolve50
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)) -}
3a05417525b914df4de4eb6b653e8ac8
  promptSolve5 :: Solve.PromptZip
  {- Unfolding: (Solve.PromptZip
                   Solve.countPrompt
                   Solve.promptSolve11
                   (GHC.Types.[] @ Solve.Prompt)
                   Solve.promptSolve6) -}
1696f4ecf495d026041e90bd8ce62630
  promptSolve50 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.white
                   Solve.promptSolve51) -}
0157db9275598dfe94984e5df8df576e
  promptSolve51 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Unfolding: (Graphics.Gloss.Internals.Data.Picture.Translate
                   Solve.promptSolve67
                   Solve.promptSolve66
                   Solve.promptSolve52) -}
0c7a1d6242d37ebd0a6562c4a8c2741e
  promptSolve52 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Unfolding: (Graphics.Gloss.Internals.Data.Picture.Pictures
                   Solve.promptSolve53) -}
1b50be25656e3e631f56c38c56947e48
  promptSolve53 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (Graphics.renderBoard_$soffsetF
                   Solve.promptSolve65
                   Solve.promptSolve64
                   Solve.promptSolve54) -}
999377870534916d6e7324ac92639c87
  promptSolve54 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (Solve.promptSolve56 Solve.promptSolve55) -}
ceae46b4e0eeee19591d8da7d0e8528c
  promptSolve55 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (Solve.$wxs 5#) -}
2307a97ee6b7ee4cefb81adc8d7e1728
  promptSolve56 ::
    [Graphics.Gloss.Internals.Data.Picture.Picture]
    -> [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Enum.enumDeltaToIntegerFB
                   @ ([Graphics.Gloss.Internals.Data.Picture.Picture]
                      -> [Graphics.Gloss.Internals.Data.Picture.Picture])
                   Solve.promptSolve61
                   Solve.promptSolve60
                   Solve.promptSolve59
                   Solve.promptSolve58
                   Solve.promptSolve57) -}
f89b2307b77f95d5758f28b1338f18e5
  promptSolve57 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
3507ff2cd2817d81b5881ede6064d26b
  promptSolve58 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-1) -}
89d799a935f4738049175c2ed831f861
  promptSolve59 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (5) -}
995a4939f3efefb06d75a50601b257e5
  promptSolve6 ::
    (Solve.Scale, (GHC.Types.Float, GHC.Types.Float),
     (GHC.Types.Bool, GHC.Types.Float, GHC.Types.Float))
  {- HasNoCafRefs,
     Unfolding: ((Solve.promptSolve10, Solve.promptSolve9,
                  Solve.promptSolve7)) -}
9831080ab864e4d91ed5395a986c92f3
  promptSolve60 ::
    [Graphics.Gloss.Internals.Data.Picture.Picture]
    -> [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: [Graphics.Gloss.Internals.Data.Picture.Picture]) ->
                 GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture) -}
35d12ac36a944254b4a77e516c1fcb83
  promptSolve61 ::
    GHC.Integer.Type.Integer
    -> ([Graphics.Gloss.Internals.Data.Picture.Picture]
        -> [Graphics.Gloss.Internals.Data.Picture.Picture])
    -> [Graphics.Gloss.Internals.Data.Picture.Picture]
    -> [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Arity: 2,
     Unfolding: (\ (ds :: GHC.Integer.Type.Integer)
                   (ds1 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
                           -> [Graphics.Gloss.Internals.Data.Picture.Picture])[OneShot] ->
                 let {
                   _x :: GHC.Base.String
                   = case GHC.Show.$w$cshowsPrec3
                            0#
                            ds
                            (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                     GHC.Types.: @ GHC.Types.Char ww3 ww4 }
                 } in
                 let {
                   _x1 :: Graphics.Gloss.Internals.Data.Picture.Picture
                   = Graphics.Gloss.Internals.Data.Picture.Text _x
                 } in
                 let {
                   _x2 :: Graphics.Gloss.Internals.Data.Picture.Picture
                   = Graphics.Gloss.Internals.Data.Picture.Scale
                       Solve.promptSolve22
                       Solve.promptSolve22
                       _x1
                 } in
                 let {
                   _x3 :: Graphics.Gloss.Internals.Data.Picture.Picture
                   = Graphics.Gloss.Internals.Data.Picture.Translate
                       Solve.promptSolve63
                       Solve.promptSolve62
                       _x2
                 } in
                 \ (ds2 :: [Graphics.Gloss.Internals.Data.Picture.Picture]) ->
                 case ds2 of wild {
                   [] -> GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture
                   : y ys
                   -> GHC.Types.:
                        @ Graphics.Gloss.Internals.Data.Picture.Picture
                        (Graphics.Gloss.Internals.Data.Picture.Pictures
                           (GHC.Types.:
                              @ Graphics.Gloss.Internals.Data.Picture.Picture
                              _x3
                              (GHC.Types.:
                                 @ Graphics.Gloss.Internals.Data.Picture.Picture
                                 y
                                 (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture))))
                        (ds1 ys) }) -}
ba546cea1c2363b62124a1c3a4499a11
  promptSolve62 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 36.0#) -}
21e2fea38f09c9607a9668f61753163d
  promptSolve63 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 20.0#) -}
807470b9124034e437a93ebdd44aa7ff
  promptSolve64 :: GHC.Integer.Type.Integer -> GHC.Types.Float
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (eta :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.doubleFromInteger eta of wild { DEFAULT ->
                 GHC.Types.F#
                   (GHC.Prim.timesFloat# (GHC.Prim.double2Float# wild) 16.0#) }) -}
3c0e57cca446e386ecd31ae6094ae83e
  promptSolve65 :: GHC.Integer.Type.Integer -> GHC.Types.Float
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (eta :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.doubleFromInteger eta of wild { DEFAULT ->
                 GHC.Types.F#
                   (GHC.Prim.timesFloat# (GHC.Prim.double2Float# wild) -8.0#) }) -}
1de863abe3bb012af6d5b7d45855f89f
  promptSolve66 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# 8.0#) -}
676c2cfbb400795d3b76239992a37e6c
  promptSolve67 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# 104.0#) -}
58ba86c5c64de2657ff73c713259cefa
  promptSolve68 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Unfolding: (case Graphics.$wrenderBoard
                        Solve.promptSolve69 of ww { Unit# ww1 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww1 }) -}
694c0e42841350977ea7ad79fdac9214
  promptSolve69 :: PegBoard.Board
  {- Unfolding: (case PegBoard.$wmakeBoard
                        Solve.promptSolve38 of ww { (#,#) ww1 ww2 ->
                 PegBoard.Board ww1 ww2 }) -}
6b7b0bf8983eec731019eb81114c9c29
  promptSolve7 :: (GHC.Types.Bool, GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False, Solve.promptSolve8,
                  Solve.promptSolve8)) -}
42b3038b68c0bf3318a9ade8de50ba1d
  promptSolve70 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.white
                   Solve.promptSolve71) -}
c464976d618b0b56d2ed5bdc20c2ccfe
  promptSolve71 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Unfolding: (Graphics.Gloss.Internals.Data.Picture.Pictures
                   Solve.promptSolve72) -}
19d43cdd7ca4129027c3305ead47f05b
  promptSolve72 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (Solve.promptSolve_go
                   Solve.promptSolve75
                   Solve.promptSolve73) -}
82fc2c42daac564e0aa82d6528432a80
  promptSolve73 :: [GHC.Types.Float]
  {- Unfolding: (GHC.Real.numericEnumFromThenTo
                   @ GHC.Types.Float
                   GHC.Classes.$fOrdFloat
                   GHC.Float.$fFractionalFloat
                   Solve.promptSolve8
                   Solve.promptSolve66
                   Solve.promptSolve74) -}
47f51396802ca1271affa919ecce16a3
  promptSolve74 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# 32.0#) -}
0a16dee5c4d6f69c565df525bcd27a93
  promptSolve75 :: [GHC.Types.Float]
  {- Unfolding: (GHC.Real.numericEnumFromTo
                   @ GHC.Types.Float
                   GHC.Classes.$fOrdFloat
                   GHC.Float.$fFractionalFloat
                   Solve.promptSolve10
                   Solve.promptSolve76) -}
23acb62df517f0f2e7fbfcbdc7bc3b6a
  promptSolve76 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# 5.0#) -}
684c568b9c06646984784b98d1db3765
  promptSolve77 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Unfolding: (Graphics.Gloss.Internals.Data.Picture.Translate
                   Solve.promptSolve8
                   Solve.promptSolve84
                   Solve.promptSolve78) -}
b1b77734bd17c1cff8879ec2a4735b08
  promptSolve78 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.white
                   Solve.promptSolve79) -}
3a449962e1b20c67e509e68f5b3f4899
  promptSolve79 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Unfolding: (Graphics.Gloss.Internals.Data.Picture.Pictures
                   Solve.promptSolve80) -}
d9b752f654573ba807f4935a0269de9d
  promptSolve8 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
f7b2344d9f7dfdc7a8929d93fb8d8942
  promptSolve80 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (Graphics.renderBoard_$soffsetF
                   Solve.promptSolve83
                   Solve.promptSolve64
                   Solve.promptSolve81) -}
d4c420ddd03556e038d64157987bcb72
  promptSolve81 :: [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Unfolding: (GHC.Enum.enumDeltaToIntegerFB
                   @ [Graphics.Gloss.Internals.Data.Picture.Picture]
                   Solve.promptSolve82
                   (GHC.Types.[] @ Graphics.Gloss.Internals.Data.Picture.Picture)
                   Solve.promptSolve59
                   Solve.promptSolve58
                   Solve.promptSolve57) -}
3756e1999f95b9d034ce2a02e18216af
  promptSolve82 ::
    GHC.Integer.Type.Integer
    -> [Graphics.Gloss.Internals.Data.Picture.Picture]
    -> [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Arity: 2,
     Unfolding: (\ (ds :: GHC.Integer.Type.Integer)
                   (ds1 :: [Graphics.Gloss.Internals.Data.Picture.Picture])[OneShot] ->
                 GHC.Types.:
                   @ Graphics.Gloss.Internals.Data.Picture.Picture
                   (Graphics.Gloss.Internals.Data.Picture.Scale
                      Solve.promptSolve22
                      Solve.promptSolve22
                      (Graphics.Gloss.Internals.Data.Picture.Text
                         (GHC.Show.$fShowInteger_$cshow ds)))
                   ds1) -}
253eb3a7fe33381780ccf202390d0c4f
  promptSolve83 :: GHC.Integer.Type.Integer -> GHC.Types.Float
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (eta :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.doubleFromInteger eta of wild { DEFAULT ->
                 GHC.Types.F#
                   (GHC.Prim.timesFloat# (GHC.Prim.double2Float# wild) 0.0#) }) -}
64770b73be6f9c662689bbd03e9ee1cc
  promptSolve84 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# -4.0#) -}
856070a598d88a938d9067c05da7fde9
  promptSolve85 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# -48.0#) -}
e53f8d7c81f042c4f216b6a113faf167
  promptSolve86 :: Solve.Inputs -> Solve.Inputs
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Solve.Inputs) ->
                 case w of wild {
                   DEFAULT -> Solve.promptSolve90
                   Solve.InputCoord cd ds ds1
                   -> case ds of wild1 {
                        GHC.Base.Nothing
                        -> Solve.InputCoord
                             cd
                             (GHC.Base.Just @ GHC.Types.Int (Solve.makeInt ds1))
                             (GHC.Types.[] @ GHC.Types.Int)
                        GHC.Base.Just x5
                        -> Solve.InputCoord
                             (PegBoard.Coord x5 (Solve.makeInt ds1))
                             (GHC.Base.Nothing @ GHC.Types.Int)
                             (GHC.Types.[] @ GHC.Types.Int) } }) -}
07fc62710fe35c5ce803069b8eae2769
  promptSolve87 :: [GHC.Types.Int]
  {- Unfolding: (case GHC.List.$witerate
                        @ GHC.Types.Int
                        Solve.promptSolve89
                        Solve.promptSolve88 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Int ww1 ww2 }) -}
441e1029007bfd3698e4d3ce2500a85d
  promptSolve88 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
cd72e75d33a899b3c5db1ca8822fdb4d
  promptSolve89 :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# x5 ->
                 GHC.Types.I# (GHC.Prim.*# x5 10#) }) -}
0d020fb69b460e4e4b72c37a55a8498e
  promptSolve9 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Solve.promptSolve8, Solve.promptSolve8)) -}
97a4a7949c2372558eab526b40c8589c
  promptSolve90 :: Solve.Inputs
  {- Strictness: x -}
9c508de6f6b9d4f9249c8b88fcd1fd18
  promptSolve91 ::
    Solve.Prompt
    -> Graphics.Gloss.Internals.Interface.Event.Event -> Solve.Prompt
  {- Arity: 2, Strictness: <S,1*U(U,U,U,U,U,U)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Solve.Prompt)
                   (w1 :: Graphics.Gloss.Internals.Interface.Event.Event) ->
                 case w of ww { Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of wild {
                   DEFAULT -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6
                   Graphics.Gloss.Internals.Interface.Event.EventKey ds ds1 ds2 ds3
                   -> case ds of wild1 {
                        Graphics.Gloss.Internals.Interface.Backend.Types.Char c
                        -> case ds1 of wild2 {
                             Graphics.Gloss.Internals.Interface.Backend.Types.Down
                             -> case ww6 of wild3 {
                                  GHC.Types.False
                                  -> case c of wild4 { GHC.Types.C# c# ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.leWord#
                                               (GHC.Prim.int2Word#
                                                  (GHC.Prim.-# (GHC.Prim.ord# c#) 48#))
                                               9##) of wild5 {
                                       GHC.Types.False
                                       -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 GHC.Types.False
                                       GHC.Types.True
                                       -> Solve.Prompt
                                            (case ww1 of wild6 {
                                               DEFAULT -> Solve.promptSolve94
                                               Solve.InputCount ds4 ds5
                                               -> Solve.InputCount
                                                    ds4
                                                    (GHC.Types.:
                                                       @ GHC.Types.Int
                                                       (case Data.Char.$wdigitToInt
                                                               c# of ww7 { DEFAULT ->
                                                        GHC.Types.I# ww7 })
                                                       ds5)
                                               Solve.InputCoord ds4 ds5 ds6
                                               -> Solve.InputCoord
                                                    ds4
                                                    ds5
                                                    (GHC.Types.:
                                                       @ GHC.Types.Int
                                                       (case Data.Char.$wdigitToInt
                                                               c# of ww7 { DEFAULT ->
                                                        GHC.Types.I# ww7 })
                                                       ds6) })
                                            ww2
                                            ww3
                                            ww4
                                            ww5
                                            GHC.Types.False } }
                                  GHC.Types.True
                                  -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 GHC.Types.True }
                             Graphics.Gloss.Internals.Interface.Backend.Types.Up
                             -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6 }
                        Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey enter
                        -> case ds1 of wild2 {
                             Graphics.Gloss.Internals.Interface.Backend.Types.Down
                             -> case GHC.Prim.dataToTag#
                                       @ Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey
                                       enter of wild3 {
                                  DEFAULT
                                  -> case GHC.Prim.dataToTag#
                                            @ Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey
                                            enter of wild4 {
                                       DEFAULT -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6
                                       65#
                                       -> let {
                                            i :: Solve.Inputs = ww3 ww1
                                          } in
                                          let {
                                            cp :: GHC.Types.Bool = ww5 i
                                          } in
                                          Solve.Prompt
                                            (case i of wild5 {
                                               DEFAULT
                                               -> case cp of wild6 {
                                                    GHC.Types.False -> Solve.defaultInputCoord
                                                    GHC.Types.True -> wild5 }
                                               Solve.InputCoord c ds4 ds5
                                               -> case ds4 of wild6 {
                                                    GHC.Base.Nothing
                                                    -> case cp of wild7 {
                                                         GHC.Types.False -> Solve.defaultInputCoord
                                                         GHC.Types.True -> wild5 }
                                                    GHC.Base.Just ds6 -> wild5 } })
                                            ww2
                                            ww3
                                            ww4
                                            ww5
                                            cp }
                                  33#
                                  -> let {
                                       i :: Solve.Inputs = ww3 ww1
                                     } in
                                     let {
                                       cp :: GHC.Types.Bool = ww5 i
                                     } in
                                     Solve.Prompt
                                       (case i of wild4 {
                                          DEFAULT
                                          -> case cp of wild5 {
                                               GHC.Types.False -> Solve.defaultInputCoord
                                               GHC.Types.True -> wild4 }
                                          Solve.InputCoord c ds4 ds5
                                          -> case ds4 of wild5 {
                                               GHC.Base.Nothing
                                               -> case cp of wild6 {
                                                    GHC.Types.False -> Solve.defaultInputCoord
                                                    GHC.Types.True -> wild4 }
                                               GHC.Base.Just ds6 -> wild4 } })
                                       ww2
                                       ww3
                                       ww4
                                       ww5
                                       cp }
                             Graphics.Gloss.Internals.Interface.Backend.Types.Up
                             -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6 }
                        Graphics.Gloss.Internals.Interface.Backend.Types.MouseButton ipv
                        -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6 } } }) -}
dbd99f08b1f1c1ad97f3d0eb66dda0a0
  promptSolve92 :: PegBoard.Coord
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (PegBoard.Coord
                   Solve.promptSolve93
                   Solve.promptSolve93) -}
b7cdb4c5dcff6391fab1cd0f11361e87
  promptSolve93 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
39ebc7ccf3cae6c54218ec5921c50bfc
  promptSolve94 :: Solve.Inputs
  {- Strictness: x -}
dcd8c7b8baeae9e4c022ac17c520075b
  promptSolve95 :: GHC.Types.Bool
  {- Strictness: x -}
3a053d0a4536b0a91c6ab8df5eeb59df
  promptSolve96 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m13,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Scale
                   Solve.promptSolve22
                   Solve.promptSolve22
                   Solve.promptSolve97) -}
48d053aba312b4b1cbaaaa8d77c7c608
  promptSolve97 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m8,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Text
                   Solve.promptSolve98) -}
a8f5afeec2ff8e14ce81466d932c791d
  promptSolve98 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Enter number of pegs to end with"#) -}
b11c9255ca2c0bc0f99746f0cbe805f3
  promptSolve99 :: Solve.Inputs
  {- Strictness: x -}
8b3aa528f1efa9118f9fc0ae3eacb737
  promptSolve_chck :: Solve.Inputs -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Solve.Inputs) ->
                 case ds of wild {
                   DEFAULT -> Solve.promptSolve95
                   Solve.InputCount ds1 ds2
                   -> case ds1 of wild1 { GHC.Types.I# ds3 ->
                      case ds3 of ds4 {
                        DEFAULT
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# ds4 1#) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# ds4 13#) }
                        0# -> case ds2 of wild2 { DEFAULT -> GHC.Types.False } } } }) -}
146565ed701f98679b96aeb276ec3c35
  promptSolve_disp :: Solve.PSequence
  {- Strictness: m1, Unfolding: (Solve.PSeq Solve.promptSolve_msg) -}
017471430e184176daeb8868317324e9
  promptSolve_go ::
    [GHC.Types.Float]
    -> [GHC.Types.Float]
    -> [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
bde01b50ddc0a134430dc759ab294e70
  promptSolve_handler ::
    Solve.Prompt
    -> Graphics.Gloss.Internals.Interface.Event.Event -> Solve.Prompt
  {- Arity: 2, Strictness: <S,U(U,U,U,U,U,U)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Solve.Prompt)
                   (w1 :: Graphics.Gloss.Internals.Interface.Event.Event) ->
                 case w of ww { Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w1 of wild {
                   DEFAULT -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6
                   Graphics.Gloss.Internals.Interface.Event.EventKey ds ds1 ds2 ds3
                   -> case ds of wild1 {
                        Graphics.Gloss.Internals.Interface.Backend.Types.Char c
                        -> case ds1 of wild2 {
                             Graphics.Gloss.Internals.Interface.Backend.Types.Down
                             -> case ww6 of wild3 {
                                  GHC.Types.False
                                  -> case c of wild4 { GHC.Types.C# c# ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.leWord#
                                               (GHC.Prim.int2Word#
                                                  (GHC.Prim.-# (GHC.Prim.ord# c#) 48#))
                                               9##) of wild5 {
                                       GHC.Types.False
                                       -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 GHC.Types.False
                                       GHC.Types.True
                                       -> Solve.Prompt
                                            (case ww1 of wild6 {
                                               DEFAULT -> Solve.promptSolve100
                                               Solve.InputCount ds4 ds5
                                               -> Solve.InputCount
                                                    ds4
                                                    (GHC.Types.:
                                                       @ GHC.Types.Int
                                                       (case Data.Char.$wdigitToInt
                                                               c# of ww7 { DEFAULT ->
                                                        GHC.Types.I# ww7 })
                                                       ds5)
                                               Solve.InputCoord ds4 ds5 ds6
                                               -> Solve.InputCoord
                                                    ds4
                                                    ds5
                                                    (GHC.Types.:
                                                       @ GHC.Types.Int
                                                       (case Data.Char.$wdigitToInt
                                                               c# of ww7 { DEFAULT ->
                                                        GHC.Types.I# ww7 })
                                                       ds6) })
                                            ww2
                                            ww3
                                            ww4
                                            ww5
                                            GHC.Types.False } }
                                  GHC.Types.True
                                  -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 GHC.Types.True }
                             Graphics.Gloss.Internals.Interface.Backend.Types.Up
                             -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6 }
                        Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey enter
                        -> case ds1 of wild2 {
                             Graphics.Gloss.Internals.Interface.Backend.Types.Down
                             -> let {
                                  i :: Solve.Inputs = ww3 ww1
                                } in
                                let {
                                  cp :: GHC.Types.Bool = ww5 i
                                } in
                                case GHC.Prim.dataToTag#
                                       @ Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey
                                       enter of wild3 {
                                  DEFAULT
                                  -> case GHC.Prim.dataToTag#
                                            @ Graphics.Gloss.Internals.Interface.Backend.Types.SpecialKey
                                            enter of wild4 {
                                       DEFAULT -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6
                                       65#
                                       -> Solve.Prompt
                                            (case cp of wild5 {
                                               GHC.Types.False -> Solve.defaultInputCount
                                               GHC.Types.True -> i })
                                            ww2
                                            ww3
                                            ww4
                                            ww5
                                            cp }
                                  33#
                                  -> Solve.Prompt
                                       (case cp of wild4 {
                                          GHC.Types.False -> Solve.defaultInputCount
                                          GHC.Types.True -> i })
                                       ww2
                                       ww3
                                       ww4
                                       ww5
                                       cp }
                             Graphics.Gloss.Internals.Interface.Backend.Types.Up
                             -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6 }
                        Graphics.Gloss.Internals.Interface.Backend.Types.MouseButton ipv
                        -> Solve.Prompt ww1 ww2 ww3 ww4 ww5 ww6 } } }) -}
435eb59abcee15510c35b71cf05ab9ff
  promptSolve_msg :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m10,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.white
                   Solve.promptSolve96) -}
d89fd39443ba8c9dba6a1ec87d52d53f
  promptSolve_proc :: Solve.Inputs -> Solve.Inputs
  {- Arity: 1, Strictness: <S,1*U>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.Inputs) ->
                 case ds of wild {
                   DEFAULT -> Solve.promptSolve99
                   Solve.InputCount ds1 ds2
                   -> Solve.InputCount
                        (Solve.makeInt ds2)
                        (GHC.Types.[] @ GHC.Types.Int) }) -}
7615f418047f48a039269ab838feb79d
  seqDisp :: Solve.Prompt -> Solve.PSequence
  RecSel Left Solve.Prompt
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.Prompt) ->
                 case ds of wild { Solve.Prompt ds1 ds2 ds3 ds4 ds5 ds6 -> ds4 }) -}
e5936f1467997f4e0b2ae14faeb331dd
  worldT :: Solve.PromptZip -> Solve.WorldTrans
  RecSel Left Solve.PromptZip
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.PromptZip) ->
                 case ds of wild { Solve.PromptZip ds1 ds2 ds3 ds4 -> ds4 }) -}
3b7ad015b80a6257be2907ca17e424a3
  xCoord :: Solve.Inputs -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Solve.Inputs
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Solve.Inputs) ->
                 case ds of wild {
                   DEFAULT -> Solve.xCoord1 Solve.InputCoord ds1 ds2 ds3 -> ds2 }) -}
8ee12440cdf0a943998f89040cbd1d6f
  xCoord1 :: GHC.Base.Maybe GHC.Types.Int
  {- Strictness: x -}
instance GHC.Classes.Eq [Solve.Inputs] = Solve.$fEqInputs
instance GHC.Classes.Eq [Solve.PSequence] = Solve.$fEqPSequence
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

