
==================== FINAL INTERFACE ====================
2016-10-28 16:45:04.876601 UTC

interface pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:PegBoardMove 8001
  interface hash: 9476b7e528a89123d87ab670b9e314b7
  ABI hash: dbc0da23ffafc02dd95af7c464bd5360
  export-list hash: 7e04a0fdaca55b135f9b30999c563e9b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  PegBoardMove.movePegs
  PegBoardMove.movePegsAll
  PegBoardMove.nextMoves
  PegBoardMove.BoardMoves
module dependencies: Helpers.Lists PegBoard
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Enum fdf7ac3e1b0be0a4a37257601bddad14
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  Helpers.Lists 9c52ca015466111e8d572aeb56cfef86
  exports: 975c27250cc63b29bcdfa4d36e613251
  nPerms 7a59ca7f41d7481e845a6ad3b52e5c7d
import  -/  PegBoard f83d3917c805320b9d1eddcc14783c79
  exports: 019cb6a33f1bb6c7b9bb5da6116f70e8
  Board 811b281511fb95d934048eb55c0228c6
  Board c47801c17d6fbde18b84e473ce510507
  Coord a7a7404edac42fd75996faf0c0163f41
  Coord 175aeaab41cec97be39a9c7cdcc5b317
  addPeg a40cccb7891721501344266eaa26c1b3
  removePeg 8152e4c979462e67a3b476c83d60dac4
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves :: GHC.Enum.Enum PegBoardMove.BoardMoves
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PegBoardMove.BoardMoves
                  PegBoardMove.$fEnumBoardMoves_$csucc
                  PegBoardMove.$fEnumBoardMoves_$cpred
                  PegBoardMove.$fEnumBoardMoves_$ctoEnum
                  PegBoardMove.$fEnumBoardMoves_$cfromEnum
                  PegBoardMove.$fEnumBoardMoves_$cenumFrom
                  PegBoardMove.$fEnumBoardMoves_$cenumFromThen
                  PegBoardMove.$fEnumBoardMoves_$cenumFromTo
                  PegBoardMove.$fEnumBoardMoves_$cenumFromThenTo -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves1 :: [PegBoardMove.BoardMoves]
  {- Unfolding: (PegBoardMove.$fEnumBoardMoves_go4 3#) -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves2 :: [PegBoardMove.BoardMoves]
  {- Unfolding: (PegBoardMove.$fEnumBoardMoves_go5 2#) -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves3 :: [PegBoardMove.BoardMoves]
  {- Unfolding: (PegBoardMove.$fEnumBoardMoves_go6 1#) -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves4 :: [PegBoardMove.BoardMoves]
  {- Unfolding: (PegBoardMove.$fEnumBoardMoves_go7 0#) -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves5 :: GHC.Prim.Int# -> PegBoardMove.BoardMoves
  {- Arity: 1, Strictness: <L,U>x -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves6 :: PegBoardMove.BoardMoves
  {- Strictness: x -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves7 :: PegBoardMove.BoardMoves
  {- Strictness: x -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_$cenumFrom ::
    PegBoardMove.BoardMoves -> [PegBoardMove.BoardMoves]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: PegBoardMove.BoardMoves) ->
                 case a of wild {
                   PegBoardMove.None -> PegBoardMove.$fEnumBoardMoves4
                   PegBoardMove.Pos -> PegBoardMove.$fEnumBoardMoves3
                   PegBoardMove.Zed -> PegBoardMove.$fEnumBoardMoves2
                   PegBoardMove.Neg -> PegBoardMove.$fEnumBoardMoves1 }) -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_$cenumFromThen ::
    PegBoardMove.BoardMoves
    -> PegBoardMove.BoardMoves -> [PegBoardMove.BoardMoves]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PegBoardMove.BoardMoves)
                   (b :: PegBoardMove.BoardMoves) ->
                 let {
                   $j :: GHC.Prim.Int# -> [PegBoardMove.BoardMoves]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [PegBoardMove.BoardMoves]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (b# :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [PegBoardMove.BoardMoves]
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (y :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [PegBoardMove.BoardMoves]
                                    PegBoardMove.$fEnumBoardMoves_c
                                    (GHC.Types.[] @ PegBoardMove.BoardMoves)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [PegBoardMove.BoardMoves]
                                    PegBoardMove.$fEnumBoardMoves_c
                                    (GHC.Types.[] @ PegBoardMove.BoardMoves)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 3# GHC.Types.True -> $j2 0# }
                     } in
                     case b of wild {
                       PegBoardMove.None -> $j1 0#
                       PegBoardMove.Pos -> $j1 1#
                       PegBoardMove.Zed -> $j1 2#
                       PegBoardMove.Neg -> $j1 3# }
                 } in
                 case a of wild {
                   PegBoardMove.None -> $j 0#
                   PegBoardMove.Pos -> $j 1#
                   PegBoardMove.Zed -> $j 2#
                   PegBoardMove.Neg -> $j 3# }) -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_$cenumFromThenTo ::
    PegBoardMove.BoardMoves
    -> PegBoardMove.BoardMoves
    -> PegBoardMove.BoardMoves
    -> [PegBoardMove.BoardMoves]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_$cenumFromTo ::
    PegBoardMove.BoardMoves
    -> PegBoardMove.BoardMoves -> [PegBoardMove.BoardMoves]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: PegBoardMove.BoardMoves)
                   (y :: PegBoardMove.BoardMoves) ->
                 let {
                   $j :: GHC.Prim.Int# -> [PegBoardMove.BoardMoves]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       PegBoardMove.None
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0#) of wild1 {
                            GHC.Types.False -> PegBoardMove.$fEnumBoardMoves_go3 x1
                            GHC.Types.True -> GHC.Types.[] @ PegBoardMove.BoardMoves }
                       PegBoardMove.Pos
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1#) of wild1 {
                            GHC.Types.False -> PegBoardMove.$fEnumBoardMoves_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ PegBoardMove.BoardMoves }
                       PegBoardMove.Zed
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2#) of wild1 {
                            GHC.Types.False -> PegBoardMove.$fEnumBoardMoves_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ PegBoardMove.BoardMoves }
                       PegBoardMove.Neg
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 3#) of wild1 {
                            GHC.Types.False -> PegBoardMove.$fEnumBoardMoves_go x1
                            GHC.Types.True -> GHC.Types.[] @ PegBoardMove.BoardMoves } }
                 } in
                 case x of wild {
                   PegBoardMove.None -> $j 0#
                   PegBoardMove.Pos -> $j 1#
                   PegBoardMove.Zed -> $j 2#
                   PegBoardMove.Neg -> $j 3# }) -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_$cfromEnum ::
    PegBoardMove.BoardMoves -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PegBoardMove.BoardMoves) ->
                 case a of wild {
                   PegBoardMove.None -> GHC.Types.I# 0#
                   PegBoardMove.Pos -> GHC.Types.I# 1#
                   PegBoardMove.Zed -> GHC.Types.I# 2#
                   PegBoardMove.Neg -> GHC.Types.I# 3# }) -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_$cpred ::
    PegBoardMove.BoardMoves -> PegBoardMove.BoardMoves
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PegBoardMove.BoardMoves) ->
                 case a of wild {
                   PegBoardMove.None -> PegBoardMove.$fEnumBoardMoves6
                   PegBoardMove.Pos -> PegBoardMove.None
                   PegBoardMove.Zed -> PegBoardMove.Pos
                   PegBoardMove.Neg -> PegBoardMove.Zed }) -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_$csucc ::
    PegBoardMove.BoardMoves -> PegBoardMove.BoardMoves
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PegBoardMove.BoardMoves) ->
                 case a of wild {
                   PegBoardMove.None -> PegBoardMove.Pos
                   PegBoardMove.Pos -> PegBoardMove.Zed
                   PegBoardMove.Zed -> PegBoardMove.Neg
                   PegBoardMove.Neg -> PegBoardMove.$fEnumBoardMoves7 }) -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_$ctoEnum ::
    GHC.Types.Int -> PegBoardMove.BoardMoves
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PegBoardMove.$w$ctoEnum ww1 }) -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_c ::
    GHC.Types.Int
    -> [PegBoardMove.BoardMoves] -> [PegBoardMove.BoardMoves]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [PegBoardMove.BoardMoves]) ->
                 GHC.Types.:
                   @ PegBoardMove.BoardMoves
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ PegBoardMove.BoardMoves a })
                   ys) -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_go :: GHC.Prim.Int# -> [PegBoardMove.BoardMoves]
  {- Arity: 1, Strictness: <L,U> -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_go1 :: GHC.Prim.Int# -> [PegBoardMove.BoardMoves]
  {- Arity: 1, Strictness: <L,U> -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_go2 :: GHC.Prim.Int# -> [PegBoardMove.BoardMoves]
  {- Arity: 1, Strictness: <L,U> -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_go3 :: GHC.Prim.Int# -> [PegBoardMove.BoardMoves]
  {- Arity: 1, Strictness: <L,U> -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_go4 :: GHC.Prim.Int# -> [PegBoardMove.BoardMoves]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_go5 :: GHC.Prim.Int# -> [PegBoardMove.BoardMoves]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_go6 :: GHC.Prim.Int# -> [PegBoardMove.BoardMoves]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
58d219e6110a896622fc7754fab45367
  $fEnumBoardMoves_go7 :: GHC.Prim.Int# -> [PegBoardMove.BoardMoves]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
58d219e6110a896622fc7754fab45367
  $fEqBoardMoves :: GHC.Classes.Eq PegBoardMove.BoardMoves
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PegBoardMove.BoardMoves
                  PegBoardMove.$fEqBoardMoves_$c==
                  PegBoardMove.$fEqBoardMoves_$c/= -}
58d219e6110a896622fc7754fab45367
  $fEqBoardMoves_$c/= ::
    PegBoardMove.BoardMoves
    -> PegBoardMove.BoardMoves -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PegBoardMove.BoardMoves)
                   (b :: PegBoardMove.BoardMoves) ->
                 case a of wild {
                   PegBoardMove.None
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PegBoardMove.None -> GHC.Types.False }
                   PegBoardMove.Pos
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PegBoardMove.Pos -> GHC.Types.False }
                   PegBoardMove.Zed
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PegBoardMove.Zed -> GHC.Types.False }
                   PegBoardMove.Neg
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PegBoardMove.Neg -> GHC.Types.False } }) -}
58d219e6110a896622fc7754fab45367
  $fEqBoardMoves_$c== ::
    PegBoardMove.BoardMoves
    -> PegBoardMove.BoardMoves -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: PegBoardMove.BoardMoves)
                   (ds1 :: PegBoardMove.BoardMoves) ->
                 case ds of wild {
                   PegBoardMove.None
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PegBoardMove.None -> GHC.Types.True }
                   PegBoardMove.Pos
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PegBoardMove.Pos -> GHC.Types.True }
                   PegBoardMove.Zed
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PegBoardMove.Zed -> GHC.Types.True }
                   PegBoardMove.Neg
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PegBoardMove.Neg -> GHC.Types.True } }) -}
58d219e6110a896622fc7754fab45367
  $fShowBoardMoves :: GHC.Show.Show PegBoardMove.BoardMoves
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PegBoardMove.BoardMoves
                  PegBoardMove.$fShowBoardMoves_$cshowsPrec
                  PegBoardMove.$fShowBoardMoves_$cshow
                  PegBoardMove.$fShowBoardMoves_$cshowList -}
e9dcc2e20ec70d97a68bd56e927273f6
  $fShowBoardMoves1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Neg"#) -}
c46399bdb1db34bfe48448ebe00e21d8
  $fShowBoardMoves2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Zed"#) -}
bb18d6da96ad155a1efaabdb570f0882
  $fShowBoardMoves3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Pos"#) -}
59abac0fb45cf1e51c74fed30991132a
  $fShowBoardMoves4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "None"#) -}
58d219e6110a896622fc7754fab45367
  $fShowBoardMoves_$cshow ::
    PegBoardMove.BoardMoves -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoardMove.BoardMoves) ->
                 PegBoardMove.$fShowBoardMoves_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
58d219e6110a896622fc7754fab45367
  $fShowBoardMoves_$cshowList ::
    [PegBoardMove.BoardMoves] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PegBoardMove.BoardMoves
                   PegBoardMove.$w$cshowsPrec) -}
58d219e6110a896622fc7754fab45367
  $fShowBoardMoves_$cshowsPrec ::
    GHC.Types.Int -> PegBoardMove.BoardMoves -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: PegBoardMove.BoardMoves)
                   (w2 :: GHC.Base.String) ->
                 PegBoardMove.$w$cshowsPrec w1 w2) -}
385029f18908560937b8dcae54254cd2
  $tc'Neg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13942882765082697268##
                   9762402212949452706##
                   PegBoardMove.$trModule
                   PegBoardMove.$tc'Neg1) -}
0bf25fbecc0f4c597dbda674432d726e
  $tc'Neg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Neg"#) -}
4831f604173a9e1cc88352940d32eabd
  $tc'None :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3455118300553954351##
                   4190504517268252656##
                   PegBoardMove.$trModule
                   PegBoardMove.$tc'None1) -}
c531dd2745f61524d3e65534e95a1cca
  $tc'None1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'None"#) -}
e942b386724b10126121a87b15bc09d0
  $tc'Pos :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8437159622990848200##
                   11939255582874761938##
                   PegBoardMove.$trModule
                   PegBoardMove.$tc'Pos1) -}
5d27dcc1a40e03c783d94a879f157db8
  $tc'Pos1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Pos"#) -}
144a76264d2e694005f2caac1f9367a9
  $tc'Zed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12857181422883053992##
                   7642694225851070214##
                   PegBoardMove.$trModule
                   PegBoardMove.$tc'Zed1) -}
3e9795e0d675fe93686b7b5d376aa1c8
  $tc'Zed1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Zed"#) -}
a4819a69faf5f9ac3620d45d8eee2c4c
  $tcBoardMoves :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15054241050569823213##
                   13803728263179378492##
                   PegBoardMove.$trModule
                   PegBoardMove.$tcBoardMoves1) -}
18f1c1fc21151d606539a848d8d7c0c4
  $tcBoardMoves1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BoardMoves"#) -}
16cc86fa3a7e4a12c3d7781ff450efcf
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   PegBoardMove.$trModule2
                   PegBoardMove.$trModule1) -}
b23e9263479afbc0abce4732b0837ea2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PegBoardMove"#) -}
af4e7792e56c28afd31978ad268d22a6
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2"#) -}
58d219e6110a896622fc7754fab45367
  $w$cshowsPrec ::
    PegBoardMove.BoardMoves -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: PegBoardMove.BoardMoves)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   PegBoardMove.None
                   -> GHC.Base.++ @ GHC.Types.Char PegBoardMove.$fShowBoardMoves4 w1
                   PegBoardMove.Pos
                   -> GHC.Base.++ @ GHC.Types.Char PegBoardMove.$fShowBoardMoves3 w1
                   PegBoardMove.Zed
                   -> GHC.Base.++ @ GHC.Types.Char PegBoardMove.$fShowBoardMoves2 w1
                   PegBoardMove.Neg
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        PegBoardMove.$fShowBoardMoves1
                        w1 }) -}
58d219e6110a896622fc7754fab45367
  $w$ctoEnum :: GHC.Prim.Int# -> PegBoardMove.BoardMoves
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> PegBoardMove.$fEnumBoardMoves5 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 3#) of wild1 {
                        GHC.Types.False -> PegBoardMove.$fEnumBoardMoves5 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ PegBoardMove.BoardMoves ww } }) -}
7ce47bde701fe6ec07b6cc876042a9d5
  $wmovePegs ::
    PegBoard.Coord
    -> PegBoard.Coord
    -> PegBoard.Coord
    -> [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> (# [PegBoard.Coord], [PegBoard.Coord] #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U(U),U(U))><L,U(U(U),U(U))><L,U(U(U),U(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: PegBoard.Coord)
                   (ww1 :: PegBoard.Coord)
                   (ww2 :: PegBoard.Coord)
                   (ww3 :: [PegBoard.Coord])
                   (ww4 :: [PegBoard.Coord]) ->
                 case PegBoard.$waddPeg ww2 ww3 ww4 of ww5 { (#,#) ww6 ww7 ->
                 case PegBoard.$wremovePeg ww1 ww6 ww7 of ww8 { (#,#) ww9 ww10 ->
                 PegBoard.$wremovePeg ww ww9 ww10 } }) -}
87bc5064ac86c9b262cd64d9713a3bc7
  $wnextMoves ::
    [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [(PegBoard.Coord, PegBoard.Coord, PegBoard.Coord)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><L,U>, Inline: [0] -}
58d219e6110a896622fc7754fab45367
  data BoardMoves = None | Pos | Zed | Neg
8c67e6e7c999ad380dc536eef5d3ce20
  movePegs ::
    (PegBoard.Coord, PegBoard.Coord, PegBoard.Coord)
    -> PegBoard.Board -> PegBoard.Board
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U)))><S,1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (PegBoard.Coord, PegBoard.Coord, PegBoard.Coord))
                   (w1 :: PegBoard.Board) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case w1 of ww4 { PegBoard.Board ww5 ww6 ->
                 case PegBoardMove.$wmovePegs
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6 of ww7 { (#,#) ww8 ww9 ->
                 PegBoard.Board ww8 ww9 } } }) -}
8b5a294154099ee787a74619483d47ad
  movePegsAll ::
    [(PegBoard.Coord, PegBoard.Coord, PegBoard.Coord)]
    -> PegBoard.Board -> [PegBoard.Board]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U,U)>,
     Unfolding: (\ (mvs :: [(PegBoard.Coord, PegBoard.Coord,
                             PegBoard.Coord)])
                   (b :: PegBoard.Board) ->
                 letrec {
                   go4 :: [(PegBoard.Coord, PegBoard.Coord, PegBoard.Coord)]
                          -> [PegBoard.Board]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(PegBoard.Coord, PegBoard.Coord, PegBoard.Coord)]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ PegBoard.Board
                       : y ys
                       -> GHC.Types.:
                            @ PegBoard.Board
                            (PegBoardMove.movePegs y b)
                            (go4 ys) }
                 } in
                 go4 mvs) -}
4b71820c54a899108b1ac189b0f32fe7
  nextMoves ::
    PegBoard.Board
    -> [(PegBoard.Coord, PegBoard.Coord, PegBoard.Coord)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 PegBoardMove.$wnextMoves ww1 ww2 }) -}
instance [safe] GHC.Enum.Enum [PegBoardMove.BoardMoves]
  = PegBoardMove.$fEnumBoardMoves
instance [safe] GHC.Classes.Eq [PegBoardMove.BoardMoves]
  = PegBoardMove.$fEqBoardMoves
instance [safe] GHC.Show.Show [PegBoardMove.BoardMoves]
  = PegBoardMove.$fShowBoardMoves
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

