
==================== FINAL INTERFACE ====================
2016-11-06 21:48:21.380894 UTC

interface pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:PegBoardMove 8001
  interface hash: 91c1b583d385b4b7aa919e496aa5ec01
  ABI hash: 916e67d09fe4159a916059e4bcb4c825
  export-list hash: 7e04a0fdaca55b135f9b30999c563e9b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  PegBoardMove.movePegs
  PegBoardMove.movePegsAll
  PegBoardMove.nextMoves
  PegBoardMove.BoardMoves
module dependencies: CriticalPoints Helpers.Lists Helpers.Math
                     PegBoard Symmetries
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  Helpers.Lists 9c52ca015466111e8d572aeb56cfef86
  exports: 975c27250cc63b29bcdfa4d36e613251
  nPerms 7a59ca7f41d7481e845a6ad3b52e5c7d
import  -/  PegBoard 16e7d4772b49b52e123defa9df61cd8c
  exports: d9e5ef2267766e7ae3b457c51282f54d
  Board dd84e3e13f591df253c023fdeb6d0fac
  Board 88c3b97cf1f38c14492f474b5ab8ce85
  Coord da8073910dff9584368414866999997b
  Coord e848d92561720a4b1c6dee3cfa88409d
  addPeg adc7a7339ea353f667c839903f5f8771
  removePeg ea1cb54766fa6f4c220bfea2979e5c89
import  -/  Symmetries 7fb9a7b1bcbe991b68023121dbc5d406
  exports: f7bc392eb4f8e69204e2fc7af20ed002
  All 319793dcabe9d84016d0eca920411067
  Horizontal a4c540a6b3441766aa809c3642d1e290
  Negative e362422e5a624cab880f5fdba6668bb0
  Not cedbfabb741686509c8699e3d05e578d
  Positive 8309fe353bdcceb2e8f457a5ca4b8770
  Rotational 6c4a18b6ff341c4b8594452a2c33f2e4
  Symmetries 1ac38ad02047e86b966c05d03d7a5625
  findSymmetries cff7c08f90b3bf39202e844e1bfd0c2d
b2720b819eefa89ed11c6c2584cbda32
  $fEqBoardMoves :: GHC.Classes.Eq PegBoardMove.BoardMoves
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PegBoardMove.BoardMoves
                  PegBoardMove.$fEqBoardMoves_$c==
                  PegBoardMove.$fEqBoardMoves_$c/= -}
b2720b819eefa89ed11c6c2584cbda32
  $fEqBoardMoves_$c/= ::
    PegBoardMove.BoardMoves
    -> PegBoardMove.BoardMoves -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PegBoardMove.BoardMoves) (b :: PegBoardMove.BoardMoves) ->
                 case PegBoardMove.$fEqBoardMoves_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b2720b819eefa89ed11c6c2584cbda32
  $fEqBoardMoves_$c== ::
    PegBoardMove.BoardMoves
    -> PegBoardMove.BoardMoves -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
b2720b819eefa89ed11c6c2584cbda32
  $fShowBoardMoves :: GHC.Show.Show PegBoardMove.BoardMoves
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PegBoardMove.BoardMoves
                  PegBoardMove.$fShowBoardMoves_$cshowsPrec
                  PegBoardMove.$fShowBoardMoves_$cshow
                  PegBoardMove.$fShowBoardMoves_$cshowList -}
b2720b819eefa89ed11c6c2584cbda32
  $fShowBoardMoves1 :: PegBoardMove.BoardMoves -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (PegBoardMove.$fShowBoardMoves_$cshowsPrec
                   PegBoardMove.$fShowBoardMoves2) -}
b789246a6852bf76ca64e6234194a3ce
  $fShowBoardMoves2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b2720b819eefa89ed11c6c2584cbda32
  $fShowBoardMoves_$cshow ::
    PegBoardMove.BoardMoves -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoardMove.BoardMoves) ->
                 PegBoardMove.$fShowBoardMoves_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b2720b819eefa89ed11c6c2584cbda32
  $fShowBoardMoves_$cshowList ::
    [PegBoardMove.BoardMoves] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PegBoardMove.BoardMoves
                   PegBoardMove.$fShowBoardMoves1) -}
b2720b819eefa89ed11c6c2584cbda32
  $fShowBoardMoves_$cshowsPrec ::
    GHC.Types.Int -> PegBoardMove.BoardMoves -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
08009f898d7f81583979ba78b4c39653
  $tc'L :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3260947470999526047##
                   8725443339372319069##
                   PegBoardMove.$trModule
                   PegBoardMove.$tc'L1) -}
f6cc4d62a9534d86a698767671816e20
  $tc'L1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'L"#) -}
385029f18908560937b8dcae54254cd2
  $tc'Neg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13942882765082697268##
                   9762402212949452706##
                   PegBoardMove.$trModule
                   PegBoardMove.$tc'Neg1) -}
0bf25fbecc0f4c597dbda674432d726e
  $tc'Neg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Neg"#) -}
4831f604173a9e1cc88352940d32eabd
  $tc'None :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3455118300553954351##
                   4190504517268252656##
                   PegBoardMove.$trModule
                   PegBoardMove.$tc'None1) -}
c531dd2745f61524d3e65534e95a1cca
  $tc'None1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'None"#) -}
e942b386724b10126121a87b15bc09d0
  $tc'Pos :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8437159622990848200##
                   11939255582874761938##
                   PegBoardMove.$trModule
                   PegBoardMove.$tc'Pos1) -}
5d27dcc1a40e03c783d94a879f157db8
  $tc'Pos1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Pos"#) -}
ce1dec6a5b06ecec200fc747bd29bcec
  $tc'R :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15881927107818280482##
                   11620028343381680920##
                   PegBoardMove.$trModule
                   PegBoardMove.$tc'R1) -}
adfad8d6b5aa37e4dfe5619fce6de1a9
  $tc'R1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'R"#) -}
144a76264d2e694005f2caac1f9367a9
  $tc'Zed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12857181422883053992##
                   7642694225851070214##
                   PegBoardMove.$trModule
                   PegBoardMove.$tc'Zed1) -}
3e9795e0d675fe93686b7b5d376aa1c8
  $tc'Zed1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Zed"#) -}
a4819a69faf5f9ac3620d45d8eee2c4c
  $tcBoardMoves :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15054241050569823213##
                   13803728263179378492##
                   PegBoardMove.$trModule
                   PegBoardMove.$tcBoardMoves1) -}
18f1c1fc21151d606539a848d8d7c0c4
  $tcBoardMoves1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BoardMoves"#) -}
16cc86fa3a7e4a12c3d7781ff450efcf
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   PegBoardMove.$trModule2
                   PegBoardMove.$trModule1) -}
b23e9263479afbc0abce4732b0837ea2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PegBoardMove"#) -}
af4e7792e56c28afd31978ad268d22a6
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2"#) -}
2a458899d74f6d61a2cd4b577dc7a60a
  $wmovePegs ::
    PegBoard.Coord
    -> PegBoard.Coord
    -> PegBoard.Coord
    -> [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> (# [PegBoard.Coord], [PegBoard.Coord] #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U(U),U(U))><L,U(U(U),U(U))><L,U(U(U),U(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: PegBoard.Coord)
                   (ww1 :: PegBoard.Coord)
                   (ww2 :: PegBoard.Coord)
                   (ww3 :: [PegBoard.Coord])
                   (ww4 :: [PegBoard.Coord]) ->
                 case PegBoard.$waddPeg ww2 ww3 ww4 of ww5 { (#,#) ww6 ww7 ->
                 case PegBoard.$wremovePeg ww1 ww6 ww7 of ww8 { (#,#) ww9 ww10 ->
                 PegBoard.$wremovePeg ww ww9 ww10 } }) -}
62e4d343b71eebe639aadc5ab8f17905
  $wnextMoves ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoardMove.CoordTriple]
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
b2720b819eefa89ed11c6c2584cbda32
  data BoardMoves
    = None
    | Pos
    | Zed
    | Neg
    | L PegBoardMove.BoardMoves
    | R PegBoardMove.BoardMoves
197c66bdc421493b73c719a69b8086ea
  type CoordTriple = (PegBoard.Coord, PegBoard.Coord, PegBoard.Coord)
3ec69a881cc19e43bb95efa347e6ec3a
  movePegs ::
    PegBoardMove.CoordTriple -> PegBoard.Board -> PegBoard.Board
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U(U(U),U(U)),U(U(U),U(U)),U(U(U),U(U)))><S,1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PegBoardMove.CoordTriple) (w1 :: PegBoard.Board) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case w1 of ww4 { PegBoard.Board ww5 ww6 ->
                 case PegBoardMove.$wmovePegs
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6 of ww7 { (#,#) ww8 ww9 ->
                 PegBoard.Board ww8 ww9 } } }) -}
23a649ff4a27edeaa206ba01e19b835d
  movePegsAll ::
    [PegBoardMove.CoordTriple] -> PegBoard.Board -> [PegBoard.Board]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U,U)>,
     Unfolding: (\ (mvs :: [PegBoardMove.CoordTriple])
                   (b :: PegBoard.Board) ->
                 letrec {
                   go :: [PegBoardMove.CoordTriple] -> [PegBoard.Board]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [PegBoardMove.CoordTriple]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ PegBoard.Board
                       : y ys
                       -> GHC.Types.:
                            @ PegBoard.Board
                            (PegBoardMove.movePegs y b)
                            (go ys) }
                 } in
                 go mvs) -}
57184a84fb1567c4c39a1494e7191738
  nextMoves :: PegBoard.Board -> [PegBoardMove.CoordTriple]
  {- Arity: 1, Strictness: <S,1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 PegBoardMove.$wnextMoves ww1 ww2 }) -}
instance [safe] GHC.Classes.Eq [PegBoardMove.BoardMoves]
  = PegBoardMove.$fEqBoardMoves
instance [safe] GHC.Show.Show [PegBoardMove.BoardMoves]
  = PegBoardMove.$fShowBoardMoves
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

