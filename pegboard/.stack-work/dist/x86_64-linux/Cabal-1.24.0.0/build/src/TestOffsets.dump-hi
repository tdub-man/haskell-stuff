
==================== FINAL INTERFACE ====================
2016-09-28 05:19:04.248785 UTC

interface pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:TestOffsets 8001
  interface hash: 1e75151321cd7fbdaac686c3fdb33708
  ABI hash: 3ac54f29a5ba43972c65b136287289db
  export-list hash: fd0532a1426392b69146bf2968d4854e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  TestOffsets.offset
  TestOffsets.offsetF
  TestOffsets.Pair{TestOffsets.Pair}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
da8fc9e5dda590bb985a0d426064cc5b
  $fEqPair :: GHC.Classes.Eq TestOffsets.Pair
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TestOffsets.Pair
                  TestOffsets.$fEqPair_$c==
                  TestOffsets.$fEqPair_$c/= -}
da8fc9e5dda590bb985a0d426064cc5b
  $fEqPair_$c/= ::
    TestOffsets.Pair -> TestOffsets.Pair -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: TestOffsets.Pair) (w1 :: TestOffsets.Pair) ->
                 case w of ww { TestOffsets.Pair ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.F# ww4 ->
                 case w1 of ww5 { TestOffsets.Pair ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.F# ww9 ->
                 TestOffsets.$w$c/= ww4 ww2 ww9 ww7 } } } }) -}
da8fc9e5dda590bb985a0d426064cc5b
  $fEqPair_$c== ::
    TestOffsets.Pair -> TestOffsets.Pair -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: TestOffsets.Pair) (w1 :: TestOffsets.Pair) ->
                 case w of ww { TestOffsets.Pair ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.F# ww4 ->
                 case w1 of ww5 { TestOffsets.Pair ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.F# ww9 ->
                 TestOffsets.$w$c== ww4 ww2 ww9 ww7 } } } }) -}
da8fc9e5dda590bb985a0d426064cc5b
  $fShowPair :: GHC.Show.Show TestOffsets.Pair
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TestOffsets.Pair
                  TestOffsets.$fShowPair_$cshowsPrec
                  TestOffsets.$fShowPair_$cshow
                  TestOffsets.$fShowPair_$cshowList -}
da8fc9e5dda590bb985a0d426064cc5b
  $fShowPair1 :: TestOffsets.Pair -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: TestOffsets.Pair) ->
                 case w of ww { TestOffsets.Pair ww1 ww2 ->
                 TestOffsets.$w$cshowsPrec 0# ww1 ww2 }) -}
ac776574941e6d75dd10f24e8b6644b2
  $fShowPair2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Pair "#) -}
588ad79de6766f2b19973f83ba276082
  $fShowPair3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
da8fc9e5dda590bb985a0d426064cc5b
  $fShowPair_$cshow :: TestOffsets.Pair -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TestOffsets.Pair) ->
                 TestOffsets.$fShowPair_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
da8fc9e5dda590bb985a0d426064cc5b
  $fShowPair_$cshowList :: [TestOffsets.Pair] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TestOffsets.Pair
                   TestOffsets.$fShowPair1) -}
da8fc9e5dda590bb985a0d426064cc5b
  $fShowPair_$cshowsPrec ::
    GHC.Types.Int -> TestOffsets.Pair -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: TestOffsets.Pair) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { TestOffsets.Pair ww3 ww4 ->
                 TestOffsets.$w$cshowsPrec ww1 ww3 ww4 } }) -}
a993bf50114ea8da8983b79d488586c4
  $tc'Pair :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6890710167258157373##
                   17378551182606665599##
                   TestOffsets.$trModule
                   TestOffsets.$tc'Pair1) -}
1278fe02b930e7ff0a1473ce70693b1f
  $tc'Pair1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Pair"#) -}
c29125fcb90158a5da10fe6cca5dfe5a
  $tcPair :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2402290622483945174##
                   3700430870867674196##
                   TestOffsets.$trModule
                   TestOffsets.$tcPair1) -}
5fe728b253ce8b36136eb6047be6ea18
  $tcPair1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Pair"#) -}
28e58550735d4742b3cdc0a87c1127b5
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TestOffsets.$trModule2
                   TestOffsets.$trModule1) -}
f04accd629fe994e7fdd63fb696a8efa
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TestOffsets"#) -}
e40303ee92aaa902995a1f5b5ae7db42
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2"#) -}
427d01c8ba85e5a60d418232da35b52a
  $w$c/= ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: GHC.Prim.Float#)
                   (ww3 :: GHC.Types.Float) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.F# x ->
                      case ww3 of wild2 { GHC.Types.F# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
a8640b20db1f2652eaf6ee6eb79fe7d5
  $w$c== ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: GHC.Prim.Float#)
                   (ww3 :: GHC.Types.Float) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.eqFloat ww1 ww3 }) -}
c265c7ef2a183a1ed36599d6132ed59f
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Float -> GHC.Types.Float -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: GHC.Types.Float) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { GHC.Types.F# ww4 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat_$sshowFloat
                       TestOffsets.$fShowPair3
                       ww4 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.F# ww4 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat_$sshowFloat
                       TestOffsets.$fShowPair3
                       ww4 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        TestOffsets.$fShowPair2
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           TestOffsets.$fShowPair2
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x))))) }) -}
da8fc9e5dda590bb985a0d426064cc5b
  data Pair = Pair GHC.Types.Float GHC.Types.Float
9b2b7e3a0c49cc975504e28fe769e6da
  offset ::
    GHC.Types.Float
    -> GHC.Types.Float -> [TestOffsets.Pair] -> [TestOffsets.Pair]
  {- Arity: 3, Strictness: <L,U(U)><L,U(U)><S,1*U>,
     Unfolding: (\ (x :: GHC.Types.Float)
                   (y :: GHC.Types.Float)
                   (ps :: [TestOffsets.Pair]) ->
                 TestOffsets.offset_go
                   ps
                   (case GHC.Real.$wnumericEnumFrom
                           @ GHC.Types.Float
                           GHC.Float.$fFractionalFloat
                           TestOffsets.offset1 of ww { (#,#) ww1 ww2 ->
                    letrec {
                      go :: [GHC.Types.Float]
                            -> [GHC.Types.Float] -> [(GHC.Types.Float, GHC.Types.Float)]
                        {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                      = \ (ds :: [GHC.Types.Float]) (eta :: [GHC.Types.Float]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ (GHC.Types.Float, GHC.Types.Float)
                          : y1 ys
                          -> case eta of wild1 {
                               [] -> GHC.Types.[] @ (GHC.Types.Float, GHC.Types.Float)
                               : y2 ys1
                               -> GHC.Types.:
                                    @ (GHC.Types.Float, GHC.Types.Float)
                                    (case y1 of wild2 { GHC.Types.F# x1 ->
                                     case x of wild3 { GHC.Types.F# y3 ->
                                     GHC.Types.F# (GHC.Prim.timesFloat# x1 y3) } },
                                     y2)
                                    (go ys ys1) } }
                    } in
                    go
                      (GHC.Types.: @ GHC.Types.Float ww1 ww2)
                      (GHC.Base.map
                         @ GHC.Types.Float
                         @ GHC.Types.Float
                         (\ (ds :: GHC.Types.Float) -> GHC.Float.timesFloat ds y)
                         (GHC.Types.: @ GHC.Types.Float ww1 ww2)) })) -}
476988ecfb31b288d9206f6a1b43600f
  offset1 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# 1.0#) -}
7b112b86a8bbee64595c3f666666be0e
  offsetF ::
    GHC.Real.Integral a =>
    (a -> GHC.Types.Float)
    -> (a -> GHC.Types.Float)
    -> [TestOffsets.Pair]
    -> [TestOffsets.Pair]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(1*U,1*U,A,A,A,A,A,A,A)><L,C(U)><L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dIntegral :: GHC.Real.Integral a)
                   (eta :: a -> GHC.Types.Float)
                   (eta1 :: a -> GHC.Types.Float)
                   (eta2 :: [TestOffsets.Pair]) ->
                 TestOffsets.offsetF_go
                   eta2
                   (let {
                      $dEnum :: GHC.Enum.Enum a = GHC.Real.$p2Integral @ a $dIntegral
                    } in
                    let {
                      $dReal :: GHC.Real.Real a = GHC.Real.$p1Integral @ a $dIntegral
                    } in
                    let {
                      $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dReal
                    } in
                    letrec {
                      go :: [a]
                            -> [GHC.Types.Float] -> [(GHC.Types.Float, GHC.Types.Float)]
                        {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                      = \ (ds :: [a]) (eta3 :: [GHC.Types.Float]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ (GHC.Types.Float, GHC.Types.Float)
                          : y ys
                          -> case eta3 of wild1 {
                               [] -> GHC.Types.[] @ (GHC.Types.Float, GHC.Types.Float)
                               : y1 ys1
                               -> GHC.Types.:
                                    @ (GHC.Types.Float, GHC.Types.Float)
                                    (eta y, y1)
                                    (go ys ys1) } }
                    } in
                    go
                      (GHC.Enum.enumFrom
                         @ a
                         $dEnum
                         (GHC.Num.fromInteger @ a $dNum TestOffsets.offsetF1))
                      (GHC.Base.map
                         @ a
                         @ GHC.Types.Float
                         eta1
                         (GHC.Enum.enumFrom
                            @ a
                            $dEnum
                            (GHC.Num.fromInteger @ a $dNum TestOffsets.offsetF1))))) -}
797f29776192f270aea1bab6c931ee93
  offsetF1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
5d63a0f131a8bdc80130f1bb6ac086a8
  offsetF_go ::
    [TestOffsets.Pair]
    -> [(GHC.Types.Float, GHC.Types.Float)] -> [TestOffsets.Pair]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
a3bf251e07d52accb390e6fa13ef9e25
  offset_go ::
    [TestOffsets.Pair]
    -> [(GHC.Types.Float, GHC.Types.Float)] -> [TestOffsets.Pair]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
instance [safe] GHC.Classes.Eq [TestOffsets.Pair]
  = TestOffsets.$fEqPair
instance [safe] GHC.Show.Show [TestOffsets.Pair]
  = TestOffsets.$fShowPair
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

