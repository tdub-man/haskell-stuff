
==================== FINAL INTERFACE ====================
2016-11-06 21:48:21.078606 UTC

interface pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Symmetries 8001
  interface hash: 7e4d87c1e56664ab1369b712f2cf37a4
  ABI hash: 7fb9a7b1bcbe991b68023121dbc5d406
  export-list hash: f7bc392eb4f8e69204e2fc7af20ed002
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Symmetries.boardEquals
  Symmetries.clockRotate
  Symmetries.counterClockRotate
  Symmetries.findSymmetries
  Symmetries.negFlip
  Symmetries.negSymmetric
  Symmetries.posFlip
  Symmetries.posSymmetric
  Symmetries.rotSymmetric
  Symmetries.zedFlip
  Symmetries.zedSymmetric
  Symmetries.Symmetries{Symmetries.All Symmetries.Horizontal Symmetries.Negative Symmetries.Not Symmetries.Positive Symmetries.Rotational}
module dependencies: CriticalPoints Helpers.Lists Helpers.Math
                     PegBoard
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  CriticalPoints 84f450c5d723c42b7e1981428257d307
  exports: c2877d10d1df7ea97aa94d67af9503b6
  BoolRow 5116470cb4e14d8837d507287f8c4bce
  bottomRowBR' e9a27b72cafd97784295d2b76364e9d5
  brCoord aac28ec51ce7da9c71584a8de082e423
  concentricTrianglesExclusive bbdab47f332dcf0be8f2394fb76e2d3d
  rowsN 268bea015779291b9597aae34b6fadfc
  rowsP e9fea0f178166098cb8ed0537b4091f0
  rowsZ 512e72f69f168ef893e22280332281d5
  topLeftRowBR' 253588568ff4a6394d3f680209df754b
  topRightRowBR' 6910bd66af029fcbee1ffb677d2b8d07
import  -/  Helpers.Lists 9c52ca015466111e8d572aeb56cfef86
  exports: 975c27250cc63b29bcdfa4d36e613251
import  -/  PegBoard 16e7d4772b49b52e123defa9df61cd8c
  exports: d9e5ef2267766e7ae3b457c51282f54d
  Board dd84e3e13f591df253c023fdeb6d0fac
  Board 88c3b97cf1f38c14492f474b5ab8ce85
  Coord da8073910dff9584368414866999997b
  Coord e848d92561720a4b1c6dee3cfa88409d
1ac38ad02047e86b966c05d03d7a5625
  $fEqSymmetries :: GHC.Classes.Eq Symmetries.Symmetries
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Symmetries.Symmetries
                  Symmetries.$fEqSymmetries_$c==
                  Symmetries.$fEqSymmetries_$c/= -}
1ac38ad02047e86b966c05d03d7a5625
  $fEqSymmetries_$c/= ::
    Symmetries.Symmetries -> Symmetries.Symmetries -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Symmetries.Symmetries)
                   (b :: Symmetries.Symmetries) ->
                 case a of wild {
                   Symmetries.Positive
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Symmetries.Positive -> GHC.Types.False }
                   Symmetries.Horizontal
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Symmetries.Horizontal -> GHC.Types.False }
                   Symmetries.Negative
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Symmetries.Negative -> GHC.Types.False }
                   Symmetries.Rotational
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Symmetries.Rotational -> GHC.Types.False }
                   Symmetries.Not
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Symmetries.Not -> GHC.Types.False }
                   Symmetries.All
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Symmetries.All -> GHC.Types.False } }) -}
1ac38ad02047e86b966c05d03d7a5625
  $fEqSymmetries_$c== ::
    Symmetries.Symmetries -> Symmetries.Symmetries -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Symmetries.Symmetries)
                   (ds1 :: Symmetries.Symmetries) ->
                 case ds of wild {
                   Symmetries.Positive
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Symmetries.Positive -> GHC.Types.True }
                   Symmetries.Horizontal
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Symmetries.Horizontal -> GHC.Types.True }
                   Symmetries.Negative
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Symmetries.Negative -> GHC.Types.True }
                   Symmetries.Rotational
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Symmetries.Rotational -> GHC.Types.True }
                   Symmetries.Not
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Symmetries.Not -> GHC.Types.True }
                   Symmetries.All
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Symmetries.All -> GHC.Types.True } }) -}
1ac38ad02047e86b966c05d03d7a5625
  $fShowSymmetries :: GHC.Show.Show Symmetries.Symmetries
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Symmetries.Symmetries
                  Symmetries.$fShowSymmetries_$cshowsPrec
                  Symmetries.$fShowSymmetries_$cshow
                  Symmetries.$fShowSymmetries_$cshowList -}
9fb6d268388a331907a913024303fe34
  $fShowSymmetries1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "All"#) -}
f1679f1afd63976c90fe18d98c6bafe2
  $fShowSymmetries2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Not"#) -}
d2ef4a82227e123e1e421391357ae378
  $fShowSymmetries3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Rotational"#) -}
57f53a0d881b8f234cec6db6931042be
  $fShowSymmetries4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Negative"#) -}
902f506ac3fda9c235d316d9ae16f5d3
  $fShowSymmetries5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Horizontal"#) -}
8934df41793419b8bfb00040936723ad
  $fShowSymmetries6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Positive"#) -}
1ac38ad02047e86b966c05d03d7a5625
  $fShowSymmetries_$cshow :: Symmetries.Symmetries -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Symmetries.Symmetries) ->
                 Symmetries.$fShowSymmetries_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1ac38ad02047e86b966c05d03d7a5625
  $fShowSymmetries_$cshowList ::
    [Symmetries.Symmetries] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Symmetries.Symmetries
                   Symmetries.$w$cshowsPrec) -}
1ac38ad02047e86b966c05d03d7a5625
  $fShowSymmetries_$cshowsPrec ::
    GHC.Types.Int -> Symmetries.Symmetries -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Symmetries.Symmetries)
                   (w2 :: GHC.Base.String) ->
                 Symmetries.$w$cshowsPrec w1 w2) -}
a756292dd27108caffdeacc5d9f63d96
  $tc'All :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12763484656807016615##
                   11785679382755413767##
                   Symmetries.$trModule
                   Symmetries.$tc'All1) -}
8e790529c019f87b408cbd246a2e01e5
  $tc'All1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'All"#) -}
3499a6ce0cd2e4a2249a2e84d1d95a24
  $tc'Horizontal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1247867082036804003##
                   7421588153250848080##
                   Symmetries.$trModule
                   Symmetries.$tc'Horizontal1) -}
9c9e9d108ae788682a259946fff6a539
  $tc'Horizontal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Horizontal"#) -}
f16de9dfd2a5e91f75a474f3c3b33f39
  $tc'Negative :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17235058719149911408##
                   14073472057471769598##
                   Symmetries.$trModule
                   Symmetries.$tc'Negative1) -}
e4b8762db10cd740cbf18027d4979a4c
  $tc'Negative1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Negative"#) -}
4a06d66f15ddf98f33653bcf56c0ea41
  $tc'Not :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6227956210802228401##
                   3823174137688740503##
                   Symmetries.$trModule
                   Symmetries.$tc'Not1) -}
314672151703b5d3eef1eaf1b6b8a577
  $tc'Not1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Not"#) -}
26878c0201ebce3877ce70f9cf5f5e1a
  $tc'Positive :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3913941090723323543##
                   14268862197761065889##
                   Symmetries.$trModule
                   Symmetries.$tc'Positive1) -}
ee10dd3f0b8b34f4f58dc9ead4ef10d1
  $tc'Positive1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Positive"#) -}
76231a525e2102c4001fc43f6267f92e
  $tc'Rotational :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1382465857622959344##
                   13052487867632220216##
                   Symmetries.$trModule
                   Symmetries.$tc'Rotational1) -}
6d2c01a9fe6d2388c334a7cee71946b1
  $tc'Rotational1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Rotational"#) -}
5208194262589b217ce0fd278da314ea
  $tcSymmetries :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5891910722990328370##
                   12604077837480834675##
                   Symmetries.$trModule
                   Symmetries.$trModule1) -}
0d4b5668eba1e77775d333fdfdc55a8a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Symmetries.$trModule2
                   Symmetries.$trModule1) -}
8e7c2651a55302fd998d8b2ff598330c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Symmetries"#) -}
e45b5cb6cf25c0cb8626bcc96d6d840f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2"#) -}
1ac38ad02047e86b966c05d03d7a5625
  $w$cshowsPrec ::
    Symmetries.Symmetries -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Symmetries.Symmetries)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Symmetries.Positive
                   -> GHC.Base.++ @ GHC.Types.Char Symmetries.$fShowSymmetries6 w1
                   Symmetries.Horizontal
                   -> GHC.Base.++ @ GHC.Types.Char Symmetries.$fShowSymmetries5 w1
                   Symmetries.Negative
                   -> GHC.Base.++ @ GHC.Types.Char Symmetries.$fShowSymmetries4 w1
                   Symmetries.Rotational
                   -> GHC.Base.++ @ GHC.Types.Char Symmetries.$fShowSymmetries3 w1
                   Symmetries.Not
                   -> GHC.Base.++ @ GHC.Types.Char Symmetries.$fShowSymmetries2 w1
                   Symmetries.All
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Symmetries.$fShowSymmetries1
                        w1 }) -}
b669053f028ecb29a865bcafee2288d7
  $wboardEquals ::
    [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord])
                   (ww1 :: [PegBoard.Coord])
                   (ww2 :: [PegBoard.Coord])
                   (ww3 :: [PegBoard.Coord]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy @ PegBoard.Coord PegBoard.compareZ ww)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.compareZ
                           ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy @ PegBoard.Coord PegBoard.compareZ ww1)
                        (Data.OldList.sortBy @ PegBoard.Coord PegBoard.compareZ ww3) }) -}
15b15a89805a067a7eb4ab8adc281657
  $wclockRotate ::
    PegBoard.Board -> (# [PegBoard.Coord], [PegBoard.Coord] #)
  {- Arity: 1, Strictness: <L,1*U(U,U)>, Inline: [0],
     Unfolding: (\ (w :: PegBoard.Board) ->
                 let {
                   concs :: [PegBoard.Board]
                   = case w of ww { PegBoard.Board ww1 ww2 ->
                     case CriticalPoints.$wconcentricTriangles'
                            ww1
                            ww2
                            (GHC.Types.[] @ PegBoard.Board) of ww3 { (#,#) ww4 ww5 ->
                     ww5 } }
                 } in
                 case GHC.Base.map
                        @ PegBoard.Board
                        @ PegBoard.Board
                        Symmetries.rotateRing
                        (GHC.Types.:
                           @ PegBoard.Board
                           (case concs of wild {
                              [] -> GHC.List.badHead @ PegBoard.Board : x ds1 -> x })
                           (Helpers.Lists.compMapR
                              @ PegBoard.Board
                              @ PegBoard.Board
                              CriticalPoints.concentricTrianglesExclusive1
                              concs)) of wild {
                   []
                   -> case GHC.List.foldl2
                      ret_ty (# [PegBoard.Coord], [PegBoard.Coord] #)
                      of {}
                   : x xs
                   -> case x of ww { PegBoard.Board ww1 ww2 ->
                      Symmetries.$wgo xs ww1 ww2 } }) -}
dc39ece2b01564df26da92541ff17569
  $wfindSymmetries ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> Symmetries.Symmetries
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   r :: [Symmetries.Symmetries]
                   = case Symmetries.$wnegSymmetric ww ww1 of wild {
                       DEFAULT
                       -> GHC.Types.:
                            @ Symmetries.Symmetries
                            wild
                            (case Symmetries.$wrotSymmetric ww ww1 of wild1 {
                               DEFAULT
                               -> GHC.Types.:
                                    @ Symmetries.Symmetries
                                    wild1
                                    (GHC.Types.[] @ Symmetries.Symmetries)
                               Symmetries.Not -> GHC.Types.[] @ Symmetries.Symmetries })
                       Symmetries.Not
                       -> case Symmetries.$wrotSymmetric ww ww1 of wild1 {
                            DEFAULT
                            -> GHC.Types.:
                                 @ Symmetries.Symmetries
                                 wild1
                                 (GHC.Types.[] @ Symmetries.Symmetries)
                            Symmetries.Not -> GHC.Types.[] @ Symmetries.Symmetries } }
                 } in
                 case Symmetries.$wposSymmetric ww ww1 of wild {
                   DEFAULT
                   -> case Symmetries.$wzedSymmetric ww ww1 of wild1 {
                        DEFAULT
                        -> case wild of wild2 {
                             DEFAULT -> Symmetries.findSymmetries2
                             Symmetries.Positive
                             -> case wild1 of wild3 {
                                  DEFAULT -> Symmetries.findSymmetries2
                                  Symmetries.Horizontal
                                  -> case r of wild4 {
                                       [] -> Symmetries.findSymmetries2
                                       : ds ds1
                                       -> case ds of wild5 {
                                            DEFAULT -> Symmetries.findSymmetries2
                                            Symmetries.Negative
                                            -> case ds1 of wild6 {
                                                 [] -> Symmetries.findSymmetries2
                                                 : ds2 ds3
                                                 -> case ds2 of wild7 {
                                                      DEFAULT -> Symmetries.findSymmetries2
                                                      Symmetries.Rotational
                                                      -> case ds3 of wild8 {
                                                           [] -> Symmetries.All
                                                           : ipv ipv1
                                                           -> Symmetries.findSymmetries2 } } } } } } }
                        Symmetries.Not -> Symmetries.findSymmetries1 wild r }
                   Symmetries.Not
                   -> case Symmetries.$wzedSymmetric ww ww1 of wild1 {
                        DEFAULT -> Symmetries.findSymmetries1 wild1 r
                        Symmetries.Not
                        -> case r of wild2 {
                             [] -> Symmetries.Not
                             : x ds -> Symmetries.findSymmetries1 x ds } } }) -}
8df32b5511d9e763d85b8d60baecd026
  $wgo ::
    [PegBoard.Board]
    -> [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> (# [PegBoard.Coord], [PegBoard.Coord] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U>,
     Inline: [0] -}
0c4bfaf13e5e26f781e7da8889d7f8c9
  $wnegSymmetric ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> Symmetries.Symmetries
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   w :: [CriticalPoints.BoolRow]
                   = Helpers.Lists.groupWithNs
                       @ (PegBoard.Coord, GHC.Types.Bool)
                       (Data.OldList.sortBy
                          @ (PegBoard.Coord, GHC.Types.Bool)
                          CriticalPoints.rowsP1
                          (CriticalPoints.$wtoBoolRow ww ww1))
                       PegBoard.groupTri1
                 } in
                 let {
                   newCoords :: [(PegBoard.Coord, GHC.Types.Bool)]
                   = Symmetries.findSymmetries_go2
                       w
                       (GHC.Base.map
                          @ [(PegBoard.Coord, GHC.Types.Bool)]
                          @ [(PegBoard.Coord, GHC.Types.Bool)]
                          (GHC.List.reverse @ (PegBoard.Coord, GHC.Types.Bool))
                          w)
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy @ PegBoard.Coord PegBoard.compareZ ww)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.compareZ
                           (Symmetries.findSymmetries_go1 newCoords)) of wild {
                   GHC.Types.False -> Symmetries.Not
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ PegBoard.Coord
                             PegBoard.$fEqCoord
                             (Data.OldList.sortBy @ PegBoard.Coord PegBoard.compareZ ww1)
                             (Data.OldList.sortBy
                                @ PegBoard.Coord
                                PegBoard.compareZ
                                (Symmetries.findSymmetries_go newCoords)) of wild1 {
                        GHC.Types.False -> Symmetries.Not
                        GHC.Types.True -> Symmetries.Negative } }) -}
de7ed75760a0cb7237fd1b66c488e94d
  $wposSymmetric ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> Symmetries.Symmetries
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   w :: [CriticalPoints.BoolRow]
                   = Helpers.Lists.groupWithNs
                       @ (PegBoard.Coord, GHC.Types.Bool)
                       (Data.OldList.sortBy
                          @ (PegBoard.Coord, GHC.Types.Bool)
                          CriticalPoints.rowsN1
                          (CriticalPoints.$wtoBoolRow ww ww1))
                       PegBoard.groupTri1
                 } in
                 let {
                   newCoords :: [(PegBoard.Coord, GHC.Types.Bool)]
                   = Symmetries.findSymmetries_go2
                       w
                       (GHC.Base.map
                          @ [(PegBoard.Coord, GHC.Types.Bool)]
                          @ [(PegBoard.Coord, GHC.Types.Bool)]
                          (GHC.List.reverse @ (PegBoard.Coord, GHC.Types.Bool))
                          w)
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy @ PegBoard.Coord PegBoard.compareZ ww)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.compareZ
                           (Symmetries.findSymmetries_go1 newCoords)) of wild {
                   GHC.Types.False -> Symmetries.Not
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ PegBoard.Coord
                             PegBoard.$fEqCoord
                             (Data.OldList.sortBy @ PegBoard.Coord PegBoard.compareZ ww1)
                             (Data.OldList.sortBy
                                @ PegBoard.Coord
                                PegBoard.compareZ
                                (Symmetries.findSymmetries_go newCoords)) of wild1 {
                        GHC.Types.False -> Symmetries.Not
                        GHC.Types.True -> Symmetries.Positive } }) -}
4318dd199d7c66872b9e0ea7716c1035
  $wrotSymmetric ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> Symmetries.Symmetries
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 case Symmetries.$wclockRotate
                        (PegBoard.Board ww ww1) of ww2 { (#,#) ww3 ww4 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy @ PegBoard.Coord PegBoard.compareZ ww)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.compareZ
                           ww3) of wild {
                   GHC.Types.False -> Symmetries.Not
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ PegBoard.Coord
                             PegBoard.$fEqCoord
                             (Data.OldList.sortBy @ PegBoard.Coord PegBoard.compareZ ww1)
                             (Data.OldList.sortBy
                                @ PegBoard.Coord
                                PegBoard.compareZ
                                ww4) of wild1 {
                        GHC.Types.False -> Symmetries.Not
                        GHC.Types.True -> Symmetries.Rotational } } }) -}
57ea5d0a2bedcb3024c118a0ab4a6a9b
  $wrotateRing ::
    PegBoard.Board -> (# [PegBoard.Coord], [PegBoard.Coord] #)
  {- Arity: 1, Strictness: <L,U(U,U)>, Inline: [0],
     Unfolding: (\ (w :: PegBoard.Board) ->
                 let {
                   allRows :: [(PegBoard.Coord, GHC.Types.Bool)]
                   = let {
                       ds :: [(PegBoard.Coord, GHC.Types.Bool)]
                       = GHC.List.reverse1
                           @ (PegBoard.Coord, GHC.Types.Bool)
                           (CriticalPoints.topRightRowBR' w)
                           (GHC.Types.[] @ (PegBoard.Coord, GHC.Types.Bool))
                     } in
                     let {
                       ds1 :: CriticalPoints.BoolRow
                       = case w of ww { PegBoard.Board ww1 ww2 ->
                         CriticalPoints.$wtopLeftRowBR' ww1 ww2 }
                     } in
                     let {
                       n :: [(PegBoard.Coord, GHC.Types.Bool)]
                       = let {
                           ds2 :: CriticalPoints.BoolRow
                           = CriticalPoints.bottomRowBR_go
                               (Data.OldList.groupBy
                                  @ (PegBoard.Coord, GHC.Types.Bool)
                                  CriticalPoints.boolRows2
                                  (Data.OldList.sortBy
                                     @ (PegBoard.Coord, GHC.Types.Bool)
                                     CriticalPoints.boolRows1
                                     (CriticalPoints.toBoolRow w)))
                               (GHC.List.lastError @ CriticalPoints.BoolRow)
                         } in
                         let {
                           n1 :: [(PegBoard.Coord, GHC.Types.Bool)]
                           = Symmetries.clockRotate_go2 ds1 ds2
                         } in
                         letrec {
                           go :: [(PegBoard.Coord, GHC.Types.Bool)]
                                 -> [(PegBoard.Coord, GHC.Types.Bool)]
                                 -> [(PegBoard.Coord, GHC.Types.Bool)]
                             {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                           = \ (ds3 :: [(PegBoard.Coord, GHC.Types.Bool)])
                               (eta :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                             case ds3 of wild {
                               [] -> n1
                               : y ys
                               -> case eta of wild1 {
                                    [] -> n1
                                    : y1 ys1
                                    -> GHC.Types.:
                                         @ (PegBoard.Coord, GHC.Types.Bool)
                                         (case y1 of wild2 { (,) ds4 p ->
                                          (case y of wild3 { (,) x ds5 -> x }, p) })
                                         (go ys ys1) } }
                         } in
                         go ds2 ds
                     } in
                     letrec {
                       go :: [(PegBoard.Coord, GHC.Types.Bool)]
                             -> [(PegBoard.Coord, GHC.Types.Bool)]
                             -> [(PegBoard.Coord, GHC.Types.Bool)]
                         {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                       = \ (ds2 :: [(PegBoard.Coord, GHC.Types.Bool)])
                           (eta :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                         case ds2 of wild {
                           [] -> n
                           : y ys
                           -> case eta of wild1 {
                                [] -> n
                                : y1 ys1
                                -> GHC.Types.:
                                     @ (PegBoard.Coord, GHC.Types.Bool)
                                     (case y1 of wild2 { (,) ds3 p ->
                                      (case y of wild3 { (,) x ds4 -> x }, p) })
                                     (go ys ys1) } }
                     } in
                     Data.OldList.nubBy
                       @ (PegBoard.Coord, GHC.Types.Bool)
                       Symmetries.clockRotate1
                       (go ds ds1)
                 } in
                 (# Symmetries.clockRotate_go1 allRows,
                    Symmetries.clockRotate_go allRows #)) -}
674e21f5d99b16732ee34d0700b02eb0
  $wzedSymmetric ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> Symmetries.Symmetries
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   w :: [CriticalPoints.BoolRow]
                   = Helpers.Lists.groupWithNs
                       @ (PegBoard.Coord, GHC.Types.Bool)
                       (Data.OldList.sortBy
                          @ (PegBoard.Coord, GHC.Types.Bool)
                          CriticalPoints.boolRows1
                          (CriticalPoints.$wtoBoolRow ww ww1))
                       PegBoard.groupTri1
                 } in
                 let {
                   newCoords :: [(PegBoard.Coord, GHC.Types.Bool)]
                   = Symmetries.findSymmetries_go2
                       w
                       (GHC.Base.map
                          @ [(PegBoard.Coord, GHC.Types.Bool)]
                          @ [(PegBoard.Coord, GHC.Types.Bool)]
                          (GHC.List.reverse @ (PegBoard.Coord, GHC.Types.Bool))
                          w)
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy @ PegBoard.Coord PegBoard.compareZ ww)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.compareZ
                           (Symmetries.findSymmetries_go1 newCoords)) of wild {
                   GHC.Types.False -> Symmetries.Not
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ PegBoard.Coord
                             PegBoard.$fEqCoord
                             (Data.OldList.sortBy @ PegBoard.Coord PegBoard.compareZ ww1)
                             (Data.OldList.sortBy
                                @ PegBoard.Coord
                                PegBoard.compareZ
                                (Symmetries.findSymmetries_go newCoords)) of wild1 {
                        GHC.Types.False -> Symmetries.Not
                        GHC.Types.True -> Symmetries.Horizontal } }) -}
1ac38ad02047e86b966c05d03d7a5625
  data Symmetries
    = Positive | Horizontal | Negative | Rotational | Not | All
1487255084ed63cf819536d6ed44ce2b
  boardEquals :: PegBoard.Board -> PegBoard.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PegBoard.Board) (w1 :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 case w1 of ww3 { PegBoard.Board ww4 ww5 ->
                 Symmetries.$wboardEquals ww1 ww2 ww4 ww5 } }) -}
242c5cf931a7856e62484a6fcf79acf5
  clockRotate :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, Strictness: <L,1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case Symmetries.$wclockRotate w of ww { (#,#) ww1 ww2 ->
                 PegBoard.Board ww1 ww2 }) -}
58eba629297054e138dce3c02d94920e
  clockRotate1 ::
    (PegBoard.Coord, GHC.Types.Bool)
    -> (PegBoard.Coord, GHC.Types.Bool) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),A)><S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (PegBoard.Coord, GHC.Types.Bool))
                   (w1 :: (PegBoard.Coord, GHC.Types.Bool)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { PegBoard.Coord ww4 ww5 ->
                 case ww4 of ww6 { GHC.Types.I# ww7 ->
                 case w1 of ww8 { (,) ww9 ww10 ->
                 case ww9 of ww11 { PegBoard.Coord ww12 ww13 ->
                 case ww12 of ww14 { GHC.Types.I# ww15 ->
                 PegBoard.$w$c==1 ww7 ww5 ww15 ww13 } } } } } }) -}
06e33a51d5f5740b4afafe0a1c33d938
  clockRotate_go ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a66603f50e7310bf25d7ed0c9619d4c8
  clockRotate_go1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0ca0d949b13641f7010e00fc42de5cf0
  clockRotate_go2 ::
    [(PegBoard.Coord, GHC.Types.Bool)]
    -> [(PegBoard.Coord, GHC.Types.Bool)]
    -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
28e4c47439b4de039d78dc0f4b20a72b
  counterClockRotate :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, Strictness: <L,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoard.Board) ->
                 Symmetries.clockRotate (Symmetries.clockRotate x)) -}
cff7c08f90b3bf39202e844e1bfd0c2d
  findSymmetries :: PegBoard.Board -> Symmetries.Symmetries
  {- Arity: 1, Strictness: <S(SL),U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 Symmetries.$wfindSymmetries ww1 ww2 }) -}
bbd46531ce1edee26537fa6cd556fce4
  findSymmetries1 ::
    Symmetries.Symmetries
    -> [Symmetries.Symmetries] -> Symmetries.Symmetries
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Symmetries.Symmetries)[OneShot]
                   (ds :: [Symmetries.Symmetries])[OneShot] ->
                 case ds of wild {
                   [] -> x
                   : ipv ipv1
                   -> case x of wild1 {
                        DEFAULT -> Symmetries.findSymmetries2
                        Symmetries.Positive
                        -> case ipv of wild2 {
                             DEFAULT -> Symmetries.findSymmetries2
                             Symmetries.Horizontal
                             -> case ipv1 of wild3 {
                                  [] -> Symmetries.findSymmetries2
                                  : ds1 ds2
                                  -> case ds1 of wild4 {
                                       DEFAULT -> Symmetries.findSymmetries2
                                       Symmetries.Negative
                                       -> case ds2 of wild5 {
                                            [] -> Symmetries.findSymmetries2
                                            : ds3 ds4
                                            -> case ds3 of wild6 {
                                                 DEFAULT -> Symmetries.findSymmetries2
                                                 Symmetries.Rotational
                                                 -> case ds4 of wild7 {
                                                      [] -> Symmetries.All
                                                      : ipv2 ipv3
                                                      -> Symmetries.findSymmetries2 } } } } } } } }) -}
6860a82f37296821b1d2b19eb3990da7
  findSymmetries2 :: Symmetries.Symmetries
  {- Strictness: x -}
d98cfafe57d1a5c94735ebff50de39ca
  findSymmetries_go ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
841366dcbead43f8d880aa2df0bd13a9
  findSymmetries_go1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
38be2aa6e133005e11d3eb5547d7be72
  findSymmetries_go2 ::
    [[(PegBoard.Coord, GHC.Types.Bool)]]
    -> [[(PegBoard.Coord, GHC.Types.Bool)]]
    -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
68de15bde86fadb3e6ce7710ad0d8e8e
  negFlip :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, Strictness: <L,1*U(1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoard.Board) ->
                 Symmetries.reverseBRs (CriticalPoints.rowsP x)) -}
f88aa9061389a9301cbb3a4f80e5648c
  negSymmetric :: PegBoard.Board -> Symmetries.Symmetries
  {- Arity: 1, Strictness: <S(SL),U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 Symmetries.$wnegSymmetric ww1 ww2 }) -}
f30acd64b431bd167db1b3fab48d36ca
  posFlip :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, Strictness: <L,1*U(1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoard.Board) ->
                 Symmetries.reverseBRs (CriticalPoints.rowsN x)) -}
707420db478f0bbe7e94829c08db72b5
  posSymmetric :: PegBoard.Board -> Symmetries.Symmetries
  {- Arity: 1, Strictness: <S(SL),U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 Symmetries.$wposSymmetric ww1 ww2 }) -}
f1592fd2213820abb329c1839f53e14e
  reverseBRs :: [CriticalPoints.BoolRow] -> PegBoard.Board
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [CriticalPoints.BoolRow]) ->
                 let {
                   newCoords :: [(PegBoard.Coord, GHC.Types.Bool)]
                   = Symmetries.findSymmetries_go2
                       w
                       (GHC.Base.map
                          @ [(PegBoard.Coord, GHC.Types.Bool)]
                          @ [(PegBoard.Coord, GHC.Types.Bool)]
                          (GHC.List.reverse @ (PegBoard.Coord, GHC.Types.Bool))
                          w)
                 } in
                 PegBoard.Board
                   (Symmetries.findSymmetries_go1 newCoords)
                   (Symmetries.findSymmetries_go newCoords)) -}
be23085b4b83ba93d70c53bb73a177d4
  rotSymmetric :: PegBoard.Board -> Symmetries.Symmetries
  {- Arity: 1, Strictness: <S(SL),U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 Symmetries.$wrotSymmetric ww1 ww2 }) -}
e3f5f26cf093fc5c6edbe9592b0fd9e4
  rotateRing :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, Strictness: <L,U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case Symmetries.$wrotateRing w of ww { (#,#) ww1 ww2 ->
                 PegBoard.Board ww1 ww2 }) -}
bd9c578122dcaec1fb3c2416c5431cae
  zedFlip :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, Strictness: <L,1*U(1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoard.Board) ->
                 Symmetries.reverseBRs (CriticalPoints.rowsZ x)) -}
b6d242d6959a1443ad8c80f2aa9de98c
  zedSymmetric :: PegBoard.Board -> Symmetries.Symmetries
  {- Arity: 1, Strictness: <S(SL),U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 Symmetries.$wzedSymmetric ww1 ww2 }) -}
instance [safe] GHC.Classes.Eq [Symmetries.Symmetries]
  = Symmetries.$fEqSymmetries
instance [safe] GHC.Show.Show [Symmetries.Symmetries]
  = Symmetries.$fShowSymmetries
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

