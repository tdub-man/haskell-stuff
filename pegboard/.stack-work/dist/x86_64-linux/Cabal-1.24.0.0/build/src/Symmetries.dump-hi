
==================== FINAL INTERFACE ====================
2016-10-28 16:55:57.780085 UTC

interface pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Symmetries 8001
  interface hash: ededef8b42ea7f0b2dcd96a4c9e6e2c7
  ABI hash: eb001928c9134585af2284196e971928
  export-list hash: a8247b520f11829dc3d3f60c48b33321
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Symmetries.boardEquals
  Symmetries.clockRotate
  Symmetries.counterClockRotate
  Symmetries.findSymmetries
  Symmetries.negFlip
  Symmetries.negSymmetric
  Symmetries.posFlip
  Symmetries.posSymmetric
  Symmetries.rotSymmetric
  Symmetries.zedFlip
  Symmetries.zedSymmetric
  Symmetries.Symmetries{Symmetries.Horizontal Symmetries.Negative Symmetries.Positive Symmetries.Rotational}
module dependencies: CriticalPoints Helpers.Lists Helpers.Math
                     PegBoard
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  CriticalPoints ffe5a558df80143db396001d5f3e4fc6
  exports: 80fdacf561ce6b6b953c62c7fe395c77
  bottomRow f5412bd123001861dcc56a39742d9fc5
  concentricTrianglesExclusive 284642022d08db4238d3541baaebe457
  rows 52d3cfd87ab7e7e8101ec0537a773da7
  topLeftRow 7e6f3d33e35735381208e49ea70bf193
  topRightRow 5ddaa7200fc50313d881edfa8c78d405
import  -/  Helpers.Lists 9c52ca015466111e8d572aeb56cfef86
  exports: 975c27250cc63b29bcdfa4d36e613251
import  -/  PegBoard f83d3917c805320b9d1eddcc14783c79
  exports: 019cb6a33f1bb6c7b9bb5da6116f70e8
  Board 811b281511fb95d934048eb55c0228c6
  Board c47801c17d6fbde18b84e473ce510507
  Coord a7a7404edac42fd75996faf0c0163f41
9d0a0017123cc75a9ea9725facd322b5
  $fEqSymmetries :: GHC.Classes.Eq Symmetries.Symmetries
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Symmetries.Symmetries
                  Symmetries.$fEqSymmetries_$c==
                  Symmetries.$fEqSymmetries_$c/= -}
9d0a0017123cc75a9ea9725facd322b5
  $fEqSymmetries_$c/= ::
    Symmetries.Symmetries -> Symmetries.Symmetries -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Symmetries.Symmetries)
                   (b :: Symmetries.Symmetries) ->
                 case a of wild {
                   Symmetries.Positive
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Symmetries.Positive -> GHC.Types.False }
                   Symmetries.Horizontal
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Symmetries.Horizontal -> GHC.Types.False }
                   Symmetries.Negative
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Symmetries.Negative -> GHC.Types.False }
                   Symmetries.Rotational
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Symmetries.Rotational -> GHC.Types.False }
                   Symmetries.Not
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Symmetries.Not -> GHC.Types.False } }) -}
9d0a0017123cc75a9ea9725facd322b5
  $fEqSymmetries_$c== ::
    Symmetries.Symmetries -> Symmetries.Symmetries -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Symmetries.Symmetries)
                   (ds1 :: Symmetries.Symmetries) ->
                 case ds of wild {
                   Symmetries.Positive
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Symmetries.Positive -> GHC.Types.True }
                   Symmetries.Horizontal
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Symmetries.Horizontal -> GHC.Types.True }
                   Symmetries.Negative
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Symmetries.Negative -> GHC.Types.True }
                   Symmetries.Rotational
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Symmetries.Rotational -> GHC.Types.True }
                   Symmetries.Not
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Symmetries.Not -> GHC.Types.True } }) -}
9d0a0017123cc75a9ea9725facd322b5
  $fShowSymmetries :: GHC.Show.Show Symmetries.Symmetries
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Symmetries.Symmetries
                  Symmetries.$fShowSymmetries_$cshowsPrec
                  Symmetries.$fShowSymmetries_$cshow
                  Symmetries.$fShowSymmetries_$cshowList -}
96c42bc020d53b5b97216883e5828a20
  $fShowSymmetries1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Not"#) -}
54a75cad0c391ba4ba214876b463bd5a
  $fShowSymmetries2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Rotational"#) -}
eda994d48848e57d797edabfc67a6779
  $fShowSymmetries3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Negative"#) -}
67f9033fda498564a2da6f735f21f48a
  $fShowSymmetries4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Horizontal"#) -}
74e98dc94caa6245e55ef0f9b1e8c924
  $fShowSymmetries5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Positive"#) -}
9d0a0017123cc75a9ea9725facd322b5
  $fShowSymmetries_$cshow :: Symmetries.Symmetries -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Symmetries.Symmetries) ->
                 Symmetries.$fShowSymmetries_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9d0a0017123cc75a9ea9725facd322b5
  $fShowSymmetries_$cshowList ::
    [Symmetries.Symmetries] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Symmetries.Symmetries
                   Symmetries.$w$cshowsPrec) -}
9d0a0017123cc75a9ea9725facd322b5
  $fShowSymmetries_$cshowsPrec ::
    GHC.Types.Int -> Symmetries.Symmetries -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Symmetries.Symmetries)
                   (w2 :: GHC.Base.String) ->
                 Symmetries.$w$cshowsPrec w1 w2) -}
3499a6ce0cd2e4a2249a2e84d1d95a24
  $tc'Horizontal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1247867082036804003##
                   7421588153250848080##
                   Symmetries.$trModule
                   Symmetries.$tc'Horizontal1) -}
9c9e9d108ae788682a259946fff6a539
  $tc'Horizontal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Horizontal"#) -}
f16de9dfd2a5e91f75a474f3c3b33f39
  $tc'Negative :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17235058719149911408##
                   14073472057471769598##
                   Symmetries.$trModule
                   Symmetries.$tc'Negative1) -}
e4b8762db10cd740cbf18027d4979a4c
  $tc'Negative1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Negative"#) -}
4a06d66f15ddf98f33653bcf56c0ea41
  $tc'Not :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6227956210802228401##
                   3823174137688740503##
                   Symmetries.$trModule
                   Symmetries.$tc'Not1) -}
314672151703b5d3eef1eaf1b6b8a577
  $tc'Not1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Not"#) -}
26878c0201ebce3877ce70f9cf5f5e1a
  $tc'Positive :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3913941090723323543##
                   14268862197761065889##
                   Symmetries.$trModule
                   Symmetries.$tc'Positive1) -}
ee10dd3f0b8b34f4f58dc9ead4ef10d1
  $tc'Positive1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Positive"#) -}
76231a525e2102c4001fc43f6267f92e
  $tc'Rotational :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1382465857622959344##
                   13052487867632220216##
                   Symmetries.$trModule
                   Symmetries.$tc'Rotational1) -}
6d2c01a9fe6d2388c334a7cee71946b1
  $tc'Rotational1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Rotational"#) -}
5208194262589b217ce0fd278da314ea
  $tcSymmetries :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5891910722990328370##
                   12604077837480834675##
                   Symmetries.$trModule
                   Symmetries.$trModule1) -}
0d4b5668eba1e77775d333fdfdc55a8a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Symmetries.$trModule2
                   Symmetries.$trModule1) -}
8e7c2651a55302fd998d8b2ff598330c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Symmetries"#) -}
e45b5cb6cf25c0cb8626bcc96d6d840f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2"#) -}
9d0a0017123cc75a9ea9725facd322b5
  $w$cshowsPrec ::
    Symmetries.Symmetries -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Symmetries.Symmetries)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Symmetries.Positive
                   -> GHC.Base.++ @ GHC.Types.Char Symmetries.$fShowSymmetries5 w1
                   Symmetries.Horizontal
                   -> GHC.Base.++ @ GHC.Types.Char Symmetries.$fShowSymmetries4 w1
                   Symmetries.Negative
                   -> GHC.Base.++ @ GHC.Types.Char Symmetries.$fShowSymmetries3 w1
                   Symmetries.Rotational
                   -> GHC.Base.++ @ GHC.Types.Char Symmetries.$fShowSymmetries2 w1
                   Symmetries.Not
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Symmetries.$fShowSymmetries1
                        w1 }) -}
2308ec50d1188094eadaba402d9b7a1e
  $wboardEquals ::
    [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord])
                   (ww1 :: [PegBoard.Coord])
                   (ww2 :: [PegBoard.Coord])
                   (ww3 :: [PegBoard.Coord]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           ww)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           ww1)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           ww3) }) -}
28e50b0c9be55505b19318e46c7bf95e
  $wclockRotate ::
    PegBoard.Board -> (# [PegBoard.Coord], [PegBoard.Coord] #)
  {- Arity: 1, Strictness: <L,1*U(U,U)>, Inline: [0],
     Unfolding: (\ (w :: PegBoard.Board) ->
                 let {
                   concs :: [PegBoard.Board]
                   = case w of ww { PegBoard.Board ww1 ww2 ->
                     case CriticalPoints.$wconcentricTriangles'
                            ww1
                            ww2
                            (GHC.Types.[] @ PegBoard.Board) of ww3 { (#,#) ww4 ww5 ->
                     ww5 } }
                 } in
                 case GHC.Base.map
                        @ PegBoard.Board
                        @ PegBoard.Board
                        Symmetries.clockRotate1
                        (GHC.Types.:
                           @ PegBoard.Board
                           (case concs of wild {
                              [] -> GHC.List.badHead @ PegBoard.Board : x ds1 -> x })
                           (Helpers.Lists.compMapR
                              @ PegBoard.Board
                              @ PegBoard.Board
                              CriticalPoints.concentricTrianglesExclusive1
                              concs)) of wild {
                   []
                   -> case GHC.List.foldl2
                      ret_ty (# [PegBoard.Coord], [PegBoard.Coord] #)
                      of {}
                   : x xs
                   -> case x of ww { PegBoard.Board ww1 ww2 ->
                      Symmetries.$wgo xs ww1 ww2 } }) -}
d7b0ce8a2f8d681c181d6b8c5d5b0024
  $wfindSymmetries ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [Symmetries.Symmetries]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   r :: [Symmetries.Symmetries]
                   = case Symmetries.$wnegSymmetric ww ww1 of wild {
                       DEFAULT
                       -> GHC.Types.:
                            @ Symmetries.Symmetries
                            wild
                            (case Symmetries.$wrotSymmetric ww ww1 of wild1 {
                               DEFAULT
                               -> GHC.Types.:
                                    @ Symmetries.Symmetries
                                    wild1
                                    (GHC.Types.[] @ Symmetries.Symmetries)
                               Symmetries.Not -> GHC.Types.[] @ Symmetries.Symmetries })
                       Symmetries.Not
                       -> case Symmetries.$wrotSymmetric ww ww1 of wild1 {
                            DEFAULT
                            -> GHC.Types.:
                                 @ Symmetries.Symmetries
                                 wild1
                                 (GHC.Types.[] @ Symmetries.Symmetries)
                            Symmetries.Not -> GHC.Types.[] @ Symmetries.Symmetries } }
                 } in
                 case Symmetries.$wposSymmetric ww ww1 of wild {
                   DEFAULT
                   -> GHC.Types.:
                        @ Symmetries.Symmetries
                        wild
                        (case Symmetries.$wzedSymmetric ww ww1 of wild1 {
                           DEFAULT -> GHC.Types.: @ Symmetries.Symmetries wild1 r
                           Symmetries.Not -> r })
                   Symmetries.Not
                   -> case Symmetries.$wzedSymmetric ww ww1 of wild1 {
                        DEFAULT -> GHC.Types.: @ Symmetries.Symmetries wild1 r
                        Symmetries.Not -> r } }) -}
fa3f24a7f1aee14bbbd8347de487a593
  $wgo ::
    [PegBoard.Board]
    -> [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> (# [PegBoard.Coord], [PegBoard.Coord] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U>,
     Inline: [0] -}
6bfcf0dfb596275f7dc33727015143dc
  $wlvl ::
    [PegBoard.Coord]
    -> [PegBoard.Coord] -> (# [PegBoard.Coord], [PegBoard.Coord] #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   allRows :: [(PegBoard.Coord, GHC.Types.Bool)]
                   = let {
                       ds :: [PegBoard.Coord] = CriticalPoints.$wtopRightRow ww ww1
                     } in
                     let {
                       ds1 :: [PegBoard.Coord] = CriticalPoints.$wtopLeftRow ww ww1
                     } in
                     let {
                       isPeg :: PegBoard.Coord -> GHC.Types.Bool
                         {- Arity: 1, Strictness: <L,U>,
                            Unfolding: InlineRule (1, True, False)
                                       (\ (ds2 :: PegBoard.Coord) ->
                                        GHC.List.elem @ PegBoard.Coord PegBoard.$fEqCoord ds2 ww) -}
                       = \ (ds2 :: PegBoard.Coord) ->
                         GHC.List.elem @ PegBoard.Coord PegBoard.$fEqCoord ds2 ww
                     } in
                     let {
                       z :: [(PegBoard.Coord, GHC.Types.Bool)]
                       = let {
                           ds2 :: [PegBoard.Coord] = CriticalPoints.$wbottomRow ww ww1
                         } in
                         let {
                           z1 :: [(PegBoard.Coord, GHC.Types.Bool)]
                           = GHC.List.zip
                               @ PegBoard.Coord
                               @ GHC.Types.Bool
                               ds1
                               (GHC.Base.map @ PegBoard.Coord @ GHC.Types.Bool isPeg ds2)
                         } in
                         letrec {
                           go :: [PegBoard.Coord]
                                 -> [GHC.Types.Bool] -> [(PegBoard.Coord, GHC.Types.Bool)]
                             {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                           = \ (ds3 :: [PegBoard.Coord]) (_ys :: [GHC.Types.Bool]) ->
                             case ds3 of wild {
                               [] -> z1
                               : ipv ipv1
                               -> case _ys of wild1 {
                                    [] -> z1
                                    : ipv2 ipv3
                                    -> GHC.Types.:
                                         @ (PegBoard.Coord, GHC.Types.Bool)
                                         (ipv, ipv2)
                                         (go ipv1 ipv3) } }
                         } in
                         go ds2 (GHC.Base.map @ PegBoard.Coord @ GHC.Types.Bool isPeg ds)
                     } in
                     letrec {
                       go :: [PegBoard.Coord]
                             -> [GHC.Types.Bool] -> [(PegBoard.Coord, GHC.Types.Bool)]
                         {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                       = \ (ds2 :: [PegBoard.Coord]) (_ys :: [GHC.Types.Bool]) ->
                         case ds2 of wild {
                           [] -> z
                           : ipv ipv1
                           -> case _ys of wild1 {
                                [] -> z
                                : ipv2 ipv3
                                -> GHC.Types.:
                                     @ (PegBoard.Coord, GHC.Types.Bool)
                                     (ipv, ipv2)
                                     (go ipv1 ipv3) } }
                     } in
                     Data.OldList.nubBy
                       @ (PegBoard.Coord, GHC.Types.Bool)
                       Symmetries.clockRotate2
                       (go ds (GHC.Base.map @ PegBoard.Coord @ GHC.Types.Bool isPeg ds1))
                 } in
                 (# Symmetries.clockRotate_go1 allRows,
                    Symmetries.clockRotate_go allRows #)) -}
537f84a864249d505d8ffaa8d39acd2a
  $wnegSymmetric ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> Symmetries.Symmetries
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 case Symmetries.$wclockRotate
                        (case Symmetries.$wclockRotate
                                (case Symmetries.$wclockRotate
                                        (PegBoard.Board ww ww1) of ww2 { (#,#) ww3 ww4 ->
                                 PegBoard.Board ww3 ww4 }) of ww2 { (#,#) ww3 ww4 ->
                         case Symmetries.$wzedFlip ww3 ww4 of ww5 { (#,#) ww6 ww7 ->
                         PegBoard.Board ww6 ww7 } }) of ww2 { (#,#) ww3 ww4 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           ww)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           ww3) of wild {
                   GHC.Types.False -> Symmetries.Not
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ PegBoard.Coord
                             PegBoard.$fEqCoord
                             (Data.OldList.sortBy
                                @ PegBoard.Coord
                                PegBoard.$fOrdCoord_$ccompare
                                ww1)
                             (Data.OldList.sortBy
                                @ PegBoard.Coord
                                PegBoard.$fOrdCoord_$ccompare
                                ww4) of wild1 {
                        GHC.Types.False -> Symmetries.Not
                        GHC.Types.True -> Symmetries.Negative } } }) -}
5652619262a3f8f3c80c9de5ac1635e7
  $wposSymmetric ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> Symmetries.Symmetries
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 case Symmetries.$wclockRotate
                        (case Symmetries.$wclockRotate
                                (case Symmetries.$wclockRotate
                                        (PegBoard.Board ww ww1) of ww2 { (#,#) ww3 ww4 ->
                                 case Symmetries.$wzedFlip ww3 ww4 of ww5 { (#,#) ww6 ww7 ->
                                 PegBoard.Board ww6 ww7 } }) of ww2 { (#,#) ww3 ww4 ->
                         PegBoard.Board ww3 ww4 }) of ww2 { (#,#) ww3 ww4 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           ww)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           ww3) of wild {
                   GHC.Types.False -> Symmetries.Not
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ PegBoard.Coord
                             PegBoard.$fEqCoord
                             (Data.OldList.sortBy
                                @ PegBoard.Coord
                                PegBoard.$fOrdCoord_$ccompare
                                ww1)
                             (Data.OldList.sortBy
                                @ PegBoard.Coord
                                PegBoard.$fOrdCoord_$ccompare
                                ww4) of wild1 {
                        GHC.Types.False -> Symmetries.Not
                        GHC.Types.True -> Symmetries.Positive } } }) -}
569edc445c9d10a0a1aeb6f20c4dfab3
  $wrotSymmetric ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> Symmetries.Symmetries
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 case Symmetries.$wclockRotate
                        (PegBoard.Board ww ww1) of ww2 { (#,#) ww3 ww4 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           ww)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           ww3) of wild {
                   GHC.Types.False -> Symmetries.Not
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ PegBoard.Coord
                             PegBoard.$fEqCoord
                             (Data.OldList.sortBy
                                @ PegBoard.Coord
                                PegBoard.$fOrdCoord_$ccompare
                                ww1)
                             (Data.OldList.sortBy
                                @ PegBoard.Coord
                                PegBoard.$fOrdCoord_$ccompare
                                ww4) of wild1 {
                        GHC.Types.False -> Symmetries.Not
                        GHC.Types.True -> Symmetries.Rotational } } }) -}
5fea0fa1a4dd950f5e13afc14d890979
  $wzedFlip ::
    [PegBoard.Coord]
    -> [PegBoard.Coord] -> (# [PegBoard.Coord], [PegBoard.Coord] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   pshs :: [(PegBoard.Coord, GHC.Types.Bool)]
                   = let {
                       pRows :: [[PegBoard.Coord]]
                       = Data.OldList.groupBy
                           @ PegBoard.Coord
                           CriticalPoints.bottomRow1
                           (Data.OldList.sortBy
                              @ PegBoard.Coord
                              PegBoard.$fOrdCoord_$ccompare
                              (GHC.Base.++ @ PegBoard.Coord ww ww1))
                     } in
                     let {
                       g :: PegBoard.Coord -> (PegBoard.Coord, GHC.Types.Bool)
                         {- Arity: 1, Strictness: <L,U>m,
                            Unfolding: InlineRule (1, True, False)
                                       (\ (x :: PegBoard.Coord) ->
                                        (x,
                                         GHC.List.elem @ PegBoard.Coord PegBoard.$fEqCoord x ww)) -}
                       = \ (x :: PegBoard.Coord) ->
                         (x, GHC.List.elem @ PegBoard.Coord PegBoard.$fEqCoord x ww)
                     } in
                     letrec {
                       go :: [[PegBoard.Coord]]
                             -> [[PegBoard.Coord]] -> [(PegBoard.Coord, GHC.Types.Bool)]
                         {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                       = \ (ds :: [[PegBoard.Coord]]) (eta :: [[PegBoard.Coord]]) ->
                         case ds of wild {
                           [] -> GHC.Types.[] @ (PegBoard.Coord, GHC.Types.Bool)
                           : y ys
                           -> case eta of wild1 {
                                [] -> GHC.Types.[] @ (PegBoard.Coord, GHC.Types.Bool)
                                : y1 ys1
                                -> GHC.Base.++
                                     @ (PegBoard.Coord, GHC.Types.Bool)
                                     (GHC.List.zipWith
                                        @ (PegBoard.Coord, GHC.Types.Bool)
                                        @ PegBoard.Coord
                                        @ (PegBoard.Coord, GHC.Types.Bool)
                                        Symmetries.findSymmetries1
                                        (GHC.List.reverse1
                                           @ (PegBoard.Coord, GHC.Types.Bool)
                                           (GHC.Base.map
                                              @ PegBoard.Coord
                                              @ (PegBoard.Coord, GHC.Types.Bool)
                                              g
                                              y)
                                           (GHC.Types.[] @ (PegBoard.Coord, GHC.Types.Bool)))
                                        y1)
                                     (go ys ys1) } }
                     } in
                     go pRows pRows
                 } in
                 (# Symmetries.findSymmetries_go1 pshs,
                    Symmetries.findSymmetries_go pshs #)) -}
84eab57f64cfc77704595107052c38c2
  $wzedSymmetric ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> Symmetries.Symmetries
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 case Symmetries.$wzedFlip ww ww1 of ww2 { (#,#) ww3 ww4 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           ww)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           ww3) of wild {
                   GHC.Types.False -> Symmetries.Not
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ PegBoard.Coord
                             PegBoard.$fEqCoord
                             (Data.OldList.sortBy
                                @ PegBoard.Coord
                                PegBoard.$fOrdCoord_$ccompare
                                ww1)
                             (Data.OldList.sortBy
                                @ PegBoard.Coord
                                PegBoard.$fOrdCoord_$ccompare
                                ww4) of wild1 {
                        GHC.Types.False -> Symmetries.Not
                        GHC.Types.True -> Symmetries.Horizontal } } }) -}
9d0a0017123cc75a9ea9725facd322b5
  data Symmetries
    = Positive | Horizontal | Negative | Rotational | Not
370a09b34a88b920274e4d2846aaba2e
  boardEquals :: PegBoard.Board -> PegBoard.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PegBoard.Board) (w1 :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 case w1 of ww3 { PegBoard.Board ww4 ww5 ->
                 Symmetries.$wboardEquals ww1 ww2 ww4 ww5 } }) -}
4c2f38bde90ccd4cb2dd155622eb21d5
  clockRotate :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, Strictness: <L,1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case Symmetries.$wclockRotate w of ww { (#,#) ww1 ww2 ->
                 PegBoard.Board ww1 ww2 }) -}
a6ac88332c9abf6a43841e85781aa0db
  clockRotate1 :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, Strictness: <S,1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 case Symmetries.$wlvl ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 PegBoard.Board ww4 ww5 } }) -}
fe1ac108eaff0eefef67d5612ee16298
  clockRotate2 ::
    (PegBoard.Coord, GHC.Types.Bool)
    -> (PegBoard.Coord, GHC.Types.Bool) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),A)><S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (PegBoard.Coord, GHC.Types.Bool))
                   (w1 :: (PegBoard.Coord, GHC.Types.Bool)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { PegBoard.Coord ww4 ww5 ->
                 case ww4 of ww6 { GHC.Types.I# ww7 ->
                 case w1 of ww8 { (,) ww9 ww10 ->
                 case ww9 of ww11 { PegBoard.Coord ww12 ww13 ->
                 case ww12 of ww14 { GHC.Types.I# ww15 ->
                 PegBoard.$w$c==1 ww7 ww5 ww15 ww13 } } } } } }) -}
2438c57dae4caabcadc96efd328e5e49
  clockRotate_go ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
18e19db38e473babba5212278208bb34
  clockRotate_go1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
f70ac76e584273b50fae69b2b0dacf06
  counterClockRotate :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, Strictness: <L,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoard.Board) ->
                 Symmetries.clockRotate (Symmetries.clockRotate x)) -}
39ed6ed3653c2d60e6acd01c9ca333ae
  findSymmetries :: PegBoard.Board -> [Symmetries.Symmetries]
  {- Arity: 1, Strictness: <S(SL),U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 Symmetries.$wfindSymmetries ww1 ww2 }) -}
832ccf48cd89f16145ea182fa90a561d
  findSymmetries1 ::
    (PegBoard.Coord, GHC.Types.Bool)
    -> PegBoard.Coord -> (PegBoard.Coord, GHC.Types.Bool)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(A,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (PegBoard.Coord, GHC.Types.Bool))
                   (c :: PegBoard.Coord) ->
                 case ds of wild { (,) ds1 p -> (c, p) }) -}
3863719109ae370bd836700ea45abde8
  findSymmetries_go ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
37b708c9c88fa356a95c006d46a36e8b
  findSymmetries_go1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
1d8e97f534f1404c141416556b8ec68d
  negFlip :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, Strictness: <L,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoard.Board) ->
                 Symmetries.clockRotate
                   (Symmetries.zedFlip
                      (Symmetries.clockRotate (Symmetries.clockRotate x)))) -}
ee5ae1aa25e79f781b978125b8adec10
  negSymmetric :: PegBoard.Board -> Symmetries.Symmetries
  {- Arity: 1, Strictness: <S(SL),U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 Symmetries.$wnegSymmetric ww1 ww2 }) -}
692710cc7db82c6f866442abca5f8385
  posFlip :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, Strictness: <L,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoard.Board) ->
                 Symmetries.clockRotate
                   (Symmetries.clockRotate
                      (Symmetries.zedFlip (Symmetries.clockRotate x)))) -}
12fdf15e798a566a9f8f0b977b9e2d73
  posSymmetric :: PegBoard.Board -> Symmetries.Symmetries
  {- Arity: 1, Strictness: <S(SL),U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 Symmetries.$wposSymmetric ww1 ww2 }) -}
3a90f1bd0a598379482f91e8ca164709
  rotSymmetric :: PegBoard.Board -> Symmetries.Symmetries
  {- Arity: 1, Strictness: <S(SL),U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 Symmetries.$wrotSymmetric ww1 ww2 }) -}
971ebd5693746243bd5c07083f3654d5
  zedFlip :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 case Symmetries.$wzedFlip ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 PegBoard.Board ww4 ww5 } }) -}
f35d7feac9be2375b6a5f522e54c0d73
  zedSymmetric :: PegBoard.Board -> Symmetries.Symmetries
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 Symmetries.$wzedSymmetric ww1 ww2 }) -}
instance [safe] GHC.Classes.Eq [Symmetries.Symmetries]
  = Symmetries.$fEqSymmetries
instance [safe] GHC.Show.Show [Symmetries.Symmetries]
  = Symmetries.$fShowSymmetries
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

