
==================== FINAL INTERFACE ====================
2016-10-05 07:36:39.239841 UTC

interface pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Analytics 8001
  interface hash: 9b578c13698878f556a1811327a688ee
  ABI hash: 39eb14961649799faee79358a8534710
  export-list hash: 5f24ac485a14b5105dd37a854fe5255d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Analytics.endState
  Analytics.endWith
  Analytics.numEndStates
  Analytics.shortestGame
  Analytics.uniqueEndStates
module dependencies: CriticalPoints Helpers.Lists Helpers.Math
                     PegBoard PlayGame
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Function 0e2e66c2e87e48a960f18fa702dab405
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  CriticalPoints 3ac4b1acf8244223bf7173d25fc6c635
  exports: 80fdacf561ce6b6b953c62c7fe395c77
import  -/  Helpers.Lists 9c52ca015466111e8d572aeb56cfef86
  exports: 975c27250cc63b29bcdfa4d36e613251
import  -/  Helpers.Math 90663dbd1f1fc19916d7ba5eca912c3f
  exports: 855ca1e90ac297801c0ea414b55a5b9e
import  -/  PegBoard e5ae7f741df6e5acec6857f64e0e15aa
  exports: fc07b7050cc2af4e0e64b548dbb35a86
  Board cd9bea143706f7f958a8ad2912e7aaf1
  Board a52c37830432dd53520a978725b1b57a
  pegCount cde3590fcb43559dfa10735abf09f694
import  -/  PlayGame ea989d509c6118403d9cf21429970cf0
  exports: db98f7a3543cf5dfbe75863e31383cd6
  BoardLog 7d759c1c7049ded22a1f49d5cf74b9a9
  _current 870c3ddee1e330783a8dfa6a70058f75
  collectLog 44be3ac61c85cbe75109647fbf0017de
0c3639da19593b5d6c2b595e2548bd16
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Analytics.$trModule2
                   Analytics.$trModule1) -}
e7d49f4225e0633f5010a1ceb9026b7c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Analytics"#) -}
4e35f2bd1eea4c37264c5c2f9cd12226
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2"#) -}
c1e43c25dd3755a96b7e1a4290eb7ec5
  $wendState :: PegBoard.Board -> [PegBoard.Board] -> PegBoard.Board
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: PegBoard.Board) (ww1 :: [PegBoard.Board]) ->
                 Analytics.endState_go
                   (GHC.List.reverse1
                      @ PegBoard.Board
                      (GHC.Types.: @ PegBoard.Board ww ww1)
                      (GHC.Types.[] @ PegBoard.Board))
                   (GHC.List.lastError @ PegBoard.Board)) -}
7024833346447e1474be2a721ca3a954
  $wuniqueEndStates ::
    PegBoard.Board
    -> [PegBoard.Board]
    -> PegBoard.Board
    -> [PegBoard.Board]
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: PegBoard.Board)
                   (ww1 :: [PegBoard.Board])
                   (ww2 :: PegBoard.Board)
                   (ww3 :: [PegBoard.Board]) ->
                 case Analytics.endState_go
                        (GHC.List.reverse1
                           @ PegBoard.Board
                           (GHC.Types.: @ PegBoard.Board ww ww1)
                           (GHC.Types.[] @ PegBoard.Board))
                        (GHC.List.lastError
                           @ PegBoard.Board) of wild { PegBoard.Board ps hs ->
                 case Analytics.endState_go
                        (GHC.List.reverse1
                           @ PegBoard.Board
                           (GHC.Types.: @ PegBoard.Board ww2 ww3)
                           (GHC.Types.[] @ PegBoard.Board))
                        (GHC.List.lastError
                           @ PegBoard.Board) of wild1 { PegBoard.Board ps1 hs1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           ps)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           ps1) of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           hs)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.$fOrdCoord_$ccompare
                           hs1) } } }) -}
b7f185994a604faad278739a74baff07
  endState :: PlayGame.BoardLog -> PegBoard.Board
  {- Arity: 1, Strictness: <S,1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PlayGame.BoardLog) ->
                 case w of ww { PlayGame.BoardLog ww1 ww2 ->
                 Analytics.$wendState ww1 ww2 }) -}
ee363252a2eda6edd5faabb7c95d9882
  endState_go :: [PegBoard.Board] -> PegBoard.Board -> PegBoard.Board
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U)> -}
08c8a41016aa1ebe4f4019ac1617d34a
  endWith ::
    GHC.Types.Int -> [PlayGame.BoardLog] -> [PlayGame.BoardLog]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U>,
     Unfolding: (\ (n :: GHC.Types.Int) (eta :: [PlayGame.BoardLog]) ->
                 GHC.List.filter
                   @ PlayGame.BoardLog
                   (\ (x :: PlayGame.BoardLog) ->
                    case x of wild { PlayGame.BoardLog ds1 ds2 ->
                    case ds1 of wild1 { PegBoard.Board ds ds4 ->
                    case GHC.List.$wlenAcc @ PegBoard.Coord ds 0# of ww2 { DEFAULT ->
                    case n of wild2 { GHC.Types.I# y ->
                    GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# ww2 y) } } } })
                   eta) -}
aeb5182b46974fca586a0c82b18cc55e
  numEndStates ::
    [PlayGame.BoardLog] -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [PlayGame.BoardLog]) ->
                 GHC.Base.map
                   @ [GHC.Types.Int]
                   @ (GHC.Types.Int, GHC.Types.Int)
                   (Analytics.numEndStates_numberOf @ GHC.Types.Int)
                   (Data.OldList.groupBy
                      @ GHC.Types.Int
                      GHC.Classes.eqInt
                      (GHC.Base.map
                         @ PlayGame.BoardLog
                         @ GHC.Types.Int
                         Analytics.numEndStates2
                         (Data.OldList.nubBy
                            @ PlayGame.BoardLog
                            Analytics.numEndStates1
                            x)))) -}
b72e69ae0b5e8f23c61235afaded8745
  numEndStates1 ::
    PlayGame.BoardLog -> PlayGame.BoardLog -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PlayGame.BoardLog) (w1 :: PlayGame.BoardLog) ->
                 case w of ww { PlayGame.BoardLog ww1 ww2 ->
                 case w1 of ww3 { PlayGame.BoardLog ww4 ww5 ->
                 Analytics.$wuniqueEndStates ww1 ww2 ww4 ww5 } }) -}
acaf3f68a59207660ace074fb15699e2
  numEndStates2 :: PlayGame.BoardLog -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PlayGame.BoardLog) ->
                 case Analytics.endState x of wild { PegBoard.Board ds ds1 ->
                 case GHC.List.$wlenAcc @ PegBoard.Coord ds 0# of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
ce8348bff46532f3dcb2241342eba6f1
  numEndStates_numberOf :: [a] -> (a, GHC.Types.Int)
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: [a]) ->
                 (GHC.List.head @ a xs,
                  case GHC.List.$wlenAcc @ a xs 0# of ww2 { DEFAULT ->
                  GHC.Types.I# ww2 })) -}
e58b09390411c2ef836307ad722988df
  shortestGame :: [PlayGame.BoardLog] -> PlayGame.BoardLog
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (eta :: [PlayGame.BoardLog]) ->
                 Analytics.shortestGame_go eta) -}
cfe9420320bafb9bd5f8e4bbea32bf27
  shortestGame_go :: [PlayGame.BoardLog] -> PlayGame.BoardLog
  {- Arity: 1, Strictness: <S,1*U> -}
c0c417f434f377a56fcc77a602741bea
  uniqueEndStates :: [PlayGame.BoardLog] -> [PlayGame.BoardLog]
  {- Arity: 1,
     Unfolding: (Data.OldList.nubBy
                   @ PlayGame.BoardLog
                   Analytics.numEndStates1) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

