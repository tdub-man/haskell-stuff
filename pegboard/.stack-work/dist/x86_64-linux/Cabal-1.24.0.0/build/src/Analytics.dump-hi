
==================== FINAL INTERFACE ====================
2016-11-06 21:48:21.540022 UTC

interface pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Analytics 8001
  interface hash: cba8c190f144a93190be254e34bffaba
  ABI hash: 1543e36474362e7448e76534aa15995b
  export-list hash: f7e9d11b8ff150a18249c1b08395b5a8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Analytics.boardSymmetries
  Analytics.endState
  Analytics.endWith
  Analytics.movePegRatio
  Analytics.movePegRatios
  Analytics.numEndStates
  Analytics.shortestGame
  Analytics.uniqueEndStates
module dependencies: CriticalPoints Helpers.Lists Helpers.Math
                     PegBoard PegBoardMove PlayGame Symmetries
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Function 0e2e66c2e87e48a960f18fa702dab405
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  CriticalPoints 84f450c5d723c42b7e1981428257d307
  exports: c2877d10d1df7ea97aa94d67af9503b6
import  -/  Helpers.Lists 9c52ca015466111e8d572aeb56cfef86
  exports: 975c27250cc63b29bcdfa4d36e613251
import  -/  Helpers.Math 90663dbd1f1fc19916d7ba5eca912c3f
  exports: 855ca1e90ac297801c0ea414b55a5b9e
import  -/  PegBoard 16e7d4772b49b52e123defa9df61cd8c
  exports: d9e5ef2267766e7ae3b457c51282f54d
  Board dd84e3e13f591df253c023fdeb6d0fac
  Board 88c3b97cf1f38c14492f474b5ab8ce85
  pegCount 0d218736e8293ff16a2ee1871bb60550
import  -/  PegBoardMove 916e67d09fe4159a916059e4bcb4c825
  exports: 7e04a0fdaca55b135f9b30999c563e9b
  nextMoves 57184a84fb1567c4c39a1494e7191738
import  -/  PlayGame 33dcc890daf23cb58c28e0429f285f74
  exports: db98f7a3543cf5dfbe75863e31383cd6
  BoardLog df8ca795fb7203d9569bd5ca9c743888
  _current 68c497c7a0d638c2ded461615b7f6b25
  collectLog d50cb14233bc66d28cd8bfc3ee05c610
import  -/  Symmetries 7fb9a7b1bcbe991b68023121dbc5d406
  exports: f7bc392eb4f8e69204e2fc7af20ed002
  Symmetries 1ac38ad02047e86b966c05d03d7a5625
  findSymmetries cff7c08f90b3bf39202e844e1bfd0c2d
0c3639da19593b5d6c2b595e2548bd16
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Analytics.$trModule2
                   Analytics.$trModule1) -}
e7d49f4225e0633f5010a1ceb9026b7c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Analytics"#) -}
4e35f2bd1eea4c37264c5c2f9cd12226
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2"#) -}
59612d977f865814f36bc580e63deefb
  $wendState :: PegBoard.Board -> [PegBoard.Board] -> PegBoard.Board
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: PegBoard.Board) (ww1 :: [PegBoard.Board]) ->
                 Analytics.endState_go
                   (GHC.List.reverse1
                      @ PegBoard.Board
                      (GHC.Types.: @ PegBoard.Board ww ww1)
                      (GHC.Types.[] @ PegBoard.Board))
                   (GHC.List.lastError @ PegBoard.Board)) -}
8eb5d914f9aa20d04869612a5ba6ce76
  $wuniqueEndStates ::
    PegBoard.Board
    -> [PegBoard.Board]
    -> PegBoard.Board
    -> [PegBoard.Board]
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: PegBoard.Board)
                   (ww1 :: [PegBoard.Board])
                   (ww2 :: PegBoard.Board)
                   (ww3 :: [PegBoard.Board]) ->
                 case Analytics.endState_go
                        (GHC.List.reverse1
                           @ PegBoard.Board
                           (GHC.Types.: @ PegBoard.Board ww ww1)
                           (GHC.Types.[] @ PegBoard.Board))
                        (GHC.List.lastError
                           @ PegBoard.Board) of wild { PegBoard.Board ps hs ->
                 case Analytics.endState_go
                        (GHC.List.reverse1
                           @ PegBoard.Board
                           (GHC.Types.: @ PegBoard.Board ww2 ww3)
                           (GHC.Types.[] @ PegBoard.Board))
                        (GHC.List.lastError
                           @ PegBoard.Board) of wild1 { PegBoard.Board ps1 hs1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy @ PegBoard.Coord PegBoard.compareZ ps)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.compareZ
                           ps1) of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$c==
                        @ PegBoard.Coord
                        PegBoard.$fEqCoord
                        (Data.OldList.sortBy @ PegBoard.Coord PegBoard.compareZ hs)
                        (Data.OldList.sortBy
                           @ PegBoard.Coord
                           PegBoard.compareZ
                           hs1) } } }) -}
cb04fc6f374afd45912eafa90bf905c4
  boardSymmetries :: PlayGame.BoardLog -> [Symmetries.Symmetries]
  {- Arity: 1, Strictness: <S,1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PlayGame.BoardLog) ->
                 case x of wild { PlayGame.BoardLog b bl ->
                 GHC.Base.build
                   @ Symmetries.Symmetries
                   (\ @ b1
                      (c :: Symmetries.Symmetries -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ PegBoard.Board
                      @ b1
                      (GHC.Base.mapFB
                         @ Symmetries.Symmetries
                         @ b1
                         @ PegBoard.Board
                         c
                         Symmetries.findSymmetries)
                      n
                      (GHC.List.reverse1
                         @ PegBoard.Board
                         (GHC.Types.: @ PegBoard.Board b bl)
                         (GHC.Types.[] @ PegBoard.Board))) }) -}
e630a325310159847c57649e640e976a
  endState :: PlayGame.BoardLog -> PegBoard.Board
  {- Arity: 1, Strictness: <S,1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PlayGame.BoardLog) ->
                 case w of ww { PlayGame.BoardLog ww1 ww2 ->
                 Analytics.$wendState ww1 ww2 }) -}
39fb688155ccb451d08e7f8c93ad81d2
  endState_go :: [PegBoard.Board] -> PegBoard.Board -> PegBoard.Board
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U)> -}
4bd0c3b8f21ef251c9d11570450595ee
  endWith ::
    GHC.Types.Int -> [PlayGame.BoardLog] -> [PlayGame.BoardLog]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U>,
     Unfolding: (\ (n :: GHC.Types.Int) (eta :: [PlayGame.BoardLog]) ->
                 GHC.List.filter
                   @ PlayGame.BoardLog
                   (\ (x :: PlayGame.BoardLog) ->
                    case x of wild { PlayGame.BoardLog ds1 ds2 ->
                    case ds1 of wild1 { PegBoard.Board ds ds4 ->
                    case GHC.List.$wlenAcc @ PegBoard.Coord ds 0# of ww2 { DEFAULT ->
                    case n of wild2 { GHC.Types.I# y ->
                    GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# ww2 y) } } } })
                   eta) -}
80ac3e42ea32d0b32cfba7c945f2a62f
  movePegRatio :: PegBoard.Board -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 (case GHC.List.$wlenAcc
                         @ (PegBoard.Coord, PegBoard.Coord, PegBoard.Coord)
                         (PegBoardMove.$wnextMoves ww1 ww2)
                         0# of ww3 { DEFAULT ->
                  GHC.Types.I# ww3 },
                  case GHC.List.$wlenAcc @ PegBoard.Coord ww1 0# of ww3 { DEFAULT ->
                  GHC.Types.I# ww3 }) }) -}
1168c76ffea8daa3c17471d20cdfadeb
  movePegRatios ::
    PlayGame.BoardLog -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, Strictness: <S,1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PlayGame.BoardLog) ->
                 case x of wild { PlayGame.BoardLog b bl ->
                 GHC.Base.build
                   @ (GHC.Types.Int, GHC.Types.Int)
                   (\ @ b1
                      (c :: (GHC.Types.Int, GHC.Types.Int) -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ PegBoard.Board
                      @ b1
                      (GHC.Base.mapFB
                         @ (GHC.Types.Int, GHC.Types.Int)
                         @ b1
                         @ PegBoard.Board
                         c
                         Analytics.movePegRatio)
                      n
                      (GHC.List.reverse1
                         @ PegBoard.Board
                         (GHC.Types.: @ PegBoard.Board b bl)
                         (GHC.Types.[] @ PegBoard.Board))) }) -}
9751cf569231655af784888884d4ecc8
  numEndStates ::
    [PlayGame.BoardLog] -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [PlayGame.BoardLog]) ->
                 GHC.Base.map
                   @ [GHC.Types.Int]
                   @ (GHC.Types.Int, GHC.Types.Int)
                   (Analytics.numEndStates_numberOf @ GHC.Types.Int)
                   (Data.OldList.groupBy
                      @ GHC.Types.Int
                      GHC.Classes.eqInt
                      (GHC.Base.map
                         @ PlayGame.BoardLog
                         @ GHC.Types.Int
                         Analytics.numEndStates2
                         (Data.OldList.nubBy
                            @ PlayGame.BoardLog
                            Analytics.numEndStates1
                            x)))) -}
9ba42576f0e66b4d7ca81f3db289e334
  numEndStates1 ::
    PlayGame.BoardLog -> PlayGame.BoardLog -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PlayGame.BoardLog) (w1 :: PlayGame.BoardLog) ->
                 case w of ww { PlayGame.BoardLog ww1 ww2 ->
                 case w1 of ww3 { PlayGame.BoardLog ww4 ww5 ->
                 Analytics.$wuniqueEndStates ww1 ww2 ww4 ww5 } }) -}
547d5dc137bc8189eb95ca5277070818
  numEndStates2 :: PlayGame.BoardLog -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PlayGame.BoardLog) ->
                 case Analytics.endState x of wild { PegBoard.Board ds ds1 ->
                 case GHC.List.$wlenAcc @ PegBoard.Coord ds 0# of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
ce8348bff46532f3dcb2241342eba6f1
  numEndStates_numberOf :: [a] -> (a, GHC.Types.Int)
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: [a]) ->
                 (GHC.List.head @ a xs,
                  case GHC.List.$wlenAcc @ a xs 0# of ww2 { DEFAULT ->
                  GHC.Types.I# ww2 })) -}
a160842d2cacc38b113a0bf72f4bf7d3
  shortestGame :: [PlayGame.BoardLog] -> PlayGame.BoardLog
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (eta :: [PlayGame.BoardLog]) ->
                 Analytics.shortestGame_go eta) -}
637f85b139e73a78bacfb76583694063
  shortestGame_go :: [PlayGame.BoardLog] -> PlayGame.BoardLog
  {- Arity: 1, Strictness: <S,1*U> -}
60264bd8827ba7119c6d14b344927b2e
  uniqueEndStates :: [PlayGame.BoardLog] -> [PlayGame.BoardLog]
  {- Arity: 1,
     Unfolding: (Data.OldList.nubBy
                   @ PlayGame.BoardLog
                   Analytics.numEndStates1) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

