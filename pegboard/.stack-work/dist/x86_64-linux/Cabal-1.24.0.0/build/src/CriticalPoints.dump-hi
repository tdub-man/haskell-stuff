
==================== FINAL INTERFACE ====================
2016-10-05 07:36:39.063112 UTC

interface pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:CriticalPoints 8001
  interface hash: 84fa3d922e36541da3ca6b3c6c773927
  ABI hash: 3ac4b1acf8244223bf7173d25fc6c635
  export-list hash: 80fdacf561ce6b6b953c62c7fe395c77
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  CriticalPoints.bottomRow
  CriticalPoints.concentricTriangles
  CriticalPoints.concentricTrianglesExclusive
  CriticalPoints.critPoints
  CriticalPoints.innerTriangle
  CriticalPoints.rows
  CriticalPoints.rows'
  CriticalPoints.topLeftRow
  CriticalPoints.topRightRow
module dependencies: Helpers.Lists Helpers.Math PegBoard
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  Helpers.Lists 9c52ca015466111e8d572aeb56cfef86
  exports: 975c27250cc63b29bcdfa4d36e613251
  compR 954fde2ef8bcfea3a4ea9d33ff8c4a48
  middle 06ecb8accc6c84e43324f104091abf9c
import  -/  Helpers.Math 90663dbd1f1fc19916d7ba5eca912c3f
  exports: 855ca1e90ac297801c0ea414b55a5b9e
  ceilDiv 63bcb7aea1e77dc7cd736f351a44ff96
import  -/  PegBoard e5ae7f741df6e5acec6857f64e0e15aa
  exports: fc07b7050cc2af4e0e64b548dbb35a86
  Board cd9bea143706f7f958a8ad2912e7aaf1
  Board a52c37830432dd53520a978725b1b57a
  Coord 591af5514d165424777ea458d4c4cda4
  Coord e90daf56cd239fe823a66b0baea38df2
221d687c4d3d50531bd2b7f10f500d19
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CriticalPoints.$trModule2
                   CriticalPoints.$trModule1) -}
445265a04e3085bdaa817d2d1ff94033
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CriticalPoints"#) -}
99222bcf5d7db76c15d8f95d090a2e84
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2"#) -}
e3bd5a225091aab6b90c80971858f842
  $wbottomRow ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   fail :: GHC.Prim.Void# -> [PegBoard.Coord]
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                     GHC.Base.map
                       @ (PegBoard.Coord, GHC.Types.Bool)
                       @ PegBoard.Coord
                       (Data.Tuple.fst @ PegBoard.Coord @ GHC.Types.Bool)
                       (CriticalPoints.bottomRow_go
                          (CriticalPoints.$wrows' ww ww1)
                          (GHC.List.lastError @ [(PegBoard.Coord, GHC.Types.Bool)]))
                 } in
                 case ww of wild {
                   []
                   -> case ww1 of wild1 {
                        [] -> GHC.Types.[] @ PegBoard.Coord
                        : ipv ipv1 -> fail GHC.Prim.void# }
                   : ipv ipv1 -> fail GHC.Prim.void# }) -}
5a78d392a3902eb1ad01fd103500d548
  $wconcentricTriangles' ::
    [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [PegBoard.Board]
    -> (# PegBoard.Board, [PegBoard.Board] #)
  {- Arity: 3, Strictness: <S,U><L,U><L,U>, Inline: [0] -}
38aeb9c97dd76a8db3e46ac182a34016
  $wcritPoints ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 case CriticalPoints.$wconcentricTriangles'
                        ww
                        ww1
                        (GHC.Types.[] @ PegBoard.Board) of ww2 { (#,#) ww3 ww4 ->
                 let {
                   tlRows :: [[PegBoard.Coord]]
                   = GHC.Base.map
                       @ PegBoard.Board
                       @ [PegBoard.Coord]
                       CriticalPoints.topLeftRow
                       (GHC.List.reverse1
                          @ PegBoard.Board
                          ww4
                          (GHC.Types.[] @ PegBoard.Board))
                 } in
                 CriticalPoints.critPoints_go
                   tlRows
                   (GHC.Base.map
                      @ [PegBoard.Coord]
                      @ GHC.Types.Int
                      CriticalPoints.critPoints1
                      tlRows) }) -}
4e17f2dc65c846f9dee044ab5dd9ab61
  $wlvl ::
    [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> (# [PegBoard.Coord], [PegBoard.Coord] #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><L,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord])
                   (ww1 :: [PegBoard.Coord])
                   (ww2 :: [PegBoard.Coord])[OneShot]
                   (ww3 :: [PegBoard.Coord])[OneShot] ->
                 (# GHC.List.filter
                      @ PegBoard.Coord
                      (\ (ds :: PegBoard.Coord) ->
                       case GHC.List.elem
                              @ PegBoard.Coord
                              PegBoard.$fEqCoord
                              ds
                              ww2 of wild {
                         GHC.Types.False -> GHC.Types.True
                         GHC.Types.True -> GHC.Types.False })
                      ww,
                    GHC.List.filter
                      @ PegBoard.Coord
                      (\ (ds :: PegBoard.Coord) ->
                       case GHC.List.elem
                              @ PegBoard.Coord
                              PegBoard.$fEqCoord
                              ds
                              ww3 of wild {
                         GHC.Types.False -> GHC.Types.True
                         GHC.Types.True -> GHC.Types.False })
                      ww1 #)) -}
906729c68eb8269da3f02e58de1ad18c
  $wlvl1 ::
    [PegBoard.Coord]
    -> [PegBoard.Coord] -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 2, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 CriticalPoints.innerTriangle_go2
                   (Helpers.Lists.middle
                      @ [(PegBoard.Coord, GHC.Types.Bool)]
                      (CriticalPoints.$wrows' ww ww1))) -}
345e6fe832e81441653cf1e50af92ba0
  $wrows' ::
    [PegBoard.Coord]
    -> [PegBoard.Coord] -> [[(PegBoard.Coord, GHC.Types.Bool)]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 GHC.Base.map
                   @ [PegBoard.Coord]
                   @ [(PegBoard.Coord, GHC.Types.Bool)]
                   (GHC.Base.map
                      @ PegBoard.Coord
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      (\ (x :: PegBoard.Coord) ->
                       (x, GHC.List.elem @ PegBoard.Coord PegBoard.$fEqCoord x ww)))
                   (Data.OldList.groupBy
                      @ PegBoard.Coord
                      CriticalPoints.bottomRow1
                      (Data.OldList.sortBy
                         @ PegBoard.Coord
                         PegBoard.$fOrdCoord_$ccompare
                         (GHC.Base.++ @ PegBoard.Coord ww ww1)))) -}
a47f9eb5cdbbad864e01388727f5de2c
  $wtopLeftRow ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 case ww of wild {
                   []
                   -> case ww1 of wild1 {
                        [] -> GHC.Types.[] @ PegBoard.Coord
                        : ipv ipv1
                        -> GHC.Base.map
                             @ [(PegBoard.Coord, GHC.Types.Bool)]
                             @ PegBoard.Coord
                             CriticalPoints.topLeftRow1
                             (CriticalPoints.$wrows' (GHC.Types.[] @ PegBoard.Coord) wild1) }
                   : ipv ipv1
                   -> GHC.Base.map
                        @ [(PegBoard.Coord, GHC.Types.Bool)]
                        @ PegBoard.Coord
                        CriticalPoints.topLeftRow1
                        (CriticalPoints.$wrows' wild ww1) }) -}
dfaf342dd1d0318fd44a3d0ab773e223
  $wtopRightRow ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 case ww of wild {
                   []
                   -> case ww1 of wild1 {
                        [] -> GHC.Types.[] @ PegBoard.Coord
                        : ipv ipv1
                        -> GHC.List.reverse1
                             @ PegBoard.Coord
                             (GHC.Base.map
                                @ [(PegBoard.Coord, GHC.Types.Bool)]
                                @ PegBoard.Coord
                                CriticalPoints.topRightRow1
                                (CriticalPoints.$wrows' (GHC.Types.[] @ PegBoard.Coord) wild1))
                             (GHC.Types.[] @ PegBoard.Coord) }
                   : ipv ipv1
                   -> GHC.List.reverse1
                        @ PegBoard.Coord
                        (GHC.Base.map
                           @ [(PegBoard.Coord, GHC.Types.Bool)]
                           @ PegBoard.Coord
                           CriticalPoints.topRightRow1
                           (CriticalPoints.$wrows' wild ww1))
                        (GHC.Types.[] @ PegBoard.Coord) }) -}
2ac40cc5916e6bf2f9816828cd15ef12
  bottomRow :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wbottomRow ww1 ww2 }) -}
5521ff97aec3554b4aaad0ec0f1c9748
  bottomRow1 :: PegBoard.Coord -> PegBoard.Coord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),A)><S(S(S)L),1*U(1*U(U),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: PegBoard.Coord) (ds1 :: PegBoard.Coord) ->
                 case ds of wild { PegBoard.Coord a ds2 ->
                 case ds1 of wild1 { PegBoard.Coord b ds3 ->
                 GHC.Classes.eqInt a b } }) -}
2acd033bd7d658c59b7a0ab01cfa093a
  bottomRow_go ::
    [[(PegBoard.Coord, GHC.Types.Bool)]]
    -> [(PegBoard.Coord, GHC.Types.Bool)]
    -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
38ee660fdc67fad9f6226e886b7b6237
  concentricTriangles :: PegBoard.Board -> [PegBoard.Board]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (b :: PegBoard.Board) ->
                 case CriticalPoints.concentricTriangles'
                        (b, GHC.Types.[] @ PegBoard.Board) of wild { (,) ds1 y ->
                 y }) -}
0b64e8abf7e70ab850d2f4b328ae3d96
  concentricTriangles' ::
    (PegBoard.Board, [PegBoard.Board])
    -> (PegBoard.Board, [PegBoard.Board])
  {- Arity: 1, Strictness: <S(S(SL)L),1*U(1*U(U,U),U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (PegBoard.Board, [PegBoard.Board])) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { PegBoard.Board ww4 ww5 ->
                 case CriticalPoints.$wconcentricTriangles'
                        ww4
                        ww5
                        ww2 of ww6 { (#,#) ww7 ww8 ->
                 (ww7, ww8) } } }) -}
e2c0b7a55c3151bc1ba9f255b3380eb8
  concentricTrianglesExclusive :: PegBoard.Board -> [PegBoard.Board]
  {- Arity: 1, Strictness: <L,1*U(U,U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 let {
                   concs :: [PegBoard.Board]
                   = case w of ww { PegBoard.Board ww1 ww2 ->
                     case CriticalPoints.$wconcentricTriangles'
                            ww1
                            ww2
                            (GHC.Types.[] @ PegBoard.Board) of ww3 { (#,#) ww4 ww5 ->
                     ww5 } }
                 } in
                 GHC.Types.:
                   @ PegBoard.Board
                   (GHC.List.head @ PegBoard.Board concs)
                   (Helpers.Lists.compMapR
                      @ PegBoard.Board
                      @ PegBoard.Board
                      CriticalPoints.concentricTrianglesExclusive1
                      concs)) -}
cb42d86532e30ecc98ecea4a6cc0b1d5
  concentricTrianglesExclusive1 ::
    PegBoard.Board -> PegBoard.Board -> PegBoard.Board
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U,1*U)><S,1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PegBoard.Board) (w1 :: PegBoard.Board)[OneShot] ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 case w1 of ww3 { PegBoard.Board ww4 ww5 ->
                 case CriticalPoints.$wlvl ww1 ww2 ww4 ww5 of ww6 { (#,#) ww7 ww8 ->
                 PegBoard.Board ww7 ww8 } } }) -}
d3d6a1c988f0b8c39566654f71ff98ca
  critPoints :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wcritPoints ww1 ww2 }) -}
48f43d7ac190f03abaffaee9b172e110
  critPoints1 :: [PegBoard.Coord] -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [PegBoard.Coord]) ->
                 Helpers.Math.ceilDiv
                   @ GHC.Types.Int
                   GHC.Real.$fIntegralInt
                   (case GHC.List.$wlenAcc @ PegBoard.Coord x 0# of ww2 { DEFAULT ->
                    GHC.Types.I# ww2 })
                   CriticalPoints.critPoints2) -}
9bebff7ff85f3ccb237aa77461db0074
  critPoints2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
d40f2c1267751c2284c88f3e0c0fb73a
  critPoints_go ::
    [[PegBoard.Coord]] -> [GHC.Types.Int] -> [PegBoard.Coord]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
c2ce7fcb433e7dbd1ae9eedb9fce5c78
  innerTriangle :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, Strictness: <L,1*U(U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (b :: PegBoard.Board) ->
                 let {
                   mids :: [(PegBoard.Coord, GHC.Types.Bool)]
                   = CriticalPoints.innerTriangle3 b
                 } in
                 PegBoard.Board
                   (CriticalPoints.innerTriangle2 mids)
                   (CriticalPoints.innerTriangle1 mids)) -}
50e921f8fda2d43f58366ff004c86253
  innerTriangle1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 CriticalPoints.innerTriangle_go x) -}
4f6882c3b91560241b682a7308ccc6a0
  innerTriangle2 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 CriticalPoints.innerTriangle_go1 x) -}
bae47433adb181e68df63eff9fdd4d64
  innerTriangle3 ::
    PegBoard.Board -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 1, Strictness: <S(SL),1*U(U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wlvl1 ww1 ww2 }) -}
f141fda681412b9b15b70b48ccfca9c4
  innerTriangle_go ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
19d6aaf66e5a8200f253cf6a3377c350
  innerTriangle_go1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
fddb5820ba0b9c095a9837b17472aa3d
  innerTriangle_go2 ::
    [[(PegBoard.Coord, GHC.Types.Bool)]]
    -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 1, Strictness: <S,1*U> -}
d5599a035911481a0fff4764a3633ca3
  rows :: [PegBoard.Coord] -> [[PegBoard.Coord]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (cs :: [PegBoard.Coord]) ->
                 Data.OldList.groupBy
                   @ PegBoard.Coord
                   CriticalPoints.bottomRow1
                   (Data.OldList.sortBy
                      @ PegBoard.Coord
                      PegBoard.$fOrdCoord_$ccompare
                      cs)) -}
24a097f901dea126e2d115fb320a47fd
  rows' :: PegBoard.Board -> [[(PegBoard.Coord, GHC.Types.Bool)]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wrows' ww1 ww2 }) -}
c8cb29c24638ed3a50b26f1861a9fee1
  topLeftRow :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wtopLeftRow ww1 ww2 }) -}
440c0a16eebc8bf93fff0d6dff9727a1
  topLeftRow1 :: [(PegBoard.Coord, GHC.Types.Bool)] -> PegBoard.Coord
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 case x of wild {
                   [] -> case GHC.List.badHead ret_ty PegBoard.Coord of {}
                   : x1 ds1 -> case x1 of wild1 { (,) x2 ds2 -> x2 } }) -}
59941cd32094781676dae29d5e84089b
  topRightRow :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wtopRightRow ww1 ww2 }) -}
5067b70588744cf64325e07336bfcab0
  topRightRow1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> PegBoard.Coord
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 case CriticalPoints.topRightRow_go
                        x
                        (GHC.List.lastError
                           @ (PegBoard.Coord, GHC.Types.Bool)) of wild { (,) x1 ds1 ->
                 x1 }) -}
30ea7f1949ec6f5804d0f315986a8a06
  topRightRow_go ::
    [(PegBoard.Coord, GHC.Types.Bool)]
    -> (PegBoard.Coord, GHC.Types.Bool)
    -> (PegBoard.Coord, GHC.Types.Bool)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U)> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

