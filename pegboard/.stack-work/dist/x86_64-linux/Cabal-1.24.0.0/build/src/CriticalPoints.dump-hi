
==================== FINAL INTERFACE ====================
2016-11-04 01:54:13.149871 UTC

interface pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:CriticalPoints 8001
  interface hash: b8b034779673b94129001a2e5b3408d2
  ABI hash: af57f81cf1244d8ee38733403d6a3642
  export-list hash: 062caa36d150055fae0d4d8d1aee2142
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  CriticalPoints.boolRows
  CriticalPoints.bottomRow
  CriticalPoints.bottomRowBR
  CriticalPoints.bottomRowBR'
  CriticalPoints.concentricTriangles
  CriticalPoints.concentricTrianglesExclusive
  CriticalPoints.critPoints
  CriticalPoints.innerTriangle
  CriticalPoints.rows
  CriticalPoints.toBoolRow
  CriticalPoints.toBoolRows
  CriticalPoints.topLeftRow
  CriticalPoints.topLeftRowBR
  CriticalPoints.topLeftRowBR'
  CriticalPoints.topRightRow
  CriticalPoints.topRightRowBR
  CriticalPoints.topRightRowBR'
module dependencies: Helpers.Lists Helpers.Math PegBoard
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  Helpers.Lists 9c52ca015466111e8d572aeb56cfef86
  exports: 975c27250cc63b29bcdfa4d36e613251
  compR 954fde2ef8bcfea3a4ea9d33ff8c4a48
  middle 06ecb8accc6c84e43324f104091abf9c
import  -/  Helpers.Math 90663dbd1f1fc19916d7ba5eca912c3f
  exports: 855ca1e90ac297801c0ea414b55a5b9e
  ceilDiv 63bcb7aea1e77dc7cd736f351a44ff96
import  -/  PegBoard f83d3917c805320b9d1eddcc14783c79
  exports: 019cb6a33f1bb6c7b9bb5da6116f70e8
  Board 811b281511fb95d934048eb55c0228c6
  Board c47801c17d6fbde18b84e473ce510507
  Coord a7a7404edac42fd75996faf0c0163f41
  Coord 175aeaab41cec97be39a9c7cdcc5b317
221d687c4d3d50531bd2b7f10f500d19
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CriticalPoints.$trModule2
                   CriticalPoints.$trModule1) -}
445265a04e3085bdaa817d2d1ff94033
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CriticalPoints"#) -}
99222bcf5d7db76c15d8f95d090a2e84
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2"#) -}
54b7bca823006ad05e89a9b4be087d16
  $wbottomRow ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   fail :: GHC.Prim.Void# -> [PegBoard.Coord]
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                     GHC.Base.map
                       @ (PegBoard.Coord, GHC.Types.Bool)
                       @ PegBoard.Coord
                       (Data.Tuple.fst @ PegBoard.Coord @ GHC.Types.Bool)
                       (CriticalPoints.bottomRow_go
                          (Data.OldList.groupBy
                             @ (PegBoard.Coord, GHC.Types.Bool)
                             CriticalPoints.boolRows2
                             (Data.OldList.sortBy
                                @ (PegBoard.Coord, GHC.Types.Bool)
                                CriticalPoints.boolRows1
                                (CriticalPoints.$wtoBoolRow ww ww1)))
                          (GHC.List.lastError @ CriticalPoints.BoolRow))
                 } in
                 case ww of wild {
                   []
                   -> case ww1 of wild1 {
                        [] -> GHC.Types.[] @ PegBoard.Coord
                        : ipv ipv1 -> fail GHC.Prim.void# }
                   : ipv ipv1 -> fail GHC.Prim.void# }) -}
afac776459c9ec99da1e58e56905fe88
  $wconcentricTriangles' ::
    [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [PegBoard.Board]
    -> (# PegBoard.Board, [PegBoard.Board] #)
  {- Arity: 3, Strictness: <S,U><L,U><L,U>, Inline: [0] -}
80b78d8232cc73eaec947e4db7ce0e21
  $wcritPoints ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 case CriticalPoints.$wconcentricTriangles'
                        ww
                        ww1
                        (GHC.Types.[] @ PegBoard.Board) of ww2 { (#,#) ww3 ww4 ->
                 let {
                   tlRows :: [[PegBoard.Coord]]
                   = GHC.Base.map
                       @ PegBoard.Board
                       @ [PegBoard.Coord]
                       CriticalPoints.topLeftRow
                       (GHC.List.reverse1
                          @ PegBoard.Board
                          ww4
                          (GHC.Types.[] @ PegBoard.Board))
                 } in
                 CriticalPoints.critPoints_go
                   tlRows
                   (GHC.Base.map
                      @ [PegBoard.Coord]
                      @ GHC.Types.Int
                      CriticalPoints.critPoints1
                      tlRows) }) -}
15d20885f9c0d5500a23f26fbc88cd8f
  $wlvl ::
    [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> (# [PegBoard.Coord], [PegBoard.Coord] #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><L,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord])
                   (ww1 :: [PegBoard.Coord])
                   (ww2 :: [PegBoard.Coord])[OneShot]
                   (ww3 :: [PegBoard.Coord])[OneShot] ->
                 (# GHC.List.filter
                      @ PegBoard.Coord
                      (\ (ds :: PegBoard.Coord) ->
                       case GHC.List.elem
                              @ PegBoard.Coord
                              PegBoard.$fEqCoord
                              ds
                              ww2 of wild {
                         GHC.Types.False -> GHC.Types.True
                         GHC.Types.True -> GHC.Types.False })
                      ww,
                    GHC.List.filter
                      @ PegBoard.Coord
                      (\ (ds :: PegBoard.Coord) ->
                       case GHC.List.elem
                              @ PegBoard.Coord
                              PegBoard.$fEqCoord
                              ds
                              ww3 of wild {
                         GHC.Types.False -> GHC.Types.True
                         GHC.Types.True -> GHC.Types.False })
                      ww1 #)) -}
69601cc13e65c58d114b00a0ece8ec87
  $wlvl1 ::
    [PegBoard.Coord]
    -> [PegBoard.Coord] -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 CriticalPoints.innerTriangle_go2
                   (Helpers.Lists.middle
                      @ CriticalPoints.BoolRow
                      (Data.OldList.groupBy
                         @ (PegBoard.Coord, GHC.Types.Bool)
                         CriticalPoints.boolRows2
                         (Data.OldList.sortBy
                            @ (PegBoard.Coord, GHC.Types.Bool)
                            CriticalPoints.boolRows1
                            (CriticalPoints.$wtoBoolRow ww ww1))))) -}
1621574c18c73760da525ca8ff0c5fb7
  $wtoBoolRow ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> CriticalPoints.BoolRow
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   z :: [(PegBoard.Coord, GHC.Types.Bool)]
                   = GHC.Base.map
                       @ PegBoard.Coord
                       @ (PegBoard.Coord, GHC.Types.Bool)
                       CriticalPoints.bottomRow1
                       ww1
                 } in
                 letrec {
                   go :: [PegBoard.Coord] -> [(PegBoard.Coord, GHC.Types.Bool)]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [PegBoard.Coord]) ->
                     case ds of wild {
                       [] -> z
                       : y ys
                       -> GHC.Types.:
                            @ (PegBoard.Coord, GHC.Types.Bool)
                            (y, GHC.Types.True)
                            (go ys) }
                 } in
                 go ww) -}
0bec21626f0b758a13b924359a11340c
  $wtopLeftRow ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   fail :: GHC.Prim.Void# -> [PegBoard.Coord]
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                     GHC.Base.map
                       @ [(PegBoard.Coord, GHC.Types.Bool)]
                       @ PegBoard.Coord
                       CriticalPoints.topLeftRow1
                       (Data.OldList.groupBy
                          @ (PegBoard.Coord, GHC.Types.Bool)
                          CriticalPoints.boolRows2
                          (Data.OldList.sortBy
                             @ (PegBoard.Coord, GHC.Types.Bool)
                             CriticalPoints.boolRows1
                             (CriticalPoints.$wtoBoolRow ww ww1)))
                 } in
                 case ww of wild {
                   []
                   -> case ww1 of wild1 {
                        [] -> GHC.Types.[] @ PegBoard.Coord
                        : ipv ipv1 -> fail GHC.Prim.void# }
                   : ipv ipv1 -> fail GHC.Prim.void# }) -}
88b5f3a56d0208deca3d98ba69243573
  $wtopLeftRowBR' ::
    [PegBoard.Coord]
    -> [PegBoard.Coord] -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 GHC.Base.map
                   @ [(PegBoard.Coord, GHC.Types.Bool)]
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   (GHC.List.head @ (PegBoard.Coord, GHC.Types.Bool))
                   (Data.OldList.groupBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows2
                      (Data.OldList.sortBy
                         @ (PegBoard.Coord, GHC.Types.Bool)
                         CriticalPoints.boolRows1
                         (CriticalPoints.$wtoBoolRow ww ww1)))) -}
47f6173e72f0c1e9a0861dd6b8be9f22
  $wtopRightRow ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   fail :: GHC.Prim.Void# -> [PegBoard.Coord]
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                     GHC.List.reverse1
                       @ PegBoard.Coord
                       (GHC.Base.map
                          @ [(PegBoard.Coord, GHC.Types.Bool)]
                          @ PegBoard.Coord
                          CriticalPoints.topRightRow1
                          (Data.OldList.groupBy
                             @ (PegBoard.Coord, GHC.Types.Bool)
                             CriticalPoints.boolRows2
                             (Data.OldList.sortBy
                                @ (PegBoard.Coord, GHC.Types.Bool)
                                CriticalPoints.boolRows1
                                (CriticalPoints.$wtoBoolRow ww ww1))))
                       (GHC.Types.[] @ PegBoard.Coord)
                 } in
                 case ww of wild {
                   []
                   -> case ww1 of wild1 {
                        [] -> GHC.Types.[] @ PegBoard.Coord
                        : ipv ipv1 -> fail GHC.Prim.void# }
                   : ipv ipv1 -> fail GHC.Prim.void# }) -}
1c6fd2f6c13ae3b8f6e8a88bead9ba42
  $wtopRightRowBR' ::
    [PegBoard.Coord]
    -> [PegBoard.Coord] -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 GHC.Base.map
                   @ [(PegBoard.Coord, GHC.Types.Bool)]
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   (GHC.List.last @ (PegBoard.Coord, GHC.Types.Bool))
                   (Data.OldList.groupBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows2
                      (Data.OldList.sortBy
                         @ (PegBoard.Coord, GHC.Types.Bool)
                         CriticalPoints.boolRows1
                         (CriticalPoints.$wtoBoolRow ww ww1)))) -}
1f93bb1074de72c9a58f26cbbd4c9493
  type BoolRow = [(PegBoard.Coord, GHC.Types.Bool)]
abfa8500a4e2ef7ad1640eb8a5975df3
  boolRows :: CriticalPoints.BoolRow -> [CriticalPoints.BoolRow]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 Data.OldList.groupBy
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   CriticalPoints.boolRows2
                   (Data.OldList.sortBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows1
                      x)) -}
de6d15174f1c42bbb607c85cab07fbd9
  boolRows1 ::
    (PegBoard.Coord, GHC.Types.Bool)
    -> (PegBoard.Coord, GHC.Types.Bool) -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),A)><S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (PegBoard.Coord, GHC.Types.Bool))
                   (ds1 :: (PegBoard.Coord, GHC.Types.Bool)) ->
                 case ds of wild { (,) c1 ds2 ->
                 case ds1 of wild1 { (,) c2 ds3 ->
                 PegBoard.$fOrdCoord_$ccompare c1 c2 } }) -}
5a10c275b596ba5ab8c81afa3be63483
  boolRows2 ::
    (PegBoard.Coord, GHC.Types.Bool)
    -> (PegBoard.Coord, GHC.Types.Bool) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)L),1*U(1*U(1*U(U),A),A)><S(S(S(S)L)L),1*U(1*U(1*U(U),A),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (PegBoard.Coord, GHC.Types.Bool))
                   (ds1 :: (PegBoard.Coord, GHC.Types.Bool)) ->
                 case ds of wild { (,) ds2 ds3 ->
                 case ds2 of wild1 { PegBoard.Coord a ds4 ->
                 case ds1 of wild2 { (,) ds5 ds6 ->
                 case ds5 of wild3 { PegBoard.Coord b ds7 ->
                 GHC.Classes.eqInt a b } } } }) -}
280d75641670a038f8e16e3ec98640f8
  bottomRow :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wbottomRow ww1 ww2 }) -}
213da02dfc75dd0ecf901b153c80c25e
  bottomRow1 :: PegBoard.Coord -> (PegBoard.Coord, GHC.Types.Bool)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoard.Coord) -> (x, GHC.Types.False)) -}
c55bf29a3890349902f73b06bb0620d5
  bottomRowBR :: CriticalPoints.BoolRow -> CriticalPoints.BoolRow
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (br :: CriticalPoints.BoolRow) ->
                 CriticalPoints.bottomRowBR_go
                   (Data.OldList.groupBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows2
                      (Data.OldList.sortBy
                         @ (PegBoard.Coord, GHC.Types.Bool)
                         CriticalPoints.boolRows1
                         br))
                   (GHC.List.lastError @ CriticalPoints.BoolRow)) -}
119f8b815f92d7e419769266745564a2
  bottomRowBR' :: PegBoard.Board -> CriticalPoints.BoolRow
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoard.Board) ->
                 CriticalPoints.bottomRowBR (CriticalPoints.toBoolRow x)) -}
631ad6a7628df2034b866451f7c5bfa0
  bottomRowBR_go ::
    [CriticalPoints.BoolRow]
    -> CriticalPoints.BoolRow -> CriticalPoints.BoolRow
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
0f0f19745f14c9160debd3d71ec0401a
  bottomRow_go ::
    [CriticalPoints.BoolRow]
    -> CriticalPoints.BoolRow -> CriticalPoints.BoolRow
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
16f24b35507e6c26df4aab14579ddd87
  concentricTriangles :: PegBoard.Board -> [PegBoard.Board]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (b :: PegBoard.Board) ->
                 case CriticalPoints.concentricTriangles'
                        (b, GHC.Types.[] @ PegBoard.Board) of wild { (,) ds1 y ->
                 y }) -}
81ca16b7e3248e76e16e1ce0a820e63e
  concentricTriangles' ::
    (PegBoard.Board, [PegBoard.Board])
    -> (PegBoard.Board, [PegBoard.Board])
  {- Arity: 1, Strictness: <S(S(SL)L),1*U(1*U(U,U),U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (PegBoard.Board, [PegBoard.Board])) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { PegBoard.Board ww4 ww5 ->
                 case CriticalPoints.$wconcentricTriangles'
                        ww4
                        ww5
                        ww2 of ww6 { (#,#) ww7 ww8 ->
                 (ww7, ww8) } } }) -}
284642022d08db4238d3541baaebe457
  concentricTrianglesExclusive :: PegBoard.Board -> [PegBoard.Board]
  {- Arity: 1, Strictness: <L,1*U(U,U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 let {
                   concs :: [PegBoard.Board]
                   = case w of ww { PegBoard.Board ww1 ww2 ->
                     case CriticalPoints.$wconcentricTriangles'
                            ww1
                            ww2
                            (GHC.Types.[] @ PegBoard.Board) of ww3 { (#,#) ww4 ww5 ->
                     ww5 } }
                 } in
                 GHC.Types.:
                   @ PegBoard.Board
                   (GHC.List.head @ PegBoard.Board concs)
                   (Helpers.Lists.compMapR
                      @ PegBoard.Board
                      @ PegBoard.Board
                      CriticalPoints.concentricTrianglesExclusive1
                      concs)) -}
d95095ea3eb28e3d0ebd43834e5a85cb
  concentricTrianglesExclusive1 ::
    PegBoard.Board -> PegBoard.Board -> PegBoard.Board
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U,1*U)><S,1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PegBoard.Board) (w1 :: PegBoard.Board)[OneShot] ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 case w1 of ww3 { PegBoard.Board ww4 ww5 ->
                 case CriticalPoints.$wlvl ww1 ww2 ww4 ww5 of ww6 { (#,#) ww7 ww8 ->
                 PegBoard.Board ww7 ww8 } } }) -}
bc1c11e27a87c9ef8b25686ecd003d5c
  critPoints :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wcritPoints ww1 ww2 }) -}
4c161be7eb2b65c0fc01dbac43f732c3
  critPoints1 :: [PegBoard.Coord] -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [PegBoard.Coord]) ->
                 Helpers.Math.ceilDiv
                   @ GHC.Types.Int
                   GHC.Real.$fIntegralInt
                   (case GHC.List.$wlenAcc @ PegBoard.Coord x 0# of ww2 { DEFAULT ->
                    GHC.Types.I# ww2 })
                   CriticalPoints.critPoints2) -}
9bebff7ff85f3ccb237aa77461db0074
  critPoints2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
5e1f1e40d92d2f6aa8c26172ea13e1c8
  critPoints_go ::
    [[PegBoard.Coord]] -> [GHC.Types.Int] -> [PegBoard.Coord]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
40df3c9c49684112c739d5f05ee7a86a
  innerTriangle :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, Strictness: <L,1*U(1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (b :: PegBoard.Board) ->
                 let {
                   mids :: [(PegBoard.Coord, GHC.Types.Bool)]
                   = CriticalPoints.innerTriangle3 b
                 } in
                 PegBoard.Board
                   (CriticalPoints.innerTriangle2 mids)
                   (CriticalPoints.innerTriangle1 mids)) -}
3e6b8509877db0add98b9a644c44bdd7
  innerTriangle1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 CriticalPoints.innerTriangle_go x) -}
994d9230d2cb34c7ec987af77af4174d
  innerTriangle2 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 CriticalPoints.innerTriangle_go1 x) -}
44716bd9f65f9dc3bb3ce3ec41f05bd3
  innerTriangle3 ::
    PegBoard.Board -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wlvl1 ww1 ww2 }) -}
5103f81f71bfda4660ec437f4a9436e1
  innerTriangle_go ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
caad5756a231378e600177c9edf9524d
  innerTriangle_go1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
8c05f8ddcda98bbc0d6cab5e9750ad18
  innerTriangle_go2 ::
    [[(PegBoard.Coord, GHC.Types.Bool)]]
    -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 1, Strictness: <S,1*U> -}
22e8b7bdc15b58f16589fb2881708686
  rows :: [PegBoard.Coord] -> [[PegBoard.Coord]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (cs :: [PegBoard.Coord]) ->
                 Data.OldList.groupBy
                   @ PegBoard.Coord
                   CriticalPoints.rows1
                   (Data.OldList.sortBy
                      @ PegBoard.Coord
                      PegBoard.$fOrdCoord_$ccompare
                      cs)) -}
51a9329f58c3ae49982a59ec761f9efa
  rows1 :: PegBoard.Coord -> PegBoard.Coord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),A)><S(S(S)L),1*U(1*U(U),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: PegBoard.Coord) (ds1 :: PegBoard.Coord) ->
                 case ds of wild { PegBoard.Coord a ds2 ->
                 case ds1 of wild1 { PegBoard.Coord b ds3 ->
                 GHC.Classes.eqInt a b } }) -}
020a8fa5cc7f1fbf3bb4e20d7c927905
  toBoolRow :: PegBoard.Board -> CriticalPoints.BoolRow
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wtoBoolRow ww1 ww2 }) -}
91e7238be23cecdff18f8e5129e176ef
  toBoolRows :: PegBoard.Board -> [CriticalPoints.BoolRow]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoard.Board) ->
                 Data.OldList.groupBy
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   CriticalPoints.boolRows2
                   (Data.OldList.sortBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows1
                      (CriticalPoints.toBoolRow x))) -}
88749b3be6fff95676b71916a06ad5a7
  topLeftRow :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wtopLeftRow ww1 ww2 }) -}
704237c4ff3de0d68ea4625c65710266
  topLeftRow1 :: [(PegBoard.Coord, GHC.Types.Bool)] -> PegBoard.Coord
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 case x of wild {
                   [] -> case GHC.List.badHead ret_ty PegBoard.Coord of {}
                   : x1 ds1 -> case x1 of wild1 { (,) x2 ds2 -> x2 } }) -}
c8d6494a716d31dcc256b008d2325f5a
  topLeftRowBR :: CriticalPoints.BoolRow -> CriticalPoints.BoolRow
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (br :: CriticalPoints.BoolRow) ->
                 GHC.Base.map
                   @ [(PegBoard.Coord, GHC.Types.Bool)]
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   (GHC.List.head @ (PegBoard.Coord, GHC.Types.Bool))
                   (Data.OldList.groupBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows2
                      (Data.OldList.sortBy
                         @ (PegBoard.Coord, GHC.Types.Bool)
                         CriticalPoints.boolRows1
                         br))) -}
8c6d904d79c0a503c102263944248744
  topLeftRowBR' :: PegBoard.Board -> CriticalPoints.BoolRow
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wtopLeftRowBR' ww1 ww2 }) -}
fbc471c3e1c0f648cd300e01db382de9
  topRightRow :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wtopRightRow ww1 ww2 }) -}
9177de25fba3e99a22a4cd3966df8e69
  topRightRow1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> PegBoard.Coord
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 case CriticalPoints.topRightRow_go
                        x
                        (GHC.List.lastError
                           @ (PegBoard.Coord, GHC.Types.Bool)) of wild { (,) x1 ds1 ->
                 x1 }) -}
76d8a8433e7100b576e98aa74a8bc527
  topRightRowBR :: CriticalPoints.BoolRow -> CriticalPoints.BoolRow
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (br :: CriticalPoints.BoolRow) ->
                 GHC.Base.map
                   @ [(PegBoard.Coord, GHC.Types.Bool)]
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   (GHC.List.last @ (PegBoard.Coord, GHC.Types.Bool))
                   (Data.OldList.groupBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows2
                      (Data.OldList.sortBy
                         @ (PegBoard.Coord, GHC.Types.Bool)
                         CriticalPoints.boolRows1
                         br))) -}
4322e05ed0bbe246a46829dbba529992
  topRightRowBR' :: PegBoard.Board -> CriticalPoints.BoolRow
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wtopRightRowBR' ww1 ww2 }) -}
f2565f5fadcd8edd617c6f409c165735
  topRightRow_go ::
    [(PegBoard.Coord, GHC.Types.Bool)]
    -> (PegBoard.Coord, GHC.Types.Bool)
    -> (PegBoard.Coord, GHC.Types.Bool)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U)> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

