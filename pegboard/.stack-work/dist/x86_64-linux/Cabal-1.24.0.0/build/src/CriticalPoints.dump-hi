
==================== FINAL INTERFACE ====================
2016-11-06 21:48:20.771887 UTC

interface pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:CriticalPoints 8001
  interface hash: 5832c1b547e29b76c6449e31eff8d4ed
  ABI hash: 84f450c5d723c42b7e1981428257d307
  export-list hash: c2877d10d1df7ea97aa94d67af9503b6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  CriticalPoints.boolRows
  CriticalPoints.bottomRow
  CriticalPoints.bottomRowBR
  CriticalPoints.bottomRowBR'
  CriticalPoints.brBool
  CriticalPoints.brCoord
  CriticalPoints.concentricTriangles
  CriticalPoints.concentricTrianglesExclusive
  CriticalPoints.critPoints
  CriticalPoints.innerTriangle
  CriticalPoints.rows
  CriticalPoints.rowsN
  CriticalPoints.rowsP
  CriticalPoints.rowsZ
  CriticalPoints.toBoolRow
  CriticalPoints.toBoolRows
  CriticalPoints.topLeftRow
  CriticalPoints.topLeftRowBR
  CriticalPoints.topLeftRowBR'
  CriticalPoints.topRightRow
  CriticalPoints.topRightRowBR
  CriticalPoints.topRightRowBR'
  CriticalPoints.BoolRow
module dependencies: Helpers.Lists Helpers.Math PegBoard
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  Helpers.Lists 9c52ca015466111e8d572aeb56cfef86
  exports: 975c27250cc63b29bcdfa4d36e613251
  compR 954fde2ef8bcfea3a4ea9d33ff8c4a48
  middle 06ecb8accc6c84e43324f104091abf9c
import  -/  Helpers.Math 90663dbd1f1fc19916d7ba5eca912c3f
  exports: 855ca1e90ac297801c0ea414b55a5b9e
  ceilDiv 63bcb7aea1e77dc7cd736f351a44ff96
import  -/  PegBoard 16e7d4772b49b52e123defa9df61cd8c
  exports: d9e5ef2267766e7ae3b457c51282f54d
  Board dd84e3e13f591df253c023fdeb6d0fac
  Board 88c3b97cf1f38c14492f474b5ab8ce85
  Coord da8073910dff9584368414866999997b
  Coord e848d92561720a4b1c6dee3cfa88409d
  compareN 0223e0cfdc96fc8282f6178edf676da6
  compareP b58e03bab5537bddbca6111613617eb9
  compareZ e848d92561720a4b1c6dee3cfa88409d
  groupTri 35682f39bf034a1e4f295596d5a58d2c
221d687c4d3d50531bd2b7f10f500d19
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CriticalPoints.$trModule2
                   CriticalPoints.$trModule1) -}
445265a04e3085bdaa817d2d1ff94033
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CriticalPoints"#) -}
99222bcf5d7db76c15d8f95d090a2e84
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2"#) -}
f0ab6cf080de27d12f2c2283bbf308c1
  $wbottomRow ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   fail :: GHC.Prim.Void# -> [PegBoard.Coord]
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                     GHC.Base.map
                       @ (PegBoard.Coord, GHC.Types.Bool)
                       @ PegBoard.Coord
                       (Data.Tuple.fst @ PegBoard.Coord @ GHC.Types.Bool)
                       (CriticalPoints.bottomRow_go
                          (Data.OldList.groupBy
                             @ (PegBoard.Coord, GHC.Types.Bool)
                             CriticalPoints.boolRows2
                             (Data.OldList.sortBy
                                @ (PegBoard.Coord, GHC.Types.Bool)
                                CriticalPoints.boolRows1
                                (CriticalPoints.$wtoBoolRow ww ww1)))
                          (GHC.List.lastError @ CriticalPoints.BoolRow))
                 } in
                 case ww of wild {
                   []
                   -> case ww1 of wild1 {
                        [] -> GHC.Types.[] @ PegBoard.Coord
                        : ipv ipv1 -> fail GHC.Prim.void# }
                   : ipv ipv1 -> fail GHC.Prim.void# }) -}
3cbe1f371485cf2647ef5c54ec494c59
  $wconcentricTriangles' ::
    [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [PegBoard.Board]
    -> (# PegBoard.Board, [PegBoard.Board] #)
  {- Arity: 3, Strictness: <S,U><L,U><L,U>, Inline: [0] -}
3f62c18a550a4e8d552c42239a025ed6
  $wcritPoints ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 case CriticalPoints.$wconcentricTriangles'
                        ww
                        ww1
                        (GHC.Types.[] @ PegBoard.Board) of ww2 { (#,#) ww3 ww4 ->
                 let {
                   tlRows :: [[PegBoard.Coord]]
                   = GHC.Base.map
                       @ PegBoard.Board
                       @ [PegBoard.Coord]
                       CriticalPoints.topLeftRow
                       (GHC.List.reverse1
                          @ PegBoard.Board
                          ww4
                          (GHC.Types.[] @ PegBoard.Board))
                 } in
                 CriticalPoints.critPoints_go
                   tlRows
                   (GHC.Base.map
                      @ [PegBoard.Coord]
                      @ GHC.Types.Int
                      CriticalPoints.critPoints1
                      tlRows) }) -}
62ea93cb7bafa244bb4afd01df704678
  $wlvl ::
    [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> [PegBoard.Coord]
    -> (# [PegBoard.Coord], [PegBoard.Coord] #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><L,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord])
                   (ww1 :: [PegBoard.Coord])
                   (ww2 :: [PegBoard.Coord])[OneShot]
                   (ww3 :: [PegBoard.Coord])[OneShot] ->
                 (# GHC.List.filter
                      @ PegBoard.Coord
                      (\ (ds :: PegBoard.Coord) ->
                       case GHC.List.elem
                              @ PegBoard.Coord
                              PegBoard.$fEqCoord
                              ds
                              ww2 of wild {
                         GHC.Types.False -> GHC.Types.True
                         GHC.Types.True -> GHC.Types.False })
                      ww,
                    GHC.List.filter
                      @ PegBoard.Coord
                      (\ (ds :: PegBoard.Coord) ->
                       case GHC.List.elem
                              @ PegBoard.Coord
                              PegBoard.$fEqCoord
                              ds
                              ww3 of wild {
                         GHC.Types.False -> GHC.Types.True
                         GHC.Types.True -> GHC.Types.False })
                      ww1 #)) -}
83420a5abb21beb37463686c7ca67488
  $wlvl1 ::
    [PegBoard.Coord]
    -> [PegBoard.Coord] -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 CriticalPoints.innerTriangle_go2
                   (Helpers.Lists.middle
                      @ CriticalPoints.BoolRow
                      (Data.OldList.groupBy
                         @ (PegBoard.Coord, GHC.Types.Bool)
                         CriticalPoints.boolRows2
                         (Data.OldList.sortBy
                            @ (PegBoard.Coord, GHC.Types.Bool)
                            CriticalPoints.boolRows1
                            (CriticalPoints.$wtoBoolRow ww ww1))))) -}
d5f385c3b3ed02d4c1fc6f793924567d
  $wtoBoolRow ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> CriticalPoints.BoolRow
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   z :: [(PegBoard.Coord, GHC.Types.Bool)]
                   = GHC.Base.map
                       @ PegBoard.Coord
                       @ (PegBoard.Coord, GHC.Types.Bool)
                       CriticalPoints.bottomRow1
                       ww1
                 } in
                 letrec {
                   go :: [PegBoard.Coord] -> [(PegBoard.Coord, GHC.Types.Bool)]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [PegBoard.Coord]) ->
                     case ds of wild {
                       [] -> z
                       : y ys
                       -> GHC.Types.:
                            @ (PegBoard.Coord, GHC.Types.Bool)
                            (y, GHC.Types.True)
                            (go ys) }
                 } in
                 go ww) -}
9e2a793aadd4bf74c5fe10d56e429c1d
  $wtopLeftRow ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   fail :: GHC.Prim.Void# -> [PegBoard.Coord]
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                     GHC.Base.map
                       @ [(PegBoard.Coord, GHC.Types.Bool)]
                       @ PegBoard.Coord
                       CriticalPoints.topLeftRow1
                       (Data.OldList.groupBy
                          @ (PegBoard.Coord, GHC.Types.Bool)
                          CriticalPoints.boolRows2
                          (Data.OldList.sortBy
                             @ (PegBoard.Coord, GHC.Types.Bool)
                             CriticalPoints.boolRows1
                             (CriticalPoints.$wtoBoolRow ww ww1)))
                 } in
                 case ww of wild {
                   []
                   -> case ww1 of wild1 {
                        [] -> GHC.Types.[] @ PegBoard.Coord
                        : ipv ipv1 -> fail GHC.Prim.void# }
                   : ipv ipv1 -> fail GHC.Prim.void# }) -}
cbd677c262ab484740a2a9ae64416cdb
  $wtopLeftRowBR' ::
    [PegBoard.Coord]
    -> [PegBoard.Coord] -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 GHC.Base.map
                   @ [(PegBoard.Coord, GHC.Types.Bool)]
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   (GHC.List.head @ (PegBoard.Coord, GHC.Types.Bool))
                   (Data.OldList.groupBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows2
                      (Data.OldList.sortBy
                         @ (PegBoard.Coord, GHC.Types.Bool)
                         CriticalPoints.boolRows1
                         (CriticalPoints.$wtoBoolRow ww ww1)))) -}
e23f338c83e28cea25a32383d506e9bf
  $wtopRightRow ::
    [PegBoard.Coord] -> [PegBoard.Coord] -> [PegBoard.Coord]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 let {
                   fail :: GHC.Prim.Void# -> [PegBoard.Coord]
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                     GHC.List.reverse1
                       @ PegBoard.Coord
                       (GHC.Base.map
                          @ [(PegBoard.Coord, GHC.Types.Bool)]
                          @ PegBoard.Coord
                          CriticalPoints.topRightRow1
                          (Data.OldList.groupBy
                             @ (PegBoard.Coord, GHC.Types.Bool)
                             CriticalPoints.boolRows2
                             (Data.OldList.sortBy
                                @ (PegBoard.Coord, GHC.Types.Bool)
                                CriticalPoints.boolRows1
                                (CriticalPoints.$wtoBoolRow ww ww1))))
                       (GHC.Types.[] @ PegBoard.Coord)
                 } in
                 case ww of wild {
                   []
                   -> case ww1 of wild1 {
                        [] -> GHC.Types.[] @ PegBoard.Coord
                        : ipv ipv1 -> fail GHC.Prim.void# }
                   : ipv ipv1 -> fail GHC.Prim.void# }) -}
6bcc0fb4e33a660d5ee986cfd04fd197
  $wtopRightRowBR' ::
    [PegBoard.Coord]
    -> [PegBoard.Coord] -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [PegBoard.Coord]) (ww1 :: [PegBoard.Coord]) ->
                 GHC.Base.map
                   @ [(PegBoard.Coord, GHC.Types.Bool)]
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   (GHC.List.last @ (PegBoard.Coord, GHC.Types.Bool))
                   (Data.OldList.groupBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows2
                      (Data.OldList.sortBy
                         @ (PegBoard.Coord, GHC.Types.Bool)
                         CriticalPoints.boolRows1
                         (CriticalPoints.$wtoBoolRow ww ww1)))) -}
5116470cb4e14d8837d507287f8c4bce
  type BoolRow = [(PegBoard.Coord, GHC.Types.Bool)]
3833b32bffa2eb0344eb2be82b8dbd57
  boolRows :: CriticalPoints.BoolRow -> [CriticalPoints.BoolRow]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 Data.OldList.groupBy
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   CriticalPoints.boolRows2
                   (Data.OldList.sortBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows1
                      x)) -}
53365cb4343e49dcdbfe104f395fa2da
  boolRows1 ::
    (PegBoard.Coord, GHC.Types.Bool)
    -> (PegBoard.Coord, GHC.Types.Bool) -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),A)><S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (PegBoard.Coord, GHC.Types.Bool))
                   (ds1 :: (PegBoard.Coord, GHC.Types.Bool))[OneShot] ->
                 case ds of wild { (,) c1 ds2 ->
                 case ds1 of wild1 { (,) c2 ds3 -> PegBoard.compareZ c1 c2 } }) -}
a28826729e1b851425294601125310b0
  boolRows2 ::
    (PegBoard.Coord, GHC.Types.Bool)
    -> (PegBoard.Coord, GHC.Types.Bool) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)L),1*U(1*U(1*U(U),A),A)><S(S(S(S)L)L),1*U(1*U(1*U(U),A),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (PegBoard.Coord, GHC.Types.Bool))
                   (ds1 :: (PegBoard.Coord, GHC.Types.Bool)) ->
                 case ds of wild { (,) ds2 ds3 ->
                 case ds2 of wild1 { PegBoard.Coord a ds4 ->
                 case ds1 of wild2 { (,) ds5 ds6 ->
                 case ds5 of wild3 { PegBoard.Coord b ds7 ->
                 GHC.Classes.eqInt a b } } } }) -}
fa9c007f7dc488b09d6ed8a01269583a
  bottomRow :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wbottomRow ww1 ww2 }) -}
11159a0852706ffbe94ed4c160cc0958
  bottomRow1 :: PegBoard.Coord -> (PegBoard.Coord, GHC.Types.Bool)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoard.Coord) -> (x, GHC.Types.False)) -}
d5ce3673a37a6cd38be6da165186b733
  bottomRowBR :: CriticalPoints.BoolRow -> CriticalPoints.BoolRow
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (br :: CriticalPoints.BoolRow) ->
                 CriticalPoints.bottomRowBR_go
                   (Data.OldList.groupBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows2
                      (Data.OldList.sortBy
                         @ (PegBoard.Coord, GHC.Types.Bool)
                         CriticalPoints.boolRows1
                         br))
                   (GHC.List.lastError @ CriticalPoints.BoolRow)) -}
e9a27b72cafd97784295d2b76364e9d5
  bottomRowBR' :: PegBoard.Board -> CriticalPoints.BoolRow
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoard.Board) ->
                 CriticalPoints.bottomRowBR (CriticalPoints.toBoolRow x)) -}
8e4e6e015ab9a8a280a6ba41d87b3778
  bottomRowBR_go ::
    [CriticalPoints.BoolRow]
    -> CriticalPoints.BoolRow -> CriticalPoints.BoolRow
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
4e4f96d70df42a2bd913a7ccd2c20a64
  bottomRow_go ::
    [CriticalPoints.BoolRow]
    -> CriticalPoints.BoolRow -> CriticalPoints.BoolRow
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
301589d003854cb47e240d852aa1da45
  brBool :: CriticalPoints.BoolRow -> [GHC.Types.Bool]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Base.map
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   @ GHC.Types.Bool
                   (Data.Tuple.snd @ PegBoard.Coord @ GHC.Types.Bool)) -}
aac28ec51ce7da9c71584a8de082e423
  brCoord :: CriticalPoints.BoolRow -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Base.map
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   @ PegBoard.Coord
                   (Data.Tuple.fst @ PegBoard.Coord @ GHC.Types.Bool)) -}
57a518eb93e1bc36a4e44ec95fd056b8
  concentricTriangles :: PegBoard.Board -> [PegBoard.Board]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (b :: PegBoard.Board) ->
                 case CriticalPoints.concentricTriangles'
                        (b, GHC.Types.[] @ PegBoard.Board) of wild { (,) ds1 y ->
                 y }) -}
82ff8b37152398c9fcaa0c3d4ed63abc
  concentricTriangles' ::
    (PegBoard.Board, [PegBoard.Board])
    -> (PegBoard.Board, [PegBoard.Board])
  {- Arity: 1, Strictness: <S(S(SL)L),1*U(1*U(U,U),U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (PegBoard.Board, [PegBoard.Board])) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { PegBoard.Board ww4 ww5 ->
                 case CriticalPoints.$wconcentricTriangles'
                        ww4
                        ww5
                        ww2 of ww6 { (#,#) ww7 ww8 ->
                 (ww7, ww8) } } }) -}
bbdab47f332dcf0be8f2394fb76e2d3d
  concentricTrianglesExclusive :: PegBoard.Board -> [PegBoard.Board]
  {- Arity: 1, Strictness: <L,1*U(U,U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 let {
                   concs :: [PegBoard.Board]
                   = case w of ww { PegBoard.Board ww1 ww2 ->
                     case CriticalPoints.$wconcentricTriangles'
                            ww1
                            ww2
                            (GHC.Types.[] @ PegBoard.Board) of ww3 { (#,#) ww4 ww5 ->
                     ww5 } }
                 } in
                 GHC.Types.:
                   @ PegBoard.Board
                   (GHC.List.head @ PegBoard.Board concs)
                   (Helpers.Lists.compMapR
                      @ PegBoard.Board
                      @ PegBoard.Board
                      CriticalPoints.concentricTrianglesExclusive1
                      concs)) -}
43d2e628db2a36e3102e1c944f2fe568
  concentricTrianglesExclusive1 ::
    PegBoard.Board -> PegBoard.Board -> PegBoard.Board
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U,1*U)><S,1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PegBoard.Board) (w1 :: PegBoard.Board)[OneShot] ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 case w1 of ww3 { PegBoard.Board ww4 ww5 ->
                 case CriticalPoints.$wlvl ww1 ww2 ww4 ww5 of ww6 { (#,#) ww7 ww8 ->
                 PegBoard.Board ww7 ww8 } } }) -}
4753a6795c91b75d493c7aee13e98796
  critPoints :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wcritPoints ww1 ww2 }) -}
e62e87920c4a8b40fb9cce91f4d3437f
  critPoints1 :: [PegBoard.Coord] -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [PegBoard.Coord]) ->
                 Helpers.Math.ceilDiv
                   @ GHC.Types.Int
                   GHC.Real.$fIntegralInt
                   (case GHC.List.$wlenAcc @ PegBoard.Coord x 0# of ww2 { DEFAULT ->
                    GHC.Types.I# ww2 })
                   CriticalPoints.critPoints2) -}
9bebff7ff85f3ccb237aa77461db0074
  critPoints2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
4cb84fa04ac036c333e5252664357d6c
  critPoints_go ::
    [[PegBoard.Coord]] -> [GHC.Types.Int] -> [PegBoard.Coord]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
daa46dbf1ee6810761b1c1b2ec07b95b
  innerTriangle :: PegBoard.Board -> PegBoard.Board
  {- Arity: 1, Strictness: <L,1*U(1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (b :: PegBoard.Board) ->
                 let {
                   mids :: [(PegBoard.Coord, GHC.Types.Bool)]
                   = CriticalPoints.innerTriangle3 b
                 } in
                 PegBoard.Board
                   (CriticalPoints.innerTriangle2 mids)
                   (CriticalPoints.innerTriangle1 mids)) -}
1e9b5d879ef76b5145702a5096e0d929
  innerTriangle1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 CriticalPoints.innerTriangle_go x) -}
953f4ecf80748d6151636bca012405a3
  innerTriangle2 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 CriticalPoints.innerTriangle_go1 x) -}
c6390afb7fb07ade15614b45bf8b4447
  innerTriangle3 ::
    PegBoard.Board -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wlvl1 ww1 ww2 }) -}
40a40d76896acdbd9f9f6df0e44b445f
  innerTriangle_go ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
700067ac41ae450ece662aea01d323d2
  innerTriangle_go1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> [PegBoard.Coord]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
baee30993f35263ea7cdf472ce483952
  innerTriangle_go2 ::
    [[(PegBoard.Coord, GHC.Types.Bool)]]
    -> [(PegBoard.Coord, GHC.Types.Bool)]
  {- Arity: 1, Strictness: <S,1*U> -}
ef6fe62a876127d3b96c5c9e544d43a6
  rows :: [PegBoard.Coord] -> [[PegBoard.Coord]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (cs :: [PegBoard.Coord]) ->
                 Data.OldList.groupBy
                   @ PegBoard.Coord
                   CriticalPoints.rows1
                   (Data.OldList.sortBy @ PegBoard.Coord PegBoard.compareZ cs)) -}
78d3df9b78e917df955d2d712d45c451
  rows1 :: PegBoard.Coord -> PegBoard.Coord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),A)><S(S(S)L),1*U(1*U(U),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: PegBoard.Coord) (ds1 :: PegBoard.Coord) ->
                 case ds of wild { PegBoard.Coord a ds2 ->
                 case ds1 of wild1 { PegBoard.Coord b ds3 ->
                 GHC.Classes.eqInt a b } }) -}
268bea015779291b9597aae34b6fadfc
  rowsN :: PegBoard.Board -> [CriticalPoints.BoolRow]
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (b :: PegBoard.Board) ->
                 Helpers.Lists.groupWithNs
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   (Data.OldList.sortBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.rowsN1
                      (CriticalPoints.toBoolRow b))
                   PegBoard.groupTri1) -}
5140c8de330ed4163107fd71705541b1
  rowsN1 ::
    (PegBoard.Coord, GHC.Types.Bool)
    -> (PegBoard.Coord, GHC.Types.Bool) -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)S(S))L),1*U(1*U(1*U(U),1*U(U)),A)><S(S(S(S)S(S))L),1*U(1*U(1*U(U),1*U(U)),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (PegBoard.Coord, GHC.Types.Bool))
                   (ds1 :: (PegBoard.Coord, GHC.Types.Bool))[OneShot] ->
                 case ds of wild { (,) c1 ds2 ->
                 case ds1 of wild1 { (,) c2 ds3 -> PegBoard.compareN c1 c2 } }) -}
e9fea0f178166098cb8ed0537b4091f0
  rowsP :: PegBoard.Board -> [CriticalPoints.BoolRow]
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (b :: PegBoard.Board) ->
                 Helpers.Lists.groupWithNs
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   (Data.OldList.sortBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.rowsP1
                      (CriticalPoints.toBoolRow b))
                   PegBoard.groupTri1) -}
827daa2390dbf1eb26c3d371ecfc208e
  rowsP1 ::
    (PegBoard.Coord, GHC.Types.Bool)
    -> (PegBoard.Coord, GHC.Types.Bool) -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LS(S))L),1*U(1*U(1*U(U),1*U(U)),A)><S(S(LS(S))L),1*U(1*U(1*U(U),1*U(U)),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (PegBoard.Coord, GHC.Types.Bool))
                   (ds1 :: (PegBoard.Coord, GHC.Types.Bool))[OneShot] ->
                 case ds of wild { (,) c1 ds2 ->
                 case ds1 of wild1 { (,) c2 ds3 -> PegBoard.compareP c1 c2 } }) -}
512e72f69f168ef893e22280332281d5
  rowsZ :: PegBoard.Board -> [CriticalPoints.BoolRow]
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (b :: PegBoard.Board) ->
                 Helpers.Lists.groupWithNs
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   (Data.OldList.sortBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows1
                      (CriticalPoints.toBoolRow b))
                   PegBoard.groupTri1) -}
2c5806c0cb7dd5ff1140498ce94f44be
  toBoolRow :: PegBoard.Board -> CriticalPoints.BoolRow
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wtoBoolRow ww1 ww2 }) -}
2b2510da177c9cfcf9957441527fcb99
  toBoolRows :: PegBoard.Board -> [CriticalPoints.BoolRow]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PegBoard.Board) ->
                 Data.OldList.groupBy
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   CriticalPoints.boolRows2
                   (Data.OldList.sortBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows1
                      (CriticalPoints.toBoolRow x))) -}
00add25187b03450bb5a2a27acd67403
  topLeftRow :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wtopLeftRow ww1 ww2 }) -}
af6547fadcace73bf8b38dd6206ec48d
  topLeftRow1 :: [(PegBoard.Coord, GHC.Types.Bool)] -> PegBoard.Coord
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 case x of wild {
                   [] -> case GHC.List.badHead ret_ty PegBoard.Coord of {}
                   : x1 ds1 -> case x1 of wild1 { (,) x2 ds2 -> x2 } }) -}
171568c3298a64d21f58e607a16dbeb3
  topLeftRowBR :: CriticalPoints.BoolRow -> CriticalPoints.BoolRow
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (br :: CriticalPoints.BoolRow) ->
                 GHC.Base.map
                   @ [(PegBoard.Coord, GHC.Types.Bool)]
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   (GHC.List.head @ (PegBoard.Coord, GHC.Types.Bool))
                   (Data.OldList.groupBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows2
                      (Data.OldList.sortBy
                         @ (PegBoard.Coord, GHC.Types.Bool)
                         CriticalPoints.boolRows1
                         br))) -}
253588568ff4a6394d3f680209df754b
  topLeftRowBR' :: PegBoard.Board -> CriticalPoints.BoolRow
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wtopLeftRowBR' ww1 ww2 }) -}
026337f9dc4ff9a597e578fd805e457b
  topRightRow :: PegBoard.Board -> [PegBoard.Coord]
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wtopRightRow ww1 ww2 }) -}
56c4959c91122e2bc51a70fa39013dc0
  topRightRow1 ::
    [(PegBoard.Coord, GHC.Types.Bool)] -> PegBoard.Coord
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [(PegBoard.Coord, GHC.Types.Bool)]) ->
                 case CriticalPoints.topRightRow_go
                        x
                        (GHC.List.lastError
                           @ (PegBoard.Coord, GHC.Types.Bool)) of wild { (,) x1 ds1 ->
                 x1 }) -}
7a99bd208702949e58a9890e3d83fde1
  topRightRowBR :: CriticalPoints.BoolRow -> CriticalPoints.BoolRow
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (br :: CriticalPoints.BoolRow) ->
                 GHC.Base.map
                   @ [(PegBoard.Coord, GHC.Types.Bool)]
                   @ (PegBoard.Coord, GHC.Types.Bool)
                   (GHC.List.last @ (PegBoard.Coord, GHC.Types.Bool))
                   (Data.OldList.groupBy
                      @ (PegBoard.Coord, GHC.Types.Bool)
                      CriticalPoints.boolRows2
                      (Data.OldList.sortBy
                         @ (PegBoard.Coord, GHC.Types.Bool)
                         CriticalPoints.boolRows1
                         br))) -}
6910bd66af029fcbee1ffb677d2b8d07
  topRightRowBR' :: PegBoard.Board -> CriticalPoints.BoolRow
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PegBoard.Board) ->
                 case w of ww { PegBoard.Board ww1 ww2 ->
                 CriticalPoints.$wtopRightRowBR' ww1 ww2 }) -}
0d9ac269dab4a0667fcc278424e3328e
  topRightRow_go ::
    [(PegBoard.Coord, GHC.Types.Bool)]
    -> (PegBoard.Coord, GHC.Types.Bool)
    -> (PegBoard.Coord, GHC.Types.Bool)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U)> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

