
==================== FINAL INTERFACE ====================
2016-11-04 01:54:14.456476 UTC

interface main@main:Main 8001
  interface hash: c8dd44a53feb2b418b08d788126ee123
  ABI hash: 66fbd4918daeaf408b60591fcb78ed29
  export-list hash: e44e0e9f2cfd601fc41ac3b7d783e331
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 267082d0d2ca8f2a883a57b6af67b713
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.b
  Main.b'
  Main.bl
  Main.boardInfo
  Main.concB
  Main.concB'
  Main.main
  Main.printBoard
  Main.solution
  Main.solveFor
module dependencies:
package dependencies: GLURaw-2.0.0.2@GLURaw-2.0.0.2-FbcPHzTa7vLEnCQ0kkJ8B4
                      GLUT-2.7.0.10@GLUT-2.7.0.10-A3NqGto8XAVI0ysflkZZW9
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-HHHIolNI8Pm5H3OGkgSUrO
                      OpenGL-3.0.1.0@OpenGL-3.0.1.0-2SQfSEFR02AIolFfoam9tJ
                      OpenGLRaw-3.2.2.0@OpenGLRaw-3.2.2.0-KWU3ruQNCGR7AsVafRovL
                      StateVar-1.1.0.4@StateVar-1.1.0.4-CJpWsiXJdd89SnV9dZtTwc
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bmp-1.2.6.3@bmp-1.2.6.3-KF4xHl5RTVIp6NQI8dI2I
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fixed-0.2.1.1@fixed-0.2.1.1-21JkkJmr6h52cZo1o8cauA ghc-prim-0.5.0.0
                      gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB
                      gloss-rendering-1.10.3.3@gloss-rendering-1.10.3.3-5PiCamqHfbt8xiRs4ymvLr
                      half-0.2.2.3@half-0.2.2.3-BFHx0LiJemg6baNXrjGThF
                      integer-gmp-1.0.0.1
                      pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         gloss-rendering-1.10.3.3@gloss-rendering-1.10.3.3-5PiCamqHfbt8xiRs4ymvLr:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB:Graphics.Gloss d5b982018b0c758f00994fce74453c04
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Analytics c337e057a4fc773bbf2eda70214c541c
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:CriticalPoints af57f81cf1244d8ee38733403d6a3642
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Graphics e547fb6ef30841409dde2abfedf11d16
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Helpers.Lists 9c52ca015466111e8d572aeb56cfef86
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:PegBoard f83d3917c805320b9d1eddcc14783c79
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:PegBoardMove 6b2a07cc3e4194300af399f9eca54945
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:PlayGame 90b8a2c11e907728616d6d622e239b7c
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Solve b61452cd6cd2d8417455d0e78366869f
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Symmetries 59509b803e0701c0fd42c318a7f26e01
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
4e38d15ce0b59949a4848e411e774dbb
  b :: PegBoard.Board
  {- Unfolding: (case PegBoard.$wmakeBoard
                        Main.b3 of ww { (#,#) ww1 ww2 ->
                 case PegBoard.$wremovePeg Main.b1 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 PegBoard.Board ww4 ww5 } }) -}
5b9221d6ddba90710b5ac791526d8507
  b' :: [PegBoard.Board]
  {- Unfolding: (case Main.bl of wild { PlayGame.BoardLog b4 bl1 ->
                 GHC.List.reverse1
                   @ PegBoard.Board
                   (GHC.Types.: @ PegBoard.Board b4 bl1)
                   (GHC.Types.[] @ PegBoard.Board) }) -}
75f45ccaa146286ef4a5d08568514749
  b1 :: PegBoard.Coord
  {- HasNoCafRefs, Unfolding: (PegBoard.Coord Main.b2 Main.b2) -}
47bad64b76482af8b80d6600a4029f6e
  b2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
5ccc98defcf0e6c43b885fdfd9dec78c
  b3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5#) -}
03a7190da83c99ace387f2a1b5f73fce
  bl :: PlayGame.BoardLog
  {- Unfolding: (Main.solveFor Main.b Main.b2) -}
7a2af0f4d86ad9b993d8c090f7415087
  boardInfo :: PlayGame.BoardLog -> [GHC.Base.String]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (blog :: PlayGame.BoardLog) -> Main.boardInfo1) -}
437ea8a2e6ddf14ab2f853a24907a6e7
  boardInfo1 :: [[GHC.Types.Char]]
  {- Unfolding: (case Main.bl of wild { PlayGame.BoardLog b4 bl1 ->
                 Helpers.Lists.concatZip1
                   @ [GHC.Types.Char]
                   (Main.boardInfo_go
                      (GHC.List.reverse1
                         @ PegBoard.Board
                         (GHC.Types.: @ PegBoard.Board b4 bl1)
                         (GHC.Types.[] @ PegBoard.Board))
                      (GHC.Base.map
                         @ PegBoard.Board
                         @ Symmetries.Symmetries
                         Symmetries.findSymmetries
                         (GHC.List.reverse1
                            @ PegBoard.Board
                            (GHC.Types.: @ PegBoard.Board b4 bl1)
                            (GHC.Types.[] @ PegBoard.Board))))
                   (GHC.Base.map
                      @ PegBoard.Board
                      @ [GHC.Types.Char]
                      PegBoard.showBoard
                      (GHC.List.reverse1
                         @ PegBoard.Board
                         (GHC.Types.: @ PegBoard.Board b4 bl1)
                         (GHC.Types.[] @ PegBoard.Board))) }) -}
d16f8eaeb434666b78edc1ad66c60df4
  boardInfo_go ::
    [PegBoard.Board] -> [Symmetries.Symmetries] -> [[GHC.Types.Char]]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
e133ef4962c19cdd0ad6516435ef9fe1
  concB :: [PegBoard.Board]
  {- Unfolding: (case Main.b of ww3 { PegBoard.Board ww4 ww5 ->
                 case CriticalPoints.$wconcentricTriangles'
                        ww4
                        ww5
                        (GHC.Types.[] @ PegBoard.Board) of ww6 { (#,#) ww7 ww8 ->
                 ww8 } }) -}
9f9edb76349d739515c69a38ea6aeedd
  concB' :: [PegBoard.Board]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ PegBoard.Board
                   Main.concB'2
                   Main.concB'1) -}
7ed599a49ec6190b31c3ee1122301897
  concB'1 :: [PegBoard.Board]
  {- Unfolding: (Helpers.Lists.compMapR
                   @ PegBoard.Board
                   @ PegBoard.Board
                   CriticalPoints.concentricTrianglesExclusive1
                   Main.concB) -}
d1c3d940ccb1aa2a023a73dc5f9155e4
  concB'2 :: PegBoard.Board
  {- Unfolding: (case Main.concB of wild {
                   [] -> GHC.List.badHead @ PegBoard.Board : x ds1 -> x }) -}
29604dac755bd1c4da9c5936b6cfae87
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Solve.promptSolve1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
8cbe3735b33b37afbf7ca54bd04a2b02
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Solve.promptSolve1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
aa190557b005460b3c54ab2d683f7434
  printBoard :: PegBoard.Board -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*U(1*U,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.printBoard1
                  `cast`
                (<PegBoard.Board>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
785c50a298df6ea4ef5c4d5d60ff07bc
  printBoard1 ::
    PegBoard.Board
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U(1*U,1*U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PegBoard.Board)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (PegBoard.showBoard x)
                   GHC.Types.True
                   eta) -}
7e24673ff7d9d0ceb9f88ac945ee5aa4
  solution :: PegBoard.Board -> GHC.Types.Int -> [PegBoard.Board]
  {- Arity: 2, Strictness: <L,U><L,U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (b4 :: PegBoard.Board) (eta :: GHC.Types.Int) ->
                 case Main.solveFor b4 eta of wild { PlayGame.BoardLog b5 bl1 ->
                 GHC.List.reverse1
                   @ PegBoard.Board
                   (GHC.Types.: @ PegBoard.Board b5 bl1)
                   (GHC.Types.[] @ PegBoard.Board) }) -}
147fd7c9fb105c3d8dd83c53f36abd94
  solveFor :: PegBoard.Board -> GHC.Types.Int -> PlayGame.BoardLog
  {- Arity: 2, Strictness: <L,U><L,U(U)>,
     Unfolding: (\ (b4 :: PegBoard.Board) (n :: GHC.Types.Int) ->
                 case PlayGame.$wplayLog
                        (GHC.Types.:
                           @ PlayGame.BoardLog
                           (PlayGame.BoardLog b4 (GHC.Types.[] @ PegBoard.Board))
                           (GHC.Types.[] @ PlayGame.BoardLog))
                        (GHC.Types.[] @ PlayGame.BoardLog) of ww3 { (#,#) ww4 ww5 ->
                 case Analytics.endWith n ww5 of wild {
                   [] -> GHC.List.badHead @ PlayGame.BoardLog : x ds1 -> x } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

