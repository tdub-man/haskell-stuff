
==================== FINAL INTERFACE ====================
2016-11-06 21:51:39.804295 UTC

interface main@main:Main 8001
  interface hash: 173a5691710d6bcbf96f925e0ceb0bdd
  ABI hash: 921a56140cbcaad5728a07f9cc6ce1e6
  export-list hash: e44e0e9f2cfd601fc41ac3b7d783e331
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 267082d0d2ca8f2a883a57b6af67b713
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.b
  Main.b'
  Main.bl
  Main.boardInfo
  Main.concB
  Main.concB'
  Main.main
  Main.printBoard
  Main.solution
  Main.solveFor
module dependencies:
package dependencies: GLURaw-2.0.0.2@GLURaw-2.0.0.2-FbcPHzTa7vLEnCQ0kkJ8B4
                      GLUT-2.7.0.10@GLUT-2.7.0.10-A3NqGto8XAVI0ysflkZZW9
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-HHHIolNI8Pm5H3OGkgSUrO
                      OpenGL-3.0.1.0@OpenGL-3.0.1.0-2SQfSEFR02AIolFfoam9tJ
                      OpenGLRaw-3.2.2.0@OpenGLRaw-3.2.2.0-KWU3ruQNCGR7AsVafRovL
                      StateVar-1.1.0.4@StateVar-1.1.0.4-CJpWsiXJdd89SnV9dZtTwc
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bmp-1.2.6.3@bmp-1.2.6.3-KF4xHl5RTVIp6NQI8dI2I
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fixed-0.2.1.1@fixed-0.2.1.1-21JkkJmr6h52cZo1o8cauA ghc-prim-0.5.0.0
                      gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB
                      gloss-rendering-1.10.3.3@gloss-rendering-1.10.3.3-5PiCamqHfbt8xiRs4ymvLr
                      half-0.2.2.3@half-0.2.2.3-BFHx0LiJemg6baNXrjGThF
                      integer-gmp-1.0.0.1
                      pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         gloss-rendering-1.10.3.3@gloss-rendering-1.10.3.3-5PiCamqHfbt8xiRs4ymvLr:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  gloss-1.10.2.3@gloss-1.10.2.3-1DblAUc5fHk3Q1eprjU9FB:Graphics.Gloss d5b982018b0c758f00994fce74453c04
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Analytics 1543e36474362e7448e76534aa15995b
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:CriticalPoints 84f450c5d723c42b7e1981428257d307
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Graphics 0bde4143f519ae9bcb6cc3f2ae806160
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Helpers.Lists 9c52ca015466111e8d572aeb56cfef86
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:PegBoard 16e7d4772b49b52e123defa9df61cd8c
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:PegBoardMove 916e67d09fe4159a916059e4bcb4c825
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:PlayGame 33dcc890daf23cb58c28e0429f285f74
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Solve 142e584bd122979c9020137bb74ae454
import  -/  pegboard-0.1.0.0@pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Symmetries 7fb9a7b1bcbe991b68023121dbc5d406
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
c681d1246b9773546f1df5616aa1ae7b
  b :: PegBoard.Board
  {- Unfolding: (case PegBoard.$wmakeBoard
                        Main.b8 of ww { (#,#) ww1 ww2 ->
                 case PegBoard.$wremovePeg Main.b7 ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 case PegBoard.$wremovePeg Main.b5 ww4 ww5 of ww7 { (#,#) ww8 ww9 ->
                 case PegBoard.$wremovePeg
                        Main.b3
                        ww8
                        ww9 of ww10 { (#,#) ww11 ww12 ->
                 case PegBoard.$wremovePeg
                        Main.b1
                        ww11
                        ww12 of ww13 { (#,#) ww14 ww15 ->
                 PegBoard.Board ww14 ww15 } } } } }) -}
4f0817963a4bc189ad738695ce1067ca
  b' :: [PegBoard.Board]
  {- Unfolding: (case Main.bl of wild { PlayGame.BoardLog b9 bl1 ->
                 GHC.List.reverse1
                   @ PegBoard.Board
                   (GHC.Types.: @ PegBoard.Board b9 bl1)
                   (GHC.Types.[] @ PegBoard.Board) }) -}
9570a8d266f522d8aa853ddeeccaca06
  b1 :: PegBoard.Coord
  {- HasNoCafRefs, Unfolding: (PegBoard.Coord Main.b2 Main.b2) -}
47bad64b76482af8b80d6600a4029f6e
  b2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
55a3a90b05c675862929205ed0423f1d
  b3 :: PegBoard.Coord
  {- HasNoCafRefs, Unfolding: (PegBoard.Coord Main.b4 Main.b2) -}
b381b53e9e60e516906f598ee3d36128
  b4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2#) -}
2844463fc9931d91a0caaaf85a1eb8c5
  b5 :: PegBoard.Coord
  {- HasNoCafRefs, Unfolding: (PegBoard.Coord Main.b6 Main.b2) -}
05cb7eb6f792b356b59808d74ff13672
  b6 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 3#) -}
e8ba992b1b11037b698976b004525c9c
  b7 :: PegBoard.Coord
  {- HasNoCafRefs, Unfolding: (PegBoard.Coord Main.b6 Main.b4) -}
fbf57d36422cb9ed55c20a0fdf59ee33
  b8 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5#) -}
f96d2b0c8dead0c3278f37587c2d343f
  bl :: PlayGame.BoardLog
  {- Unfolding: (Main.solveFor Main.b Main.b2) -}
0cfd701814fe684532435565ef608635
  boardInfo :: PlayGame.BoardLog -> [GHC.Base.String]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (blog :: PlayGame.BoardLog) -> Main.boardInfo1) -}
28c920b9cf78bb7d542a9abac6023049
  boardInfo1 :: [[GHC.Types.Char]]
  {- Unfolding: (case Main.bl of wild { PlayGame.BoardLog b9 bl1 ->
                 Helpers.Lists.concatZip1
                   @ [GHC.Types.Char]
                   (Main.boardInfo_go
                      (GHC.List.reverse1
                         @ PegBoard.Board
                         (GHC.Types.: @ PegBoard.Board b9 bl1)
                         (GHC.Types.[] @ PegBoard.Board))
                      (GHC.Base.map
                         @ PegBoard.Board
                         @ Symmetries.Symmetries
                         Symmetries.findSymmetries
                         (GHC.List.reverse1
                            @ PegBoard.Board
                            (GHC.Types.: @ PegBoard.Board b9 bl1)
                            (GHC.Types.[] @ PegBoard.Board))))
                   (GHC.Base.map
                      @ PegBoard.Board
                      @ [GHC.Types.Char]
                      PegBoard.showBoard
                      (GHC.List.reverse1
                         @ PegBoard.Board
                         (GHC.Types.: @ PegBoard.Board b9 bl1)
                         (GHC.Types.[] @ PegBoard.Board))) }) -}
58a070345036c09d12c2d97eeae4eb3e
  boardInfo_go ::
    [PegBoard.Board] -> [Symmetries.Symmetries] -> [[GHC.Types.Char]]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
766dce05753ca2dca59367b95cf5bf34
  concB :: [PegBoard.Board]
  {- Unfolding: (case Main.b of ww3 { PegBoard.Board ww4 ww5 ->
                 case CriticalPoints.$wconcentricTriangles'
                        ww4
                        ww5
                        (GHC.Types.[] @ PegBoard.Board) of ww6 { (#,#) ww7 ww8 ->
                 ww8 } }) -}
dd5717e6c8b8cb505f322d792398b3c9
  concB' :: [PegBoard.Board]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ PegBoard.Board
                   Main.concB'2
                   Main.concB'1) -}
6c1208310fd98a83badd5348f8fa6154
  concB'1 :: [PegBoard.Board]
  {- Unfolding: (Helpers.Lists.compMapR
                   @ PegBoard.Board
                   @ PegBoard.Board
                   CriticalPoints.concentricTrianglesExclusive1
                   Main.concB) -}
8b5f27b8228f177152746a671652f2d4
  concB'2 :: PegBoard.Board
  {- Unfolding: (case Main.concB of wild {
                   [] -> GHC.List.badHead @ PegBoard.Board : x ds1 -> x }) -}
36b08250565ce8a77f95c4a6394af9c1
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Solve.promptSolve1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
6fb4cdd148153a1fbb6701762065d081
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Solve.promptSolve1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
65bd044bbd781550d3cb4089029b4be1
  printBoard :: PegBoard.Board -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*U(1*U,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.printBoard1
                  `cast`
                (<PegBoard.Board>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b88dfb5c3f24900e152e36c5e1d63ad8
  printBoard1 ::
    PegBoard.Board
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U(1*U,1*U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PegBoard.Board)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (PegBoard.showBoard x)
                   GHC.Types.True
                   eta) -}
9601062264d3928a743804c7f7e6c115
  solution :: PegBoard.Board -> GHC.Types.Int -> [PegBoard.Board]
  {- Arity: 2, Strictness: <L,U><L,U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (b9 :: PegBoard.Board) (eta :: GHC.Types.Int) ->
                 case Main.solveFor b9 eta of wild { PlayGame.BoardLog b10 bl1 ->
                 GHC.List.reverse1
                   @ PegBoard.Board
                   (GHC.Types.: @ PegBoard.Board b10 bl1)
                   (GHC.Types.[] @ PegBoard.Board) }) -}
b9318f751032920619debba88fd7f4e4
  solveFor :: PegBoard.Board -> GHC.Types.Int -> PlayGame.BoardLog
  {- Arity: 2, Strictness: <L,U><L,U(U)>,
     Unfolding: (\ (b9 :: PegBoard.Board) (n :: GHC.Types.Int) ->
                 case PlayGame.$wplayLog
                        (GHC.Types.:
                           @ PlayGame.BoardLog
                           (PlayGame.BoardLog b9 (GHC.Types.[] @ PegBoard.Board))
                           (GHC.Types.[] @ PlayGame.BoardLog))
                        (GHC.Types.[] @ PlayGame.BoardLog) of ww3 { (#,#) ww4 ww5 ->
                 case Analytics.endWith n ww5 of wild {
                   [] -> GHC.List.badHead @ PlayGame.BoardLog : x ds1 -> x } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

