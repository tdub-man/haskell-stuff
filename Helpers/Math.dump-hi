
==================== FINAL INTERFACE ====================
2016-09-22 00:16:06.042262 UTC

interface pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Helpers.Math 8001
  interface hash: 52a2e68ce8d9a80b9e334a90881e35a4
  ABI hash: 90663dbd1f1fc19916d7ba5eca912c3f
  export-list hash: 855ca1e90ac297801c0ea414b55a5b9e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 26a9cef2e206292a6429980afe6f734d
  sig of: Nothing
  used TH splices: False
  where
exports:
  Helpers.Math..^
  Helpers.Math.ceilDiv
  Helpers.Math.dist
  Helpers.Math.divTimes
  Helpers.Math.evens
  Helpers.Math.factorial
  Helpers.Math.intSize
  Helpers.Math.odds
  Helpers.Math.squareRoot
  Helpers.Math.squares
  Helpers.Math.triangles
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
f8e1b8530ae0cd4793e7305debfb2077
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Helpers.Math.$trModule2
                   Helpers.Math.$trModule1) -}
2882781a035375c0ad3b7b9e43a6e0f3
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Helpers.Math"#) -}
ddd19d6d077a2f4d2bb305e59e2bcda4
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2"#) -}
270b13cd114cffed4f2dd92b605721b5
  $wgo ::
    GHC.Integer.Type.Integer
    -> (# GHC.Integer.Type.Integer, [GHC.Integer.Type.Integer] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
f1c7ce7c9daec7c9fba2b89225c819d8
  $wgo1 ::
    GHC.Integer.Type.Integer
    -> (# GHC.Integer.Type.Integer, [GHC.Integer.Type.Integer] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
300b46c9dc0d188db52d910655313b32
  $wgo2 ::
    GHC.Integer.Type.Integer
    -> (# GHC.Integer.Type.Integer, [GHC.Integer.Type.Integer] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
38f9cd82d590ebd16c7cdc1cf9cdd715
  (.^) :: GHC.Num.Num a => a -> GHC.Integer.Type.Integer -> a
  {- Arity: 3, Strictness: <L,U(A,A,C(C1(U)),A,A,A,C(U))><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (x :: a)
                   (n :: GHC.Integer.Type.Integer) ->
                 GHC.Real.^
                   @ a
                   @ GHC.Integer.Type.Integer
                   $dNum
                   GHC.Real.$fIntegralInteger
                   x
                   n) -}
63bcb7aea1e77dc7cd736f351a44ff96
  ceilDiv :: GHC.Real.Integral a => a -> a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLLLLLLLL),U(1*U,A,A,A,1*C1(C1(U)),1*C1(C1(U)),A,A,A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dIntegral :: GHC.Real.Integral a)
                   (eta :: a)
                   (eta1 :: a) ->
                 let {
                   $dReal :: GHC.Real.Real a = GHC.Real.$p1Integral @ a $dIntegral
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dReal
                 } in
                 case GHC.Classes.==
                        @ a
                        (GHC.Classes.$p1Ord @ a (GHC.Real.$p2Real @ a $dReal))
                        (GHC.Real.mod @ a $dIntegral eta eta1)
                        (GHC.Num.fromInteger @ a $dNum Helpers.Math.ceilDiv2) of wild {
                   GHC.Types.False
                   -> GHC.Num.+
                        @ a
                        $dNum
                        (GHC.Real.div @ a $dIntegral eta eta1)
                        (GHC.Num.fromInteger @ a $dNum Helpers.Math.ceilDiv1)
                   GHC.Types.True -> GHC.Real.div @ a $dIntegral eta eta1 }) -}
4fba7cbfed181b54d5bd937e4b58b109
  ceilDiv1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
6f71b551b636d13ce030231a4d94cd93
  ceilDiv2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
bc21a481b9c53f44ab7771a3e4403606
  dist :: GHC.Num.Num a => a -> a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLC(S)LL),U(A,1*C1(C1(U)),A,A,1*C1(U),A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (a1 :: a) (b :: a) ->
                 GHC.Num.abs @ a $dNum (GHC.Num.- @ a $dNum a1 b)) -}
10bc1a4ca2faa4fee9ecce83f70c4884
  divTimes :: GHC.Real.Integral a => a -> a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,A,1*C1(U),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dIntegral :: GHC.Real.Integral a) (x :: a) ->
                 let {
                   g :: a -> (a, a) = GHC.Real.divMod @ a $dIntegral x
                 } in
                 \ (x1 :: a) -> case g x1 of wild { (,) x2 ds1 -> x2 }) -}
3af5a3314af952cec181bfee9cba951d
  evens :: [GHC.Integer.Type.Integer]
  {- Unfolding: (case Helpers.Math.$wgo
                        Helpers.Math.ceilDiv1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Integer.Type.Integer ww1 ww2 }) -}
3ffa0e1a74fd7392f9817548c75530d1
  factorial :: GHC.Real.Integral a => a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: (\ @ a ($dIntegral :: GHC.Real.Integral a) (eta :: a) ->
                 let {
                   $dReal :: GHC.Real.Real a = GHC.Real.$p1Integral @ a $dIntegral
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dReal
                 } in
                 let {
                   $dOrd :: GHC.Classes.Ord a = GHC.Real.$p2Real @ a $dReal
                 } in
                 let {
                   $dEq :: GHC.Classes.Eq a = GHC.Classes.$p1Ord @ a $dOrd
                 } in
                 case GHC.Classes.==
                        @ a
                        $dEq
                        eta
                        (GHC.Num.fromInteger @ a $dNum Helpers.Math.ceilDiv2) of wild {
                   GHC.Types.False
                   -> let {
                        lvl4 :: a = GHC.Num.fromInteger @ a $dNum Helpers.Math.ceilDiv1
                      } in
                      let {
                        lvl5 :: a = GHC.Num.fromInteger @ a $dNum Helpers.Math.ceilDiv2
                      } in
                      letrec {
                        $wfactHelp :: a -> a -> (# a, GHC.Integer.Type.Integer #)
                          {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
                        = \ (ww :: a) (ww1 :: a) ->
                          case GHC.Classes.== @ a $dEq ww1 lvl5 of wild1 {
                            GHC.Types.False
                            -> $wfactHelp
                                 (GHC.Num.* @ a $dNum ww ww1)
                                 (GHC.Num.- @ a $dNum ww1 lvl4)
                            GHC.Types.True -> (# ww, Helpers.Math.ceilDiv2 #) }
                      } in
                      case $wfactHelp lvl4 eta of ww { (#,#) ww1 ww2 -> ww1 }
                   GHC.Types.True
                   -> GHC.Num.fromInteger @ a $dNum Helpers.Math.ceilDiv1 }) -}
dcc2c521ac54433d8a5d7eb0f5b5d9fb
  intSize :: GHC.Real.Integral a => a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLL),U(U,A,A,A,C(C1(U)),A,A,A,A)><L,U>,
     Unfolding: (\ @ a ($dIntegral :: GHC.Real.Integral a) (eta :: a) ->
                 let {
                   $dReal :: GHC.Real.Real a = GHC.Real.$p1Integral @ a $dIntegral
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dReal
                 } in
                 case GHC.Classes.==
                        @ a
                        (GHC.Classes.$p1Ord @ a (GHC.Real.$p2Real @ a $dReal))
                        eta
                        (GHC.Num.fromInteger @ a $dNum Helpers.Math.ceilDiv2) of wild {
                   GHC.Types.False
                   -> let {
                        lvl4 :: a = GHC.Num.fromInteger @ a $dNum Helpers.Math.ceilDiv2
                      } in
                      let {
                        lvl5 :: a = GHC.Num.fromInteger @ a $dNum Helpers.Math.ceilDiv1
                      } in
                      let {
                        lvl6 :: a = GHC.Num.fromInteger @ a $dNum Helpers.Math.intSize1
                      } in
                      let {
                        $dEq :: GHC.Classes.Ord a = GHC.Real.$p2Real @ a $dReal
                      } in
                      let {
                        $dEq1 :: GHC.Classes.Eq a = GHC.Classes.$p1Ord @ a $dEq
                      } in
                      letrec {
                        $wsizeHelp :: a -> a -> (# a, GHC.Integer.Type.Integer #)
                          {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
                        = \ (ww :: a) (ww1 :: a) ->
                          case GHC.Classes.== @ a $dEq1 ww1 lvl4 of wild1 {
                            GHC.Types.False
                            -> $wsizeHelp
                                 (GHC.Num.+ @ a $dNum ww lvl5)
                                 (GHC.Real.div @ a $dIntegral ww1 lvl6)
                            GHC.Types.True -> (# ww, Helpers.Math.ceilDiv2 #) }
                      } in
                      case $wsizeHelp lvl4 eta of ww { (#,#) ww1 ww2 -> ww1 }
                   GHC.Types.True
                   -> GHC.Num.fromInteger @ a $dNum Helpers.Math.ceilDiv1 }) -}
08e2602af19750cb7db83e6c515801df
  intSize1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10) -}
ad9c27d1d54960936d1eed291b5df157
  odds :: [GHC.Integer.Type.Integer]
  {- Unfolding: (case Helpers.Math.$wgo1
                        Helpers.Math.ceilDiv1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Integer.Type.Integer ww1 ww2 }) -}
060ac452b26c7e9aadb5fd68e7ecdc1a
  squareRoot :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,U> -}
99255fe9c4a54c22176114611f4bb2d7
  squares :: [GHC.Integer.Type.Integer]
  {- Unfolding: (case Helpers.Math.$wgo2
                        Helpers.Math.ceilDiv1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Integer.Type.Integer ww1 ww2 }) -}
813330cbd28dde295830e81693290d85
  triangles :: [GHC.Integer.Type.Integer]
  {- Unfolding: (case GHC.Enum.$wenumDeltaInteger
                        Helpers.Math.ceilDiv1
                        Helpers.Math.ceilDiv1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   ww1
                   (case GHC.List.$wscanlGo
                           @ GHC.Integer.Type.Integer
                           @ GHC.Integer.Type.Integer
                           @ GHC.Integer.Type.Integer
                           @ GHC.Integer.Type.Integer
                           GHC.Integer.Type.plusInteger
                           ww1
                           ww2 of ww4 { (#,#) ww5 ww6 ->
                    ww6 }) }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

