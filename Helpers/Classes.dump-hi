
==================== FINAL INTERFACE ====================
2016-09-22 00:16:05.770861 UTC

interface pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2:Helpers.Classes 8001
  interface hash: ee12ae9987116f7fbcb65234f46ef443
  ABI hash: c56acee61972021ae9a85f81a6052214
  export-list hash: 1134772a5bc551f62770bee84be46688
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: dbce6e0a351d11de79c579207fdd94c6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Helpers.Classes.DistA{Helpers.Classes.distA Helpers.Classes.distMinMaxA Helpers.Classes.midElemA Helpers.Classes.multA}
  Helpers.Classes.DistB{Helpers.Classes.distB Helpers.Classes.distMinMaxB Helpers.Classes.midElemB Helpers.Classes.multB}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
22ad561900dc735351b5c2a2dd7fa4d1
  $dmdistMinMaxA ::
    Helpers.Classes.DistA a n =>
    forall (t :: * -> *). Data.Foldable.Foldable t => t a -> a -> n
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(1*U,A,C(U),C(C1(U)),A,A)><L,U(A,A,A,A,A,A,A,A,A,A,A,A,1*C1(C1(U)),1*C1(C1(U)),A,A)><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   @ n
                   ($dDistA :: Helpers.Classes.DistA a n)
                   @ (t :: * -> *)
                   (eta :: Data.Foldable.Foldable t)
                   (eta1 :: t a) ->
                 let {
                   $dOrd :: GHC.Classes.Ord a
                   = Helpers.Classes.$p1DistA @ a @ n $dDistA
                 } in
                 let {
                   distMax :: a -> n
                   = GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ a
                       @ (a -> n)
                       (Helpers.Classes.distA @ a @ n $dDistA)
                       (Data.Foldable.maximum @ t eta @ a $dOrd eta1)
                 } in
                 let {
                   distMin :: a -> n
                   = GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ a
                       @ (a -> n)
                       (Helpers.Classes.distA @ a @ n $dDistA)
                       (Data.Foldable.minimum @ t eta @ a $dOrd eta1)
                 } in
                 \ (x :: a) ->
                 Helpers.Classes.multA @ a @ n $dDistA (distMin x) (distMax x)) -}
bf8bd49dade0ad593c780f9360fb1c5c
  $dmdistMinMaxB ::
    Helpers.Classes.DistB a n =>
    forall (t :: * -> *).
    Data.Foldable.Foldable t =>
    t (a n) -> a n -> n
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(1*U,A,C(U),C(C1(U)),A,A)><L,U(A,A,A,A,A,A,A,A,A,A,A,A,1*C1(C1(U)),1*C1(C1(U)),A,A)><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ (a :: GHC.Types.* -> GHC.Types.*)
                   @ n
                   ($dDistB :: Helpers.Classes.DistB a n)
                   @ (t :: * -> *)
                   (eta :: Data.Foldable.Foldable t)
                   (eta1 :: t (a n)) ->
                 let {
                   $dOrd :: GHC.Classes.Ord (a n)
                   = Helpers.Classes.$p1DistB @ a @ n $dDistB
                 } in
                 let {
                   distMax :: a n -> n
                   = GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (a n)
                       @ (a n -> n)
                       (Helpers.Classes.distB @ a @ n $dDistB)
                       (Data.Foldable.maximum @ t eta @ (a n) $dOrd eta1)
                 } in
                 let {
                   distMin :: a n -> n
                   = GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (a n)
                       @ (a n -> n)
                       (Helpers.Classes.distB @ a @ n $dDistB)
                       (Data.Foldable.minimum @ t eta @ (a n) $dOrd eta1)
                 } in
                 \ (x :: a n) ->
                 Helpers.Classes.multB @ a @ n $dDistB (distMin x) (distMax x)) -}
5a1cd213efc5aea22f96690e14b206bc
  $dmmidElemA ::
    Helpers.Classes.DistA a n =>
    forall (t :: * -> *). Data.Foldable.Foldable t => t a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,1*U,A,A,1*C1(C1(U)),A)><S(LLLLLLC(C(S))LLLLLLLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   @ n
                   ($dDistA :: Helpers.Classes.DistA a n)
                   @ (t :: * -> *)
                   (eta :: Data.Foldable.Foldable t)
                   (eta1 :: t a) ->
                 let {
                   $dOrd :: GHC.Classes.Ord n
                   = Helpers.Classes.$p2DistA @ a @ n $dDistA
                 } in
                 let {
                   $dEq :: GHC.Classes.Eq n = GHC.Classes.$p1Ord @ n $dOrd
                 } in
                 let {
                   dist' :: a -> n
                   = Helpers.Classes.distMinMaxA @ a @ n $dDistA @ t eta eta1
                 } in
                 Data.Foldable.foldr1
                   @ t
                   eta
                   @ a
                   (\ (a1 :: a) (b :: a) ->
                    let {
                      da :: n = dist' a1
                    } in
                    case GHC.Classes.==
                           @ n
                           $dEq
                           (GHC.Classes.max @ n $dOrd da (dist' b))
                           da of wild {
                      GHC.Types.False -> b GHC.Types.True -> a1 })
                   eta1) -}
f2e7c0446b9377fc5ae619b118ec02ee
  $dmmidElemB ::
    Helpers.Classes.DistB a n =>
    forall (t :: * -> *). Data.Foldable.Foldable t => t (a n) -> a n
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,1*U,A,A,1*C1(C1(U)),A)><S(LLLLLLC(C(S))LLLLLLLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ (a :: GHC.Types.* -> GHC.Types.*)
                   @ n
                   ($dDistB :: Helpers.Classes.DistB a n)
                   @ (t :: * -> *)
                   (eta :: Data.Foldable.Foldable t)
                   (eta1 :: t (a n)) ->
                 let {
                   $dOrd :: GHC.Classes.Ord n
                   = Helpers.Classes.$p2DistB @ a @ n $dDistB
                 } in
                 let {
                   $dEq :: GHC.Classes.Eq n = GHC.Classes.$p1Ord @ n $dOrd
                 } in
                 let {
                   dist' :: a n -> n
                   = Helpers.Classes.distMinMaxB @ a @ n $dDistB @ t eta eta1
                 } in
                 Data.Foldable.foldr1
                   @ t
                   eta
                   @ (a n)
                   (\ (a1 :: a n) (b :: a n) ->
                    let {
                      da :: n = dist' a1
                    } in
                    case GHC.Classes.==
                           @ n
                           $dEq
                           (GHC.Classes.max @ n $dOrd da (dist' b))
                           da of wild {
                      GHC.Types.False -> b GHC.Types.True -> a1 })
                   eta1) -}
82a197119131fc36564b4579f45d7742
  $tc'C:DistA :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7173622899807275266##
                   872907136670229871##
                   Helpers.Classes.$trModule
                   Helpers.Classes.$tc'C:DistA1) -}
4a9a0a35ecc6daaf346769bba7b36696
  $tc'C:DistA1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:DistA"#) -}
c1ee1e7a22ff416ba08121ce8a85deb1
  $tc'C:DistB :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13713396041006257824##
                   14619187758684776466##
                   Helpers.Classes.$trModule
                   Helpers.Classes.$tc'C:DistB1) -}
e966309903eff4dd79db035854064951
  $tc'C:DistB1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:DistB"#) -}
939def73ff03eb5603957b03bb33a241
  $tcDistA :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11599817244852391566##
                   16694547496909614559##
                   Helpers.Classes.$trModule
                   Helpers.Classes.$tcDistA1) -}
7fb14b7b371014c8c56f14d244ca1f5e
  $tcDistA1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DistA"#) -}
196bfc96e3fb3ca72657221c58587e39
  $tcDistB :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7219629749534646768##
                   216154753590139132##
                   Helpers.Classes.$trModule
                   Helpers.Classes.$tcDistB1) -}
f7ff92a1d56f83667c22b1b5913a5140
  $tcDistB1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DistB"#) -}
a10c7e5c98aa863b7cc82afe57aaad1c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Helpers.Classes.$trModule2
                   Helpers.Classes.$trModule1) -}
658581f9f7046f5ba03e0ebb18b49a02
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Helpers.Classes"#) -}
5376b18148c18697684b700b376a393c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pegboard-0.1.0.0-FjeDzkb0etYsOVuQKSaT2"#) -}
7865ae4b5cf86671a73f979c73a16b34
  class (GHC.Classes.Ord a, GHC.Classes.Ord n) =>
        DistA a n | a -> n, n -> a where
    distA :: a -> a -> n
    multA :: n -> n -> n
    distMinMaxA :: Data.Foldable.Foldable t => t a -> a -> n
    midElemA :: Data.Foldable.Foldable t => t a -> a
    {-# MINIMAL distA, multA #-}
942dc3c0fe5c93eb4bb3e7a29a8db2c5
  class (GHC.Classes.Ord (a n), GHC.Classes.Ord n) =>
        DistB (a :: GHC.Types.* -> GHC.Types.*) n | a n -> n, n -> a
                                                                   n where
    distB :: a n -> a n -> n
    multB :: n -> n -> n
    distMinMaxB :: Data.Foldable.Foldable t => t (a n) -> a n -> n
    midElemB :: Data.Foldable.Foldable t => t (a n) -> a n
    {-# MINIMAL distB, multB #-}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

